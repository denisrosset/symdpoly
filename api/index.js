Index.PACKAGES = {"net.alasc.symdpoly.algebra" : [{"name" : "net.alasc.symdpoly.algebra.MultiplicativeBinoid", "members_trait" : [{"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "net.alasc.symdpoly.algebra.MultiplicativeBinoid.isZero", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#isZero(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Monoid[A]", "member" : "algebra.ring.MultiplicativeMonoid.multiplicative", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#multiplicative:algebra.Monoid[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "zero", "tail" : "(): A", "member" : "net.alasc.symdpoly.algebra.MultiplicativeBinoid.zero", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#zero:A", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#times(x:A,y:A):A", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.algebra.Phased", "members_trait" : [{"label" : "multiplicative", "tail" : "(): Action[A, Phase]", "member" : "spire.algebra.MultiplicativeAction.multiplicative", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#multiplicative:spire.algebra.Action[P,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "phaseCanonical", "tail" : "(a: A): A", "member" : "net.alasc.symdpoly.algebra.Phased.phaseCanonical", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#phaseCanonical(a:A):A", "kind" : "abstract def"}, {"label" : "phaseOffset", "tail" : "(a: A): Phase", "member" : "net.alasc.symdpoly.algebra.Phased.phaseOffset", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#phaseOffset(a:A):net.alasc.symdpoly.Phase", "kind" : "abstract def"}, {"label" : "gtimesr", "tail" : "(p: A, g: Phase): A", "member" : "spire.algebra.MultiplicativeAction.gtimesr", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#gtimesr(p:P,g:G):P", "kind" : "abstract def"}, {"label" : "gtimesl", "tail" : "(g: Phase, p: A): A", "member" : "spire.algebra.MultiplicativeAction.gtimesl", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#gtimesl(g:G,p:P):P", "kind" : "abstract def"}], "shortDescription" : "Describes an element with a phase.", "object" : "net\/alasc\/symdpoly\/algebra\/Phased$.html", "members_object" : [{"label" : "syntax", "tail" : "", "member" : "net.alasc.symdpoly.algebra.Phased.syntax", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#syntax", "kind" : "object"}, {"label" : "PhasedOps", "tail" : "", "member" : "net.alasc.symdpoly.algebra.Phased.PhasedOps", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#PhasedOps[A]extendsAnyRef", "kind" : "final class"}, {"label" : "apply", "tail" : "(ev: Phased[A]): Phased[A]", "member" : "net.alasc.symdpoly.algebra.Phased.apply", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#apply[A](implicitev:net.alasc.symdpoly.algebra.Phased[A]):net.alasc.symdpoly.algebra.Phased[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/algebra\/Phased.html", "kind" : "trait"}], "net.alasc.symdpoly.solvers" : [{"name" : "net.alasc.symdpoly.solvers.Instance", "shortDescription" : "", "members_class" : [{"label" : "cycloToDouble", "tail" : "(cyclo: Cyclo): Double", "member" : "net.alasc.symdpoly.solvers.Instance.cycloToDouble", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#cycloToDouble(cyclo:cyclo.Cyclo):Double", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.Instance#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "relaxation", "tail" : "(): Relaxation[_, _, _]", "member" : "net.alasc.symdpoly.solvers.Instance.relaxation", "link" : "net\/alasc\/symdpoly\/solvers\/Instance.html#relaxation:net.alasc.symdpoly.Relaxation[_,_,_]", "kind" : "abstract def"}], "class" : "net\/alasc\/symdpoly\/solvers\/Instance.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.solvers.LowerTriangular", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html", "members_object" : [{"label" : "SparseMatrix", "tail" : "", "member" : "net.alasc.symdpoly.solvers.LowerTriangular.SparseMatrix", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#SparseMatrix", "kind" : "object"}, {"label" : "SparseMatrix", "tail" : "", "member" : "net.alasc.symdpoly.solvers.LowerTriangular.SparseMatrix", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#SparseMatrixextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/LowerTriangular$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.solvers.MosekInstance", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html", "members_class" : [{"label" : "printCBF", "tail" : "(): Unit", "member" : "net.alasc.symdpoly.solvers.MosekInstance.printCBF", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#printCBF():Unit", "kind" : "def"}, {"label" : "writeCBF", "tail" : "(fileName: String): Unit", "member" : "net.alasc.symdpoly.solvers.MosekInstance.writeCBF", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#writeCBF(fileName:String):Unit", "kind" : "def"}, {"label" : "writeCBFData", "tail" : "(writer: Writer): Unit", "member" : "net.alasc.symdpoly.solvers.MosekInstance.writeCBFData", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#writeCBFData(writer:java.io.Writer):Unit", "kind" : "def"}, {"label" : "writeConstraintMatrices", "tail" : "(writer: Writer, list: Vector[SparseMatrix]): Unit", "member" : "net.alasc.symdpoly.solvers.MosekInstance.writeConstraintMatrices", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#writeConstraintMatrices(writer:java.io.Writer,list:Vector[net.alasc.symdpoly.solvers.LowerTriangular.SparseMatrix]):Unit", "kind" : "def"}, {"label" : "writeSparseMatrix", "tail" : "(writer: Writer, matrix: SparseMatrix): Unit", "member" : "net.alasc.symdpoly.solvers.MosekInstance.writeSparseMatrix", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#writeSparseMatrix(writer:java.io.Writer,matrix:net.alasc.symdpoly.solvers.LowerTriangular.SparseMatrix):Unit", "kind" : "def"}, {"label" : "a", "tail" : ": Vector[SparseMatrix]", "member" : "net.alasc.symdpoly.solvers.MosekInstance.a", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#a:scala.collection.immutable.Vector[net.alasc.symdpoly.solvers.LowerTriangular.SparseMatrix]", "kind" : "val"}, {"label" : "c", "tail" : ": SparseMatrix", "member" : "net.alasc.symdpoly.solvers.MosekInstance.c", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#c:net.alasc.symdpoly.solvers.LowerTriangular.SparseMatrix", "kind" : "val"}, {"label" : "buc", "tail" : ": Array[Double]", "member" : "net.alasc.symdpoly.solvers.MosekInstance.buc", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#buc:Array[Double]", "kind" : "val"}, {"label" : "blc", "tail" : ": Array[Double]", "member" : "net.alasc.symdpoly.solvers.MosekInstance.blc", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#blc:Array[Double]", "kind" : "val"}, {"label" : "cfix", "tail" : ": Double", "member" : "net.alasc.symdpoly.solvers.MosekInstance.cfix", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#cfix:Double", "kind" : "val"}, {"label" : "lenbarvar", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.solvers.MosekInstance.lenbarvar", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#lenbarvar:Array[Int]", "kind" : "val"}, {"label" : "dimbarvar", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.solvers.MosekInstance.dimbarvar", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#dimbarvar:Array[Int]", "kind" : "val"}, {"label" : "d", "tail" : ": Int", "member" : "net.alasc.symdpoly.solvers.MosekInstance.d", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#d:Int", "kind" : "val"}, {"label" : "numbarvar", "tail" : ": Int", "member" : "net.alasc.symdpoly.solvers.MosekInstance.numbarvar", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#numbarvar:Int", "kind" : "val"}, {"label" : "numcon", "tail" : ": Int", "member" : "net.alasc.symdpoly.solvers.MosekInstance.numcon", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#numcon:Int", "kind" : "val"}, {"label" : "m", "tail" : ": Int", "member" : "net.alasc.symdpoly.solvers.MosekInstance.m", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#m:Int", "kind" : "val"}, {"member" : "net.alasc.symdpoly.solvers.MosekInstance#<init>", "error" : "unsupported entity"}, {"label" : "relaxation", "tail" : ": Relaxation[_, _, _]", "member" : "net.alasc.symdpoly.solvers.MosekInstance.relaxation", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#relaxation:net.alasc.symdpoly.Relaxation[_,_,_]", "kind" : "val"}, {"label" : "cycloToDouble", "tail" : "(cyclo: Cyclo): Double", "member" : "net.alasc.symdpoly.solvers.Instance.cycloToDouble", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#cycloToDouble(cyclo:cyclo.Cyclo):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromLowerTriangularColStacked", "tail" : "(d: Int, vec: Vec[F])(arg0: Sparse[F]): Mat[F]", "member" : "net.alasc.symdpoly.solvers.MosekInstance.fromLowerTriangularColStacked", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#fromLowerTriangularColStacked[F](d:Int,vec:scalin.immutable.Vec[F])(implicitevidence$1:scalin.Sparse[F]):scalin.immutable.Mat[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/MosekInstance$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/solvers\/MosekInstance.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.solvers.SDPAInstance", "shortDescription" : "", "members_class" : [{"label" : "writeFile", "tail" : "(fileName: String): Unit", "member" : "net.alasc.symdpoly.solvers.SDPAInstance.writeFile", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#writeFile(fileName:String):Unit", "kind" : "def"}, {"label" : "print", "tail" : "(): Unit", "member" : "net.alasc.symdpoly.solvers.SDPAInstance.print", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#print():Unit", "kind" : "def"}, {"label" : "writeData", "tail" : "(writer: Writer): Unit", "member" : "net.alasc.symdpoly.solvers.SDPAInstance.writeData", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#writeData(writer:java.io.Writer):Unit", "kind" : "def"}, {"label" : "C", "tail" : ": SparseMatrix", "member" : "net.alasc.symdpoly.solvers.SDPAInstance.C", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#C:net.alasc.symdpoly.solvers.UpperTriangular.SparseMatrix", "kind" : "val"}, {"label" : "objConstant", "tail" : ": Double", "member" : "net.alasc.symdpoly.solvers.SDPAInstance.objConstant", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#objConstant:Double", "kind" : "val"}, {"label" : "b", "tail" : ": Array[Double]", "member" : "net.alasc.symdpoly.solvers.SDPAInstance.b", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#b:Array[Double]", "kind" : "val"}, {"label" : "a", "tail" : ": Vector[SparseMatrix]", "member" : "net.alasc.symdpoly.solvers.SDPAInstance.a", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#a:scala.collection.immutable.Vector[net.alasc.symdpoly.solvers.UpperTriangular.SparseMatrix]", "kind" : "val"}, {"label" : "blocks", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.solvers.SDPAInstance.blocks", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#blocks:Array[Int]", "kind" : "val"}, {"label" : "nBlocks", "tail" : ": Int", "member" : "net.alasc.symdpoly.solvers.SDPAInstance.nBlocks", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#nBlocks:Int", "kind" : "val"}, {"label" : "m", "tail" : ": Int", "member" : "net.alasc.symdpoly.solvers.SDPAInstance.m", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#m:Int", "kind" : "val"}, {"member" : "net.alasc.symdpoly.solvers.SDPAInstance#<init>", "error" : "unsupported entity"}, {"label" : "relaxation", "tail" : ": Relaxation[_, _, _]", "member" : "net.alasc.symdpoly.solvers.SDPAInstance.relaxation", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#relaxation:net.alasc.symdpoly.Relaxation[_,_,_]", "kind" : "val"}, {"label" : "cycloToDouble", "tail" : "(cyclo: Cyclo): Double", "member" : "net.alasc.symdpoly.solvers.Instance.cycloToDouble", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#cycloToDouble(cyclo:cyclo.Cyclo):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/solvers\/SDPAInstance.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.solvers.UpperTriangular", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html", "members_object" : [{"label" : "SparseMatrix", "tail" : "", "member" : "net.alasc.symdpoly.solvers.UpperTriangular.SparseMatrix", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#SparseMatrix", "kind" : "object"}, {"label" : "SparseMatrix", "tail" : "", "member" : "net.alasc.symdpoly.solvers.UpperTriangular.SparseMatrix", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#SparseMatrixextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/UpperTriangular$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "net.alasc.symdpoly.matlab" : [{"name" : "net.alasc.symdpoly.matlab.MatlabRelaxation", "shortDescription" : "", "members_class" : [{"label" : "sedumiInstance", "tail" : "(): SeDuMiInstance", "member" : "net.alasc.symdpoly.matlab.MatlabRelaxation.sedumiInstance", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#sedumiInstance:net.alasc.symdpoly.matlab.SeDuMiInstance", "kind" : "def"}, {"label" : "sdpt3Instance", "tail" : "(): SDPT3Instance", "member" : "net.alasc.symdpoly.matlab.MatlabRelaxation.sdpt3Instance", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#sdpt3Instance:net.alasc.symdpoly.matlab.SDPT3Instance", "kind" : "def"}, {"label" : "scsInstance", "tail" : "(): SCSInstance", "member" : "net.alasc.symdpoly.matlab.MatlabRelaxation.scsInstance", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#scsInstance:net.alasc.symdpoly.matlab.SCSInstance", "kind" : "def"}, {"member" : "net.alasc.symdpoly.matlab.MatlabRelaxation#<init>", "error" : "unsupported entity"}, {"label" : "relaxation", "tail" : ": Relaxation[_, _, _]", "member" : "net.alasc.symdpoly.matlab.MatlabRelaxation.relaxation", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#relaxation:net.alasc.symdpoly.Relaxation[_,_,_]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/matlab\/package$$MatlabRelaxation.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.matlab.SCSInstance", "shortDescription" : "Data provided in the format of https:\/\/github.com\/bodono\/scs-matlab", "object" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html", "members_class" : [{"label" : "writeFile", "tail" : "(fileName: String): Unit", "member" : "net.alasc.symdpoly.matlab.SCSInstance.writeFile", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#writeFile(fileName:String):Unit", "kind" : "def"}, {"label" : "k", "tail" : ": K", "member" : "net.alasc.symdpoly.matlab.SCSInstance.k", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#k:SCSInstance.this.K", "kind" : "val"}, {"label" : "K", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SCSInstance.K", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#KextendsProductwithSerializable", "kind" : "case class"}, {"label" : "a", "tail" : ": SparseMatrix", "member" : "net.alasc.symdpoly.matlab.SCSInstance.a", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#a:net.alasc.symdpoly.matlab.SCSInstance.SparseMatrix", "kind" : "val"}, {"label" : "aMatrix", "tail" : "(): SparseMatrix", "member" : "net.alasc.symdpoly.matlab.SCSInstance.aMatrix", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#aMatrix:net.alasc.symdpoly.matlab.SCSInstance.SparseMatrix", "kind" : "def"}, {"label" : "b", "tail" : ": SparseVector", "member" : "net.alasc.symdpoly.matlab.SCSInstance.b", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#b:net.alasc.symdpoly.matlab.SCSInstance.SparseVector", "kind" : "val"}, {"label" : "c", "tail" : ": Array[Double]", "member" : "net.alasc.symdpoly.matlab.SCSInstance.c", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#c:Array[Double]", "kind" : "val"}, {"label" : "objShift", "tail" : ": Double", "member" : "net.alasc.symdpoly.matlab.SCSInstance.objShift", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#objShift:Double", "kind" : "val"}, {"label" : "n", "tail" : ": Int", "member" : "net.alasc.symdpoly.matlab.SCSInstance.n", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#n:Int", "kind" : "val"}, {"label" : "m", "tail" : ": Int", "member" : "net.alasc.symdpoly.matlab.SCSInstance.m", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#m:Int", "kind" : "val"}, {"member" : "net.alasc.symdpoly.matlab.SCSInstance#<init>", "error" : "unsupported entity"}, {"label" : "relaxation", "tail" : ": Relaxation[_, _, _]", "member" : "net.alasc.symdpoly.matlab.SCSInstance.relaxation", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#relaxation:net.alasc.symdpoly.Relaxation[_,_,_]", "kind" : "val"}, {"label" : "cycloToDouble", "tail" : "(cyclo: Cyclo): Double", "member" : "net.alasc.symdpoly.solvers.Instance.cycloToDouble", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#cycloToDouble(cyclo:cyclo.Cyclo):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "SparseMatrix", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SCSInstance.SparseMatrix", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#SparseMatrixextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SparseVector", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SCSInstance.SparseVector", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#SparseVector", "kind" : "object"}, {"label" : "SparseVector", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SCSInstance.SparseVector", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#SparseVectorextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SCSInstance$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/matlab\/SCSInstance.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.matlab.SDPT3Instance", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html", "members_class" : [{"label" : "writeFile", "tail" : "(fileName: String): Unit", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.writeFile", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#writeFile(fileName:String):Unit", "kind" : "def"}, {"label" : "blocks", "tail" : ": Array[Block]", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.blocks", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#blocks:Array[SDPT3Instance.this.Block]", "kind" : "val"}, {"label" : "Block", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.Block", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#BlockextendsProductwithSerializable", "kind" : "case class"}, {"label" : "a", "tail" : ": SparseMatrix", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.a", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#a:net.alasc.symdpoly.matlab.SDPT3Instance.SparseMatrix", "kind" : "val"}, {"label" : "aMatrix", "tail" : "(): SparseMatrix", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.aMatrix", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#aMatrix:net.alasc.symdpoly.matlab.SDPT3Instance.SparseMatrix", "kind" : "def"}, {"label" : "C", "tail" : ": SparseMatrix", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.C", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#C:net.alasc.symdpoly.matlab.SDPT3Instance.SparseMatrix", "kind" : "val"}, {"label" : "b", "tail" : ": Array[Double]", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.b", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#b:Array[Double]", "kind" : "val"}, {"label" : "objShift", "tail" : ": Double", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.objShift", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#objShift:Double", "kind" : "val"}, {"label" : "n", "tail" : ": Int", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.n", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#n:Int", "kind" : "val"}, {"label" : "m", "tail" : ": Int", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.m", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#m:Int", "kind" : "val"}, {"member" : "net.alasc.symdpoly.matlab.SDPT3Instance#<init>", "error" : "unsupported entity"}, {"label" : "relaxation", "tail" : ": Relaxation[_, _, _]", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.relaxation", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#relaxation:net.alasc.symdpoly.Relaxation[_,_,_]", "kind" : "val"}, {"label" : "cycloToDouble", "tail" : "(cyclo: Cyclo): Double", "member" : "net.alasc.symdpoly.solvers.Instance.cycloToDouble", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#cycloToDouble(cyclo:cyclo.Cyclo):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "SparseMatrix", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.SparseMatrix", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#SparseMatrix", "kind" : "object"}, {"label" : "SparseMatrix", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.SparseMatrix", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#SparseMatrixextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SparseVector", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.SparseVector", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#SparseVector", "kind" : "object"}, {"label" : "SparseVector", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SDPT3Instance.SparseVector", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#SparseVectorextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/matlab\/SDPT3Instance.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.matlab.SeDuMiInstance", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html", "members_class" : [{"label" : "writeFile", "tail" : "(fileName: String): Unit", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.writeFile", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#writeFile(fileName:String):Unit", "kind" : "def"}, {"label" : "objShift", "tail" : ": Double", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.objShift", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#objShift:Double", "kind" : "val"}, {"label" : "b", "tail" : ": Array[Double]", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.b", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#b:Array[Double]", "kind" : "val"}, {"label" : "a", "tail" : ": SparseMatrix", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.a", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#a:net.alasc.symdpoly.matlab.SeDuMiInstance.SparseMatrix", "kind" : "val"}, {"label" : "aMatrix", "tail" : "(): SparseMatrix", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.aMatrix", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#aMatrix:net.alasc.symdpoly.matlab.SeDuMiInstance.SparseMatrix", "kind" : "def"}, {"label" : "c", "tail" : ": SparseVector", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.c", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#c:net.alasc.symdpoly.matlab.SeDuMiInstance.SparseVector", "kind" : "val"}, {"label" : "k", "tail" : ": K", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.k", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#k:SeDuMiInstance.this.K", "kind" : "val"}, {"label" : "K", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.K", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#KextendsProductwithSerializable", "kind" : "case class"}, {"label" : "n", "tail" : ": Int", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.n", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#n:Int", "kind" : "val"}, {"label" : "m", "tail" : ": Int", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.m", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#m:Int", "kind" : "val"}, {"member" : "net.alasc.symdpoly.matlab.SeDuMiInstance#<init>", "error" : "unsupported entity"}, {"label" : "relaxation", "tail" : ": Relaxation[_, _, _]", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.relaxation", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#relaxation:net.alasc.symdpoly.Relaxation[_,_,_]", "kind" : "val"}, {"label" : "cycloToDouble", "tail" : "(cyclo: Cyclo): Double", "member" : "net.alasc.symdpoly.solvers.Instance.cycloToDouble", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#cycloToDouble(cyclo:cyclo.Cyclo):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "SparseMatrix", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.SparseMatrix", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#SparseMatrixextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SparseVector", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.SparseVector", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#SparseVector", "kind" : "object"}, {"label" : "SparseVector", "tail" : "", "member" : "net.alasc.symdpoly.matlab.SeDuMiInstance.SparseVector", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#SparseVectorextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/matlab\/SeDuMiInstance.html", "kind" : "class"}], "net.alasc" : [], "net.alasc.symdpoly.internal" : [{"name" : "net.alasc.symdpoly.internal.MomentSet", "shortDescription" : "Describes an ordered set of equivalence classes of monomials under evaluation.", "members_class" : [{"label" : "allSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.internal.MomentSet.allSelfAdjoint", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#allSelfAdjoint:Boolean", "kind" : "def"}, {"label" : "indexOf", "tail" : "(mono: Mono[M, F]): Int", "member" : "net.alasc.symdpoly.internal.MomentSet.indexOf", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#indexOf(mono:net.alasc.symdpoly.Mono[M,F]):Int", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int): Mono[M, F]", "member" : "net.alasc.symdpoly.internal.MomentSet.apply", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#apply(i:Int):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "isSelfAdjoint", "tail" : "(i: Int): Boolean", "member" : "net.alasc.symdpoly.internal.MomentSet.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#isSelfAdjoint(i:Int):Boolean", "kind" : "def"}, {"label" : "conjugateIndex", "tail" : "(i: Int): Int", "member" : "net.alasc.symdpoly.internal.MomentSet.conjugateIndex", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#conjugateIndex(i:Int):Int", "kind" : "def"}, {"label" : "nMonomials", "tail" : "(): Int", "member" : "net.alasc.symdpoly.internal.MomentSet.nMonomials", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#nMonomials:Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.internal.MomentSet#<init>", "error" : "unsupported entity"}, {"label" : "monomials", "tail" : ": OrderedSet[Mono[M, F]]", "member" : "net.alasc.symdpoly.internal.MomentSet.monomials", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#monomials:net.alasc.symdpoly.OrderedSet[net.alasc.symdpoly.Mono[M,F]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/internal\/MomentSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/internal\/MomentSet.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.internal.MomentSetBuilder", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html", "members_class" : [{"label" : "getElement", "tail" : "(monoSelfAdjoint: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.internal.MomentSetBuilder.getElement", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#getElement(monoSelfAdjoint:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "def"}, {"label" : "getElement", "tail" : "(mono: MutableWord[F], monoAdjoint: MutableWord[F]): Tuple2Int", "member" : "net.alasc.symdpoly.internal.MomentSetBuilder.getElement", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#getElement(mono:net.alasc.symdpoly.free.MutableWord[F],monoAdjoint:net.alasc.symdpoly.free.MutableWord[F]):net.alasc.util.Tuple2Int", "kind" : "def"}, {"label" : "result", "tail" : "()(arg0: Aux[M]): (MomentSet[M, F], Perm)", "member" : "net.alasc.symdpoly.internal.MomentSetBuilder.result", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#result[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton]()(implicitevidence$2:shapeless.Witness.Aux[M]):(net.alasc.symdpoly.internal.MomentSet[M,F],net.alasc.perms.Perm)", "kind" : "def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.internal.MomentSetBuilder.F", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#F:F", "kind" : "def"}, {"member" : "net.alasc.symdpoly.internal.MomentSetBuilder#<init>", "error" : "unsupported entity"}, {"label" : "n", "tail" : ": Int", "member" : "net.alasc.symdpoly.internal.MomentSetBuilder.n", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#n:Int", "kind" : "var"}, {"label" : "momentMap", "tail" : ": HashMap[MutableWord[F], Int]", "member" : "net.alasc.symdpoly.internal.MomentSetBuilder.momentMap", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#momentMap:metal.mutable.HashMap[net.alasc.symdpoly.free.MutableWord[F],Int]", "kind" : "val"}, {"label" : "conjugate", "tail" : ": Buffer[Int]", "member" : "net.alasc.symdpoly.internal.MomentSetBuilder.conjugate", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#conjugate:metal.mutable.Buffer[Int]", "kind" : "val"}, {"label" : "sequence", "tail" : ": Buffer[MutableWord[F]]", "member" : "net.alasc.symdpoly.internal.MomentSetBuilder.sequence", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#sequence:metal.mutable.Buffer[net.alasc.symdpoly.free.MutableWord[F]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "make", "tail" : "(wF: Aux[F]): MomentSetBuilder[F]", "member" : "net.alasc.symdpoly.internal.MomentSetBuilder.make", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#make[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwF:shapeless.Witness.Aux[F]):net.alasc.symdpoly.internal.MomentSetBuilder[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/internal\/MomentSetBuilder.html", "kind" : "class"}], "net.alasc.symdpoly.mosek" : [{"name" : "net.alasc.symdpoly.mosek.RichMosekInstance", "shortDescription" : "", "members_class" : [{"label" : "solve", "tail" : "(tolRelGap: Double): Solution", "member" : "net.alasc.symdpoly.mosek.RichMosekInstance.solve", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#solve(tolRelGap:Double):net.alasc.symdpoly.Solution", "kind" : "def"}, {"label" : "writeFile", "tail" : "(fileName: String, tolRelGap: Double): Unit", "member" : "net.alasc.symdpoly.mosek.RichMosekInstance.writeFile", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#writeFile(fileName:String,tolRelGap:Double):Unit", "kind" : "def"}, {"label" : "populateTask", "tail" : "(task: Task): Unit", "member" : "net.alasc.symdpoly.mosek.RichMosekInstance.populateTask", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#populateTask(task:mosek.Task):Unit", "kind" : "def"}, {"member" : "net.alasc.symdpoly.mosek.RichMosekInstance#<init>", "error" : "unsupported entity"}, {"label" : "instance", "tail" : ": MosekInstance", "member" : "net.alasc.symdpoly.mosek.RichMosekInstance.instance", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#instance:net.alasc.symdpoly.solvers.MosekInstance", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/mosek\/RichMosekInstance.html", "kind" : "class"}], "net.alasc.symdpoly.quotient" : [{"name" : "net.alasc.symdpoly.quotient.MonoidDef", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html", "members_class" : [{"label" : "inPlaceNormalForm", "tail" : "(word: MutableWord[Free], start: Int): Boolean", "member" : "net.alasc.symdpoly.quotient.MonoidDef.inPlaceNormalForm", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#inPlaceNormalForm(word:net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free],start:Int):Boolean", "kind" : "def"}, {"label" : "quotient", "tail" : "(poly: Poly[Free, Free]): Poly[MonoidDef.this.type, Free]", "member" : "net.alasc.symdpoly.quotient.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#quotient(poly:net.alasc.symdpoly.Poly[MonoidDef.this.Free,MonoidDef.this.Free]):net.alasc.symdpoly.Poly[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "def"}, {"label" : "quotient", "tail" : "(word: Mono[Free, Free]): Monomial", "member" : "net.alasc.symdpoly.quotient.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#quotient(word:net.alasc.symdpoly.Mono[MonoidDef.this.Free,MonoidDef.this.Free]):MonoidDef.this.Monomial", "kind" : "def"}, {"member" : "net.alasc.symdpoly.quotient.MonoidDef#<init>", "error" : "unsupported entity"}, {"label" : "ambientGroup", "tail" : "(generators: Generator[Free]*): Grp[GenPerm]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.ambientGroup", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#ambientGroup(generators:net.alasc.symdpoly.free.Generator[FreeBasedMonoidDef.this.Free]*):net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "def"}, {"label" : "monoToPoly", "tail" : ": ToPoly[Mono[MonoidDef.this.type, Free], MonoidDef.this.type, Free]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoToPoly", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoToPoly:net.alasc.symdpoly.ToPoly[net.alasc.symdpoly.Mono[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free],FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free]", "kind" : "val"}, {"label" : "polyGenPermAction", "tail" : ": Action[Poly[MonoidDef.this.type, Free], GenPerm]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyGenPermAction", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#polyGenPermAction:spire.algebra.Action[net.alasc.symdpoly.Poly[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free],net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "polyEq", "tail" : "(): Eq[Polynomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyEq", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#polyEq:spire.algebra.Eq[FreeBasedMonoidDef.this.Polynomial]", "kind" : "def"}, {"label" : "polyInvolution", "tail" : "(): Involution[Polynomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyInvolution", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#polyInvolution:spire.algebra.Involution[FreeBasedMonoidDef.this.Polynomial]", "kind" : "def"}, {"label" : "polyAssociativeAlgebra", "tail" : "(): FieldAssociativeAlgebra[Polynomial, Cyclo]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyAssociativeAlgebra", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#polyAssociativeAlgebra:spire.algebra.FieldAssociativeAlgebra[FreeBasedMonoidDef.this.Polynomial,cyclo.Cyclo]", "kind" : "def"}, {"label" : "Polynomial", "tail" : "", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.Polynomial", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#Polynomial=net.alasc.symdpoly.Poly[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free]", "kind" : "type"}, {"label" : "one", "tail" : ": Monomial", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.one", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#one:FreeBasedMonoidDef.this.Monomial", "kind" : "val"}, {"label" : "zero", "tail" : ": Monomial", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.zero", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#zero:FreeBasedMonoidDef.this.Monomial", "kind" : "val"}, {"label" : "monoGenPermAction", "tail" : ": Action[Monomial, GenPerm]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoGenPermAction", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoGenPermAction:spire.algebra.Action[FreeBasedMonoidDef.this.Monomial,net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "monoPhased", "tail" : ": Phased[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoPhased", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoPhased:net.alasc.symdpoly.algebra.Phased[FreeBasedMonoidDef.this.Monomial]", "kind" : "val"}, {"label" : "monoOrder", "tail" : "(): Order[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoOrder", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoOrder:spire.algebra.Order[FreeBasedMonoidDef.this.Monomial]", "kind" : "def"}, {"label" : "monoInvolution", "tail" : "(): Involution[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoInvolution", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoInvolution:spire.algebra.Involution[FreeBasedMonoidDef.this.Monomial]", "kind" : "def"}, {"label" : "monoMultiplicativeMonoid", "tail" : "(): MultiplicativeBinoid[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoMultiplicativeMonoid", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoMultiplicativeMonoid:net.alasc.symdpoly.algebra.MultiplicativeBinoid[FreeBasedMonoidDef.this.Monomial]", "kind" : "def"}, {"label" : "quotient", "tail" : "(gset: GSet[Free]): GSet[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#quotient(gset:net.alasc.symdpoly.GSet[FreeBasedMonoidDef.this.Free]):net.alasc.symdpoly.GSet[FreeBasedMonoidDef.this.type]", "kind" : "def"}, {"label" : "Monomial", "tail" : "", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.Monomial", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#Monomial=net.alasc.symdpoly.Mono[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free]", "kind" : "type"}, {"label" : "witnessFree", "tail" : "(): Aux[Free]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.witnessFree", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#witnessFree:shapeless.Witness.Aux[FreeBasedMonoidDef.this.Free]", "kind" : "implicit def"}, {"label" : "trivialGroupWitness", "tail" : ": Aux[TrivialGroup]", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroupWitness", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#trivialGroupWitness:shapeless.Witness.Aux[MonoidDef.this.TrivialGroup]", "kind" : "implicit val"}, {"label" : "trivialGroup", "tail" : "(): TrivialGroup", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroup", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#trivialGroup:MonoidDef.this.TrivialGroup", "kind" : "def"}, {"label" : "trivialGroupInstance", "tail" : ": Grp[GenPerm]", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroupInstance", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#trivialGroupInstance:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "TrivialGroup", "tail" : "", "member" : "net.alasc.symdpoly.generic.MonoidDef.TrivialGroup", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#TrivialGroup=MonoidDef.this.trivialGroupInstance.type", "kind" : "type"}, {"label" : "impWitness", "tail" : "(): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.impWitness", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#impWitness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "implicit def"}, {"label" : "witness", "tail" : ": Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.witness", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#witness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "pairRules", "tail" : "(): PairRules[Free]", "member" : "net.alasc.symdpoly.quotient.MonoidDef.pairRules", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#pairRules:net.alasc.symdpoly.quotient.PairRules[MonoidDef.this.Free]", "kind" : "abstract def"}, {"label" : "Free", "tail" : "(): Free", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.Free", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#Free:FreeBasedMonoidDef.this.Free", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.Free", "error" : "unsupported entity"}], "members_object" : [{"label" : "Aux", "tail" : "", "member" : "net.alasc.symdpoly.quotient.MonoidDef.Aux", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#Aux[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton]=net.alasc.symdpoly.quotient.MonoidDef{typeFree=F}", "kind" : "type"}, {"label" : "apply", "tail" : "(f: F)(pairSubstitutions: PairSubstitutions[F]): Aux[F]", "member" : "net.alasc.symdpoly.quotient.MonoidDef.apply", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](f:F)(pairSubstitutions:net.alasc.symdpoly.quotient.PairSubstitutions[F]):net.alasc.symdpoly.quotient.MonoidDef.Aux[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.quotient.PairRules", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html", "members_class" : [{"label" : "applyRules", "tail" : "(op1: F.Op, op2: F.Op): Mono[F, F]", "member" : "net.alasc.symdpoly.quotient.PairRules.applyRules", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#applyRules(op1:F#Op,op2:F#Op):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "rule", "tail" : "(i: Int, j: Int): Int", "member" : "net.alasc.symdpoly.quotient.PairRules.rule", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#rule(i:Int,j:Int):Int", "kind" : "def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.quotient.PairRules.F", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#F:F", "kind" : "def"}, {"member" : "net.alasc.symdpoly.quotient.PairRules#<init>", "error" : "unsupported entity"}, {"label" : "custom", "tail" : ": Map[(F.Op, F.Op), Mono[F, F]]", "member" : "net.alasc.symdpoly.quotient.PairRules.custom", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#custom:Map[(F#Op,F#Op),net.alasc.symdpoly.Mono[F,F]]", "kind" : "val"}, {"label" : "lookup", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.quotient.PairRules.lookup", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#lookup:Array[Int]", "kind" : "val"}, {"label" : "width", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.width", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#width:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(f: PairSubstitutions[F])(wF: Aux[F]): PairRules[F]", "member" : "net.alasc.symdpoly.quotient.PairRules.apply", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](f:net.alasc.symdpoly.quotient.PairSubstitutions[F])(implicitwF:shapeless.Witness.Aux[F]):net.alasc.symdpoly.quotient.PairRules[F]", "kind" : "def"}, {"label" : "setMaskIndex", "tail" : "(j: Int, cellValue: Int, rule: Int): Int", "member" : "net.alasc.symdpoly.quotient.PairRules.setMaskIndex", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#setMaskIndex(j:Int,cellValue:Int,rule:Int):Int", "kind" : "def"}, {"label" : "getMaskIndex", "tail" : "(j: Int, cellValue: Int): Int", "member" : "net.alasc.symdpoly.quotient.PairRules.getMaskIndex", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#getMaskIndex(j:Int,cellValue:Int):Int", "kind" : "def"}, {"label" : "cellIndex", "tail" : "(i: Int, j: Int, width: Int): Int", "member" : "net.alasc.symdpoly.quotient.PairRules.cellIndex", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#cellIndex(i:Int,j:Int,width:Int):Int", "kind" : "def"}, {"label" : "Custom", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.Custom", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#Custom:Int", "kind" : "val"}, {"label" : "KeepFirst", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.KeepFirst", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#KeepFirst:Int", "kind" : "val"}, {"label" : "Swap", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.Swap", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#Swap:Int", "kind" : "val"}, {"label" : "RemoveBoth", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.RemoveBoth", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#RemoveBoth:Int", "kind" : "val"}, {"label" : "Preserve", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.Preserve", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#Preserve:Int", "kind" : "val"}, {"label" : "SetToZero", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.SetToZero", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#SetToZero:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/quotient\/PairRules.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.quotient.PairSubstitutions", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(op1: F.Op, op2: F.Op): Mono[F, F]", "member" : "net.alasc.symdpoly.quotient.PairSubstitutions.apply", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#apply(op1:F#Op,op2:F#Op):net.alasc.symdpoly.Mono[F,F]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html", "kind" : "trait"}], "net.alasc.symdpoly" : [{"name" : "net.alasc.symdpoly.Failure", "shortDescription" : "", "members_case class" : [{"member" : "net.alasc.symdpoly.Failure#<init>", "error" : "unsupported entity"}, {"label" : "status", "tail" : ": String", "member" : "net.alasc.symdpoly.Failure.status", "link" : "net\/alasc\/symdpoly\/Failure.html#status:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Failure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Failure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Failure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Failure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Failure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Failure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Failure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Failure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Failure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Failure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Failure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Failure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Failure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Failure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Failure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Failure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/Failure.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.GenPoly", "shortDescription" : "", "members_class" : [{"member" : "net.alasc.symdpoly.GenPoly#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/GenPoly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/GenPoly.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/GenPoly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/GenPoly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/GenPoly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/GenPoly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/GenPoly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GenPoly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GenPoly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GenPoly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/GenPoly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/GenPoly.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/GenPoly.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/GenPoly.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/GenPoly.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/GenPoly.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/GenPoly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/GenPoly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/GenPoly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "string", "tail" : "(leftBracket: String, rightBracket: String): String", "member" : "net.alasc.symdpoly.GenPoly.string", "link" : "net\/alasc\/symdpoly\/GenPoly.html#string(leftBracket:String,rightBracket:String):String", "kind" : "abstract def"}, {"label" : "coeff", "tail" : "(i: Int): Cyclo", "member" : "net.alasc.symdpoly.GenPoly.coeff", "link" : "net\/alasc\/symdpoly\/GenPoly.html#coeff(i:Int):cyclo.Cyclo", "kind" : "abstract def"}, {"label" : "monomial", "tail" : "(i: Int): M.Monomial", "member" : "net.alasc.symdpoly.GenPoly.monomial", "link" : "net\/alasc\/symdpoly\/GenPoly.html#monomial(i:Int):M#Monomial", "kind" : "abstract def"}, {"label" : "nTerms", "tail" : "(): Int", "member" : "net.alasc.symdpoly.GenPoly.nTerms", "link" : "net\/alasc\/symdpoly\/GenPoly.html#nTerms:Int", "kind" : "abstract def"}], "class" : "net\/alasc\/symdpoly\/GenPoly.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.GramMatrix", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/GramMatrix$.html", "members_class" : [{"label" : "momentMatrix", "tail" : "(): Mat[Mono[M, F]]", "member" : "net.alasc.symdpoly.GramMatrix.momentMatrix", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#momentMatrix:scalin.immutable.Mat[net.alasc.symdpoly.Mono[M,F]]", "kind" : "def"}, {"label" : "nUniqueMonomials", "tail" : "(): Int", "member" : "net.alasc.symdpoly.GramMatrix.nUniqueMonomials", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#nUniqueMonomials:Int", "kind" : "def"}, {"label" : "phase", "tail" : "(r: Int, c: Int): Phase", "member" : "net.alasc.symdpoly.GramMatrix.phase", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#phase(r:Int,c:Int):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "moment", "tail" : "(r: Int, c: Int): Mono[M, F]", "member" : "net.alasc.symdpoly.GramMatrix.moment", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#moment(r:Int,c:Int):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "absMoment", "tail" : "(r: Int, c: Int): Mono[M, F]", "member" : "net.alasc.symdpoly.GramMatrix.absMoment", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#absMoment(r:Int,c:Int):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "momentIndex", "tail" : "(r: Int, c: Int): Int", "member" : "net.alasc.symdpoly.GramMatrix.momentIndex", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#momentIndex(r:Int,c:Int):Int", "kind" : "def"}, {"label" : "phaseMatrix", "tail" : "(): Mat[Phase]", "member" : "net.alasc.symdpoly.GramMatrix.phaseMatrix", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#phaseMatrix:scalin.immutable.Mat[net.alasc.symdpoly.Phase]", "kind" : "def"}, {"label" : "momentIndexMatrix", "tail" : "(): Mat[Int]", "member" : "net.alasc.symdpoly.GramMatrix.momentIndexMatrix", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#momentIndexMatrix:scalin.immutable.Mat[Int]", "kind" : "def"}, {"label" : "matrixSize", "tail" : ": Int", "member" : "net.alasc.symdpoly.GramMatrix.matrixSize", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#matrixSize:Int", "kind" : "val"}, {"label" : "wF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.GramMatrix.wF", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.GramMatrix.M", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#M:M", "kind" : "def"}, {"label" : "isReal", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.GramMatrix.isReal", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#isReal:Boolean", "kind" : "def"}, {"member" : "net.alasc.symdpoly.GramMatrix#<init>", "error" : "unsupported entity"}, {"label" : "momentSet", "tail" : ": MomentSet[M, F]", "member" : "net.alasc.symdpoly.GramMatrix.momentSet", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#momentSet:net.alasc.symdpoly.internal.MomentSet[M,F]", "kind" : "val"}, {"label" : "generatingMoments", "tail" : ": OrderedSet[Mono[M, F]]", "member" : "net.alasc.symdpoly.GramMatrix.generatingMoments", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#generatingMoments:net.alasc.symdpoly.OrderedSet[net.alasc.symdpoly.Mono[M,F]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/GramMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/GramMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(gSet: GSet[M], evaluator: FreeBasedEvaluator[M, F], symmetryGroup: Grp[GenPerm])(wM: Aux[M]): GramMatrix[M, F]", "member" : "net.alasc.symdpoly.GramMatrix.apply", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#apply[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](gSet:net.alasc.symdpoly.GSet[M],evaluator:net.alasc.symdpoly.evaluation.FreeBasedEvaluator[M,F],symmetryGroup:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm])(implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.GramMatrix[M,F]", "kind" : "def"}, {"label" : "momentSetAction", "tail" : "(monomials: OrderedSet[Mono[M, F]], g: GenPerm)(w: Aux[M], a: Action[Mono[M, F], GenPerm]): GenPerm", "member" : "net.alasc.symdpoly.GramMatrix.momentSetAction", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#momentSetAction[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](monomials:net.alasc.symdpoly.OrderedSet[net.alasc.symdpoly.Mono[M,F]],g:net.alasc.symdpoly.math.GenPerm)(implicitw:shapeless.Witness.Aux[M],implicita:spire.algebra.Action[net.alasc.symdpoly.Mono[M,F],net.alasc.symdpoly.math.GenPerm]):net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/GramMatrix$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/GramMatrix.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.GSet", "members_trait" : [{"label" : "pow", "tail" : "(exp: Int): GSet[M]", "member" : "net.alasc.symdpoly.GSet.pow", "link" : "net\/alasc\/symdpoly\/GSet.html#pow(exp:Int):net.alasc.symdpoly.GSet[M]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: GSet[M]): GSet[M]", "member" : "net.alasc.symdpoly.GSet.*", "link" : "net\/alasc\/symdpoly\/GSet.html#*(rhs:net.alasc.symdpoly.GSet[M]):net.alasc.symdpoly.GSet[M]", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: GSet[M]): GSet[M]", "member" : "net.alasc.symdpoly.GSet.+", "link" : "net\/alasc\/symdpoly\/GSet.html#+(rhs:net.alasc.symdpoly.GSet[M]):net.alasc.symdpoly.GSet[M]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/GSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/GSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/GSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/GSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/GSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/GSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/GSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/GSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/GSet.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/GSet.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/GSet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/GSet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/GSet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/GSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/GSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/GSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "monomials", "tail" : "(wM: Aux[M]): SortedSet[M.Monomial]", "member" : "net.alasc.symdpoly.GSet.monomials", "link" : "net\/alasc\/symdpoly\/GSet.html#monomials(implicitwM:shapeless.Witness.Aux[M]):scala.collection.immutable.SortedSet[M#Monomial]", "kind" : "abstract def"}], "shortDescription" : "Generating set of monomials.", "object" : "net\/alasc\/symdpoly\/GSet$.html", "members_object" : [{"label" : "Tensor", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Tensor", "link" : "net\/alasc\/symdpoly\/GSet$.html#Tensor[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "Power", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Power", "link" : "net\/alasc\/symdpoly\/GSet$.html#Power[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "Word", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Word", "link" : "net\/alasc\/symdpoly\/GSet$.html#Word[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsGSet[F]withProductwithSerializable", "kind" : "case class"}, {"label" : "Ops", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Ops", "link" : "net\/alasc\/symdpoly\/GSet$.html#Ops[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsGSet[F]withProductwithSerializable", "kind" : "case class"}, {"label" : "Id", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Id", "link" : "net\/alasc\/symdpoly\/GSet$.html#Id[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Empty", "link" : "net\/alasc\/symdpoly\/GSet$.html#Empty[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "Orbit", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Orbit", "link" : "net\/alasc\/symdpoly\/GSet$.html#Orbit[G,M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "id", "tail" : "(): GSet[M]", "member" : "net.alasc.symdpoly.GSet.id", "link" : "net\/alasc\/symdpoly\/GSet$.html#id[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]:net.alasc.symdpoly.GSet[M]", "kind" : "def"}, {"label" : "empty", "tail" : "(): GSet[M]", "member" : "net.alasc.symdpoly.GSet.empty", "link" : "net\/alasc\/symdpoly\/GSet$.html#empty[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]:net.alasc.symdpoly.GSet[M]", "kind" : "def"}, {"label" : "word", "tail" : "(opTypes: GSet.word.F.OpType*): GSet[F]", "member" : "net.alasc.symdpoly.GSet.word", "link" : "net\/alasc\/symdpoly\/GSet$.html#word[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](opTypes:F#OpType*):net.alasc.symdpoly.GSet[F]", "kind" : "def"}, {"label" : "onePlus", "tail" : "(opTypes: GSet.onePlus.F.OpType*): GSet[F]", "member" : "net.alasc.symdpoly.GSet.onePlus", "link" : "net\/alasc\/symdpoly\/GSet$.html#onePlus[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](opTypes:F#OpType*):net.alasc.symdpoly.GSet[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(opTypes: GSet.apply.F.OpType*): GSet[F]", "member" : "net.alasc.symdpoly.GSet.apply", "link" : "net\/alasc\/symdpoly\/GSet$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](opTypes:F#OpType*):net.alasc.symdpoly.GSet[F]", "kind" : "def"}, {"label" : "Sequence", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Sequence", "link" : "net\/alasc\/symdpoly\/GSet$.html#Sequence[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "Quotient", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Quotient", "link" : "net\/alasc\/symdpoly\/GSet$.html#Quotient[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "ordering", "tail" : "(witness: Aux[M]): Ordering[GSet.ordering.M.Monomial]", "member" : "net.alasc.symdpoly.GSet.ordering", "link" : "net\/alasc\/symdpoly\/GSet$.html#ordering[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitwitness:shapeless.Witness.Aux[M]):Ordering[M#Monomial]", "kind" : "def"}, {"label" : "RichGSet", "tail" : "", "member" : "net.alasc.symdpoly.GSet.RichGSet", "link" : "net\/alasc\/symdpoly\/GSet$.html#RichGSet[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/GSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/GSet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/GSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/GSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/GSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/GSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/GSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/GSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/GSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/GSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/GSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/GSet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/GSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/GSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/GSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/GSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/GSet.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.Maximization", "shortDescription" : "", "members_case class" : [{"label" : "forcedSymmetricRelaxation", "tail" : "(generatingSet: GSet[M], group: Grp[GenPerm]): Relaxation[E, M, F]", "member" : "net.alasc.symdpoly.Maximization.forcedSymmetricRelaxation", "link" : "net\/alasc\/symdpoly\/Maximization.html#forcedSymmetricRelaxation(generatingSet:net.alasc.symdpoly.GSet[M],group:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]):net.alasc.symdpoly.Relaxation[E,M,F]", "kind" : "def"}, {"label" : "symmetricRelaxation", "tail" : "(generatingSet: GSet[M], ambientGroup: Grp[GenPerm]): Relaxation[E, M, F]", "member" : "net.alasc.symdpoly.Maximization.symmetricRelaxation", "link" : "net\/alasc\/symdpoly\/Maximization.html#symmetricRelaxation(generatingSet:net.alasc.symdpoly.GSet[M],ambientGroup:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]):net.alasc.symdpoly.Relaxation[E,M,F]", "kind" : "def"}, {"label" : "relaxation", "tail" : "(generatingSet: GSet[M]): Relaxation[E, M, F]", "member" : "net.alasc.symdpoly.Maximization.relaxation", "link" : "net\/alasc\/symdpoly\/Maximization.html#relaxation(generatingSet:net.alasc.symdpoly.GSet[M]):net.alasc.symdpoly.Relaxation[E,M,F]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.Maximization#<init>", "error" : "unsupported entity"}, {"label" : "evaluatedPoly", "tail" : ": EvaluatedPoly[E, M, M.TrivialGroup]", "member" : "net.alasc.symdpoly.Maximization.evaluatedPoly", "link" : "net\/alasc\/symdpoly\/Maximization.html#evaluatedPoly:net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,M#TrivialGroup]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Maximization.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Maximization.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Maximization.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Maximization.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Maximization.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Maximization.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Maximization.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Maximization.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Maximization.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Maximization.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Maximization.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Maximization.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Maximization.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Maximization.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Maximization.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Maximization.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/Maximization.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.Mono", "shortDescription" : "An element of a MonoidDef, which represents a monomial in a polynomial ring.", "object" : "net\/alasc\/symdpoly\/Mono$.html", "members_class" : [{"label" : "-", "tail" : "(rhs: A)(ev: ToPoly[A, M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Mono.-", "link" : "net\/alasc\/symdpoly\/Mono.html#-[A](rhs:A)(implicitev:net.alasc.symdpoly.ToPoly[A,M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: A)(ev: ToPoly[A, M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Mono.+", "link" : "net\/alasc\/symdpoly\/Mono.html#+[A](rhs:A)(implicitev:net.alasc.symdpoly.ToPoly[A,M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "abs", "tail" : "(ev: =:=[F, M]): Word[F]", "member" : "net.alasc.symdpoly.Mono.abs", "link" : "net\/alasc\/symdpoly\/Mono.html#abs(implicitev:F=:=M):net.alasc.symdpoly.free.Word[F]", "kind" : "def"}, {"label" : "mutableCopy", "tail" : "(ev: =:=[F, M]): MutableWord[F]", "member" : "net.alasc.symdpoly.Mono.mutableCopy", "link" : "net\/alasc\/symdpoly\/Mono.html#mutableCopy(implicitev:F=:=M):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "phase", "tail" : "(ev: =:=[F, M]): Phase", "member" : "net.alasc.symdpoly.Mono.phase", "link" : "net\/alasc\/symdpoly\/Mono.html#phase(implicitev:F=:=M):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int)(ev: =:=[F, M]): F.Op", "member" : "net.alasc.symdpoly.Mono.apply", "link" : "net\/alasc\/symdpoly\/Mono.html#apply(i:Int)(implicitev:F=:=M):F#Op", "kind" : "def"}, {"label" : "length", "tail" : "(ev: =:=[F, M]): Int", "member" : "net.alasc.symdpoly.Mono.length", "link" : "net\/alasc\/symdpoly\/Mono.html#length(implicitev:F=:=M):Int", "kind" : "def"}, {"label" : "phaseCanonical", "tail" : "(): Mono[M, F]", "member" : "net.alasc.symdpoly.Mono.phaseCanonical", "link" : "net\/alasc\/symdpoly\/Mono.html#phaseCanonical:net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "phaseOffset", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.Mono.phaseOffset", "link" : "net\/alasc\/symdpoly\/Mono.html#phaseOffset:net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "adjoint", "tail" : "(): Mono[M, F]", "member" : "net.alasc.symdpoly.Mono.adjoint", "link" : "net\/alasc\/symdpoly\/Mono.html#adjoint:net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Mono[M, F]): Mono[M, F]", "member" : "net.alasc.symdpoly.Mono.*", "link" : "net\/alasc\/symdpoly\/Mono.html#*(rhs:net.alasc.symdpoly.Mono[M,F]):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Phase): Mono[M, F]", "member" : "net.alasc.symdpoly.Mono.*", "link" : "net\/alasc\/symdpoly\/Mono.html#*(rhs:net.alasc.symdpoly.Phase):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "timesSignOf", "tail" : "(rhs: Int): Mono[M, F]", "member" : "net.alasc.symdpoly.Mono.timesSignOf", "link" : "net\/alasc\/symdpoly\/Mono.html#timesSignOf(rhs:Int):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Mono[M, F]", "member" : "net.alasc.symdpoly.Mono.unary_-", "link" : "net\/alasc\/symdpoly\/Mono.html#unary_-:net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "isOne", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.Mono.isOne", "link" : "net\/alasc\/symdpoly\/Mono.html#isOne:Boolean", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.Mono.isZero", "link" : "net\/alasc\/symdpoly\/Mono.html#isZero:Boolean", "kind" : "def"}, {"label" : "compareTo", "tail" : "(rhs: Mono[M, F]): Int", "member" : "net.alasc.symdpoly.Mono.compareTo", "link" : "net\/alasc\/symdpoly\/Mono.html#compareTo(rhs:net.alasc.symdpoly.Mono[M,F]):Int", "kind" : "def"}, {"label" : "normalForm", "tail" : "(): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.normalForm", "link" : "net\/alasc\/symdpoly\/Mono.html#normalForm:net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.Mono.hashCode", "link" : "net\/alasc\/symdpoly\/Mono.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.Mono.equals", "link" : "net\/alasc\/symdpoly\/Mono.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.Mono.toString", "link" : "net\/alasc\/symdpoly\/Mono.html#toString():String", "kind" : "def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.Mono.F", "link" : "net\/alasc\/symdpoly\/Mono.html#F:F", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.Mono.M", "link" : "net\/alasc\/symdpoly\/Mono.html#M:M", "kind" : "def"}, {"label" : "wF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.Mono.wF", "link" : "net\/alasc\/symdpoly\/Mono.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"member" : "net.alasc.symdpoly.Mono#<init>", "error" : "unsupported entity"}, {"label" : "data", "tail" : ": MutableWord[F]", "member" : "net.alasc.symdpoly.Mono.data", "link" : "net\/alasc\/symdpoly\/Mono.html#data:net.alasc.symdpoly.free.MutableWord[F]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Mono.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Mono.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Mono.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Mono.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Mono.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Mono.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Mono.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Mono.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Mono.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Mono.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Mono.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Mono.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Mono.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Mono.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Mono.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Mono.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "toPoly", "tail" : "(wM: Aux[M]): ToPoly[Mono[M, F], M, F]", "member" : "net.alasc.symdpoly.Mono.toPoly", "link" : "net\/alasc\/symdpoly\/Mono$.html#toPoly[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ToPoly[net.alasc.symdpoly.Mono[M,F],M,F]", "kind" : "implicit def"}, {"label" : "phased", "tail" : "(wM: Aux[M]): Phased[Mono[M, F]]", "member" : "net.alasc.symdpoly.Mono.phased", "link" : "net\/alasc\/symdpoly\/Mono$.html#phased[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.algebra.Phased[net.alasc.symdpoly.Mono[M,F]]", "kind" : "implicit def"}, {"label" : "genPermAction", "tail" : "(wM: Aux[M]): Action[Mono[M, F], GenPerm]", "member" : "net.alasc.symdpoly.Mono.genPermAction", "link" : "net\/alasc\/symdpoly\/Mono$.html#genPermAction[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Action[net.alasc.symdpoly.Mono[M,F],net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit def"}, {"label" : "order", "tail" : "(wM: Aux[M]): Order[Mono[M, F]]", "member" : "net.alasc.symdpoly.Mono.order", "link" : "net\/alasc\/symdpoly\/Mono$.html#order[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Order[net.alasc.symdpoly.Mono[M,F]]", "kind" : "implicit def"}, {"label" : "multiplicativeBinoid", "tail" : "(wM: Aux[M]): MultiplicativeBinoid[Mono[M, F]]", "member" : "net.alasc.symdpoly.Mono.multiplicativeBinoid", "link" : "net\/alasc\/symdpoly\/Mono$.html#multiplicativeBinoid[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.algebra.MultiplicativeBinoid[net.alasc.symdpoly.Mono[M,F]]", "kind" : "implicit def"}, {"label" : "involution", "tail" : "(wM: Aux[M]): Involution[Mono[M, F]]", "member" : "net.alasc.symdpoly.Mono.involution", "link" : "net\/alasc\/symdpoly\/Mono$.html#involution[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Involution[net.alasc.symdpoly.Mono[M,F]]", "kind" : "implicit def"}, {"label" : "predicate", "tail" : "(): Predicate[Mono[M, F]]", "member" : "net.alasc.symdpoly.Mono.predicate", "link" : "net\/alasc\/symdpoly\/Mono$.html#predicate[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]:org.typelevel.discipline.Predicate[net.alasc.symdpoly.Mono[M,F]]", "kind" : "implicit def"}, {"label" : "fromOp", "tail" : "(op: Mono.fromOp.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.fromOp", "link" : "net\/alasc\/symdpoly\/Mono$.html#fromOp[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](op:F#Op)(implicitevidence$17:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "implicit def"}, {"label" : "fromSeq", "tail" : "(phase: Phase, ops: Seq[Mono.fromSeq.F.Op])(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.fromSeq", "link" : "net\/alasc\/symdpoly\/Mono$.html#fromSeq[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.Phase,ops:Seq[F#Op])(implicitevidence$16:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(ops: Seq[Mono.fromSeq.F.Op])(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.fromSeq", "link" : "net\/alasc\/symdpoly\/Mono$.html#fromSeq[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](ops:Seq[F#Op])(implicitevidence$15:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, op1: Mono.apply.F.Op, op2: Mono.apply.F.Op, op3: Mono.apply.F.Op, op4: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.apply", "link" : "net\/alasc\/symdpoly\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.Phase,op1:F#Op,op2:F#Op,op3:F#Op,op4:F#Op)(implicitevidence$14:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, op1: Mono.apply.F.Op, op2: Mono.apply.F.Op, op3: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.apply", "link" : "net\/alasc\/symdpoly\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.Phase,op1:F#Op,op2:F#Op,op3:F#Op)(implicitevidence$13:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, op1: Mono.apply.F.Op, op2: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.apply", "link" : "net\/alasc\/symdpoly\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.Phase,op1:F#Op,op2:F#Op)(implicitevidence$12:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, op1: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.apply", "link" : "net\/alasc\/symdpoly\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.Phase,op1:F#Op)(implicitevidence$11:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.apply", "link" : "net\/alasc\/symdpoly\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.Phase)(implicitevidence$10:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(op1: Mono.apply.F.Op, op2: Mono.apply.F.Op, op3: Mono.apply.F.Op, op4: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.apply", "link" : "net\/alasc\/symdpoly\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](op1:F#Op,op2:F#Op,op3:F#Op,op4:F#Op)(implicitevidence$9:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(op1: Mono.apply.F.Op, op2: Mono.apply.F.Op, op3: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.apply", "link" : "net\/alasc\/symdpoly\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](op1:F#Op,op2:F#Op,op3:F#Op)(implicitevidence$8:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(op1: Mono.apply.F.Op, op2: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.apply", "link" : "net\/alasc\/symdpoly\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](op1:F#Op,op2:F#Op)(implicitevidence$7:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(op1: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.apply", "link" : "net\/alasc\/symdpoly\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](op1:F#Op)(implicitevidence$6:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "()(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.Mono.apply", "link" : "net\/alasc\/symdpoly\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]()(implicitevidence$5:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "one", "tail" : "(arg0: Aux[M], arg1: Aux[F]): Mono[M, F]", "member" : "net.alasc.symdpoly.Mono.one", "link" : "net\/alasc\/symdpoly\/Mono$.html#one[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitevidence$3:shapeless.Witness.Aux[M],implicitevidence$4:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "zero", "tail" : "(arg0: Aux[M], arg1: Aux[F]): Mono[M, F]", "member" : "net.alasc.symdpoly.Mono.zero", "link" : "net\/alasc\/symdpoly\/Mono$.html#zero[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitevidence$1:shapeless.Witness.Aux[M],implicitevidence$2:shapeless.Witness.Aux[F]):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "Free", "tail" : "", "member" : "net.alasc.symdpoly.Mono.Free", "link" : "net\/alasc\/symdpoly\/Mono$.html#Free[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]=net.alasc.symdpoly.Mono[F,F]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Mono$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Mono$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Mono$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Mono$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Mono$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Mono$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Mono$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Mono$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Mono$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Mono$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Mono$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Mono$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/Mono$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Mono$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Mono$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Mono$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Mono$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Mono$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Mono$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/Mono.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.MonoGenPermAction", "shortDescription" : "", "members_class" : [{"label" : "actl", "tail" : "(g: GenPerm, m: Mono[M, F]): Mono[M, F]", "member" : "net.alasc.symdpoly.MonoGenPermAction.actl", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#actl(g:net.alasc.symdpoly.math.GenPerm,m:net.alasc.symdpoly.Mono[M,F]):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "actr", "tail" : "(m: Mono[M, F], g: GenPerm): Mono[M, F]", "member" : "net.alasc.symdpoly.MonoGenPermAction.actr", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#actr(m:net.alasc.symdpoly.Mono[M,F],g:net.alasc.symdpoly.math.GenPerm):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.MonoGenPermAction.M", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#M:M", "kind" : "def"}, {"member" : "net.alasc.symdpoly.MonoGenPermAction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/MonoGenPermAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/MonoGenPermAction.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.MonoInstances", "shortDescription" : "", "members_class" : [{"label" : "times", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Mono[M, F]", "member" : "net.alasc.symdpoly.MonoInstances.times", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#times(x:net.alasc.symdpoly.Mono[M,F],y:net.alasc.symdpoly.Mono[M,F]):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Int", "member" : "net.alasc.symdpoly.MonoInstances.compare", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#compare(x:net.alasc.symdpoly.Mono[M,F],y:net.alasc.symdpoly.Mono[M,F]):Int", "kind" : "def"}, {"label" : "adjoint", "tail" : "(a: Mono[M, F]): Mono[M, F]", "member" : "net.alasc.symdpoly.MonoInstances.adjoint", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#adjoint(a:net.alasc.symdpoly.Mono[M,F]):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "one", "tail" : "(): Mono[M, F]", "member" : "net.alasc.symdpoly.MonoInstances.one", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#one:net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "zero", "tail" : "(): Mono[M, F]", "member" : "net.alasc.symdpoly.MonoInstances.zero", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#zero:net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "wF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.MonoInstances.wF", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"member" : "net.alasc.symdpoly.MonoInstances#<init>", "error" : "unsupported entity"}, {"label" : "toOrdering", "tail" : "(): Ordering[Mono[M, F]]", "member" : "cats.kernel.Order.toOrdering", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#toOrdering:Ordering[A]", "kind" : "def"}, {"label" : "gt", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Boolean", "member" : "cats.kernel.Order.gt", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#gt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "gteqv", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Boolean", "member" : "cats.kernel.Order.gteqv", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#gteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Boolean", "member" : "cats.kernel.Order.lt", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#lt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lteqv", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Boolean", "member" : "cats.kernel.Order.lteqv", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#lteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Boolean", "member" : "cats.kernel.Order.neqv", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#neqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Boolean", "member" : "cats.kernel.Order.eqv", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#eqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "max", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Mono[M, F]", "member" : "cats.kernel.Order.max", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#max(x:A,y:A):A", "kind" : "def"}, {"label" : "min", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Mono[M, F]", "member" : "cats.kernel.Order.min", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#min(x:A,y:A):A", "kind" : "def"}, {"label" : "partialCompare", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Double", "member" : "cats.kernel.Order.partialCompare", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#partialCompare(x:A,y:A):Double", "kind" : "def"}, {"label" : "comparison", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Comparison", "member" : "cats.kernel.Order.comparison", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#comparison(x:A,y:A):cats.kernel.Comparison", "kind" : "def"}, {"label" : "pmax", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Option[Mono[M, F]]", "member" : "cats.kernel.PartialOrder.pmax", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#pmax(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "pmin", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Option[Mono[M, F]]", "member" : "cats.kernel.PartialOrder.pmin", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#pmin(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Option[Int]", "member" : "cats.kernel.PartialOrder.tryCompare", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#tryCompare(x:A,y:A):Option[Int]", "kind" : "def"}, {"label" : "partialComparison", "tail" : "(x: Mono[M, F], y: Mono[M, F]): Option[Comparison]", "member" : "cats.kernel.PartialOrder.partialComparison", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#partialComparison(x:A,y:A):Option[cats.kernel.Comparison]", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Mono[M, F])(ev: Eq[Mono[M, F]]): Boolean", "member" : "net.alasc.symdpoly.algebra.MultiplicativeBinoid.isZero", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#isZero(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Mono[M, F]]): Option[Mono[M, F]]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Mono[M, F]]): Mono[M, F]", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: Mono[M, F], n: Int): Mono[M, F]", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: Mono[M, F])(ev: Eq[Mono[M, F]]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Monoid[Mono[M, F]]", "member" : "algebra.ring.MultiplicativeMonoid.multiplicative", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#multiplicative:algebra.Monoid[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Mono[M, F], n: Int): Mono[M, F]", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/MonoInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/MonoInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/MonoInstances.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.MonoPhased", "shortDescription" : "", "members_class" : [{"label" : "gtimesr", "tail" : "(m: Mono[M, F], phase: Phase): Mono[M, F]", "member" : "net.alasc.symdpoly.MonoPhased.gtimesr", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#gtimesr(m:net.alasc.symdpoly.Mono[M,F],phase:net.alasc.symdpoly.Phase):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "gtimesl", "tail" : "(phase: Phase, m: Mono[M, F]): Mono[M, F]", "member" : "net.alasc.symdpoly.MonoPhased.gtimesl", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#gtimesl(phase:net.alasc.symdpoly.Phase,m:net.alasc.symdpoly.Mono[M,F]):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "phaseCanonical", "tail" : "(a: Mono[M, F]): Mono[M, F]", "member" : "net.alasc.symdpoly.MonoPhased.phaseCanonical", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#phaseCanonical(a:net.alasc.symdpoly.Mono[M,F]):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "phaseOffset", "tail" : "(a: Mono[M, F]): Phase", "member" : "net.alasc.symdpoly.MonoPhased.phaseOffset", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#phaseOffset(a:net.alasc.symdpoly.Mono[M,F]):net.alasc.symdpoly.Phase", "kind" : "def"}, {"member" : "net.alasc.symdpoly.MonoPhased#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): Action[Mono[M, F], Phase]", "member" : "spire.algebra.MultiplicativeAction.multiplicative", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#multiplicative:spire.algebra.Action[P,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/MonoPhased.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/MonoPhased.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/MonoPhased.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.OptimumFound", "shortDescription" : "", "members_case class" : [{"member" : "net.alasc.symdpoly.OptimumFound#<init>", "error" : "unsupported entity"}, {"label" : "y", "tail" : ": Vec[Double]", "member" : "net.alasc.symdpoly.OptimumFound.y", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#y:scalin.immutable.Vec[Double]", "kind" : "val"}, {"label" : "X", "tail" : ": Option[Mat[Double]]", "member" : "net.alasc.symdpoly.OptimumFound.X", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#X:Option[scalin.immutable.Mat[Double]]", "kind" : "val"}, {"label" : "dualObjective", "tail" : ": Double", "member" : "net.alasc.symdpoly.OptimumFound.dualObjective", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#dualObjective:Double", "kind" : "val"}, {"label" : "primalObjective", "tail" : ": Option[Double]", "member" : "net.alasc.symdpoly.OptimumFound.primalObjective", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#primalObjective:Option[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/OptimumFound.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/OptimumFound.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.OrderedSet", "shortDescription" : "Like SortedSet, but using binary search on a sorted array to retrieve elements, the ordering given by Spire's Order typeclass.", "object" : "net\/alasc\/symdpoly\/OrderedSet$.html", "members_class" : [{"label" : "diff", "tail" : "(rhs: OrderedSet[A])(ord: Order[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.OrderedSet.diff", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#diff(rhs:net.alasc.symdpoly.OrderedSet[A])(implicitord:spire.algebra.Order[A]):net.alasc.symdpoly.OrderedSet[A]", "kind" : "def"}, {"label" : "toSortedSet", "tail" : "(ord: Order[A]): SortedSet[A]", "member" : "net.alasc.symdpoly.OrderedSet.toSortedSet", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#toSortedSet(implicitord:spire.algebra.Order[A]):scala.collection.immutable.SortedSet[A]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "net.alasc.symdpoly.OrderedSet.iterator", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(a: A)(ord: Order[A]): Boolean", "member" : "net.alasc.symdpoly.OrderedSet.contains", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#contains(a:A)(implicitord:spire.algebra.Order[A]):Boolean", "kind" : "def"}, {"label" : "indexOf", "tail" : "(a: A)(ord: Order[A]): Int", "member" : "net.alasc.symdpoly.OrderedSet.indexOf", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#indexOf(a:A)(implicitord:spire.algebra.Order[A]):Int", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "net.alasc.symdpoly.OrderedSet.length", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#length:Int", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int): A", "member" : "net.alasc.symdpoly.OrderedSet.apply", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#apply(i:Int):A", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.OrderedSet.toString", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.OrderedSet.hashCode", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "net.alasc.symdpoly.OrderedSet.equals", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#equals(o:Any):Boolean", "kind" : "def"}, {"member" : "net.alasc.symdpoly.OrderedSet#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/OrderedSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/OrderedSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromSortedSet", "tail" : "(set: SortedSet[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.OrderedSet.fromSortedSet", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#fromSortedSet[A](set:scala.collection.immutable.SortedSet[A]):net.alasc.symdpoly.OrderedSet[A]", "kind" : "def"}, {"label" : "fromUnique", "tail" : "(seq: Seq[A])(ord: Order[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.OrderedSet.fromUnique", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#fromUnique[A](seq:Seq[A])(implicitord:spire.algebra.Order[A]):net.alasc.symdpoly.OrderedSet[A]", "kind" : "def"}, {"label" : "fromOrdered", "tail" : "(seq: Seq[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.OrderedSet.fromOrdered", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#fromOrdered[A](seq:Seq[A]):net.alasc.symdpoly.OrderedSet[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(elements: A*)(arg0: Order[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.OrderedSet.apply", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#apply[A](elements:A*)(implicitevidence$2:spire.algebra.Order[A]):net.alasc.symdpoly.OrderedSet[A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(iterator: Iterator[A])(arg0: Order[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.OrderedSet.fromIterator", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#fromIterator[A](iterator:Iterator[A])(implicitevidence$1:spire.algebra.Order[A]):net.alasc.symdpoly.OrderedSet[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/OrderedSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/OrderedSet.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.Phase", "shortDescription" : "Represents a root of unity exp(2*pi*k\/n), where k = 0, ..., n - 1.", "object" : "net\/alasc\/symdpoly\/Phase$.html", "members_class" : [{"label" : "toCyclo", "tail" : "(): Cyclo", "member" : "net.alasc.symdpoly.Phase.toCyclo", "link" : "net\/alasc\/symdpoly\/Phase.html#toCyclo:cyclo.Cyclo", "kind" : "def"}, {"label" : "compareTo", "tail" : "(rhs: Phase): Int", "member" : "net.alasc.symdpoly.Phase.compareTo", "link" : "net\/alasc\/symdpoly\/Phase.html#compareTo(rhs:net.alasc.symdpoly.Phase):Int", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.Phase.unary_-", "link" : "net\/alasc\/symdpoly\/Phase.html#unary_-:net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "adjoint", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.Phase.adjoint", "link" : "net\/alasc\/symdpoly\/Phase.html#adjoint:net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Phase): Phase", "member" : "net.alasc.symdpoly.Phase.\/", "link" : "net\/alasc\/symdpoly\/Phase.html#\/(rhs:net.alasc.symdpoly.Phase):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.Phase.reciprocal", "link" : "net\/alasc\/symdpoly\/Phase.html#reciprocal:net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Phase): Phase", "member" : "net.alasc.symdpoly.Phase.*", "link" : "net\/alasc\/symdpoly\/Phase.html#*(rhs:net.alasc.symdpoly.Phase):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "numeratorIn", "tail" : "(den: Int): Int", "member" : "net.alasc.symdpoly.Phase.numeratorIn", "link" : "net\/alasc\/symdpoly\/Phase.html#numeratorIn(den:Int):Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.Phase.toString", "link" : "net\/alasc\/symdpoly\/Phase.html#toString():String", "kind" : "def"}, {"label" : "toInt", "tail" : "(): Int", "member" : "net.alasc.symdpoly.Phase.toInt", "link" : "net\/alasc\/symdpoly\/Phase.html#toInt:Int", "kind" : "def"}, {"label" : "isMinusI", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.Phase.isMinusI", "link" : "net\/alasc\/symdpoly\/Phase.html#isMinusI:Boolean", "kind" : "def"}, {"label" : "isI", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.Phase.isI", "link" : "net\/alasc\/symdpoly\/Phase.html#isI:Boolean", "kind" : "def"}, {"label" : "isMinusOne", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.Phase.isMinusOne", "link" : "net\/alasc\/symdpoly\/Phase.html#isMinusOne:Boolean", "kind" : "def"}, {"label" : "isOne", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.Phase.isOne", "link" : "net\/alasc\/symdpoly\/Phase.html#isOne:Boolean", "kind" : "def"}, {"label" : "n", "tail" : "(): Int", "member" : "net.alasc.symdpoly.Phase.n", "link" : "net\/alasc\/symdpoly\/Phase.html#n:Int", "kind" : "def"}, {"label" : "k", "tail" : "(): Int", "member" : "net.alasc.symdpoly.Phase.k", "link" : "net\/alasc\/symdpoly\/Phase.html#k:Int", "kind" : "def"}, {"label" : "_2", "tail" : "(): Int", "member" : "net.alasc.symdpoly.Phase._2", "link" : "net\/alasc\/symdpoly\/Phase.html#_2:Int", "kind" : "def"}, {"label" : "_1", "tail" : "(): Int", "member" : "net.alasc.symdpoly.Phase._1", "link" : "net\/alasc\/symdpoly\/Phase.html#_1:Int", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.Phase.isEmpty", "link" : "net\/alasc\/symdpoly\/Phase.html#isEmpty:Boolean", "kind" : "def"}, {"member" : "net.alasc.symdpoly.Phase#<init>", "error" : "unsupported entity"}, {"label" : "encoding", "tail" : ": Int", "member" : "net.alasc.symdpoly.Phase.encoding", "link" : "net\/alasc\/symdpoly\/Phase.html#encoding:Int", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "net\/alasc\/symdpoly\/Phase.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "net\/alasc\/symdpoly\/Phase.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Phase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Phase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "net\/alasc\/symdpoly\/Phase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "net\/alasc\/symdpoly\/Phase.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "arb", "tail" : ": Arbitrary[Phase]", "member" : "net.alasc.symdpoly.Phase.arb", "link" : "net\/alasc\/symdpoly\/Phase$.html#arb:org.scalacheck.Arbitrary[net.alasc.symdpoly.Phase]", "kind" : "implicit val"}, {"label" : "nonZero", "tail" : "(): Predicate[Phase]", "member" : "net.alasc.symdpoly.Phase.nonZero", "link" : "net\/alasc\/symdpoly\/Phase$.html#nonZero:org.typelevel.discipline.Predicate[net.alasc.symdpoly.Phase]", "kind" : "implicit def"}, {"label" : "gen", "tail" : "(): Gen[Phase]", "member" : "net.alasc.symdpoly.Phase.gen", "link" : "net\/alasc\/symdpoly\/Phase$.html#gen:org.scalacheck.Gen[net.alasc.symdpoly.Phase]", "kind" : "def"}, {"label" : "involution", "tail" : "(): Involution[Phase]", "member" : "net.alasc.symdpoly.Phase.involution", "link" : "net\/alasc\/symdpoly\/Phase$.html#involution:spire.algebra.Involution[net.alasc.symdpoly.Phase]", "kind" : "implicit def"}, {"label" : "multiplicativeAbGroup", "tail" : "(): MultiplicativeAbGroup[Phase]", "member" : "net.alasc.symdpoly.Phase.multiplicativeAbGroup", "link" : "net\/alasc\/symdpoly\/Phase$.html#multiplicativeAbGroup:spire.algebra.MultiplicativeAbGroup[net.alasc.symdpoly.Phase]", "kind" : "implicit def"}, {"label" : "equ", "tail" : "(): Eq[Phase]", "member" : "net.alasc.symdpoly.Phase.equ", "link" : "net\/alasc\/symdpoly\/Phase$.html#equ:spire.algebra.Eq[net.alasc.symdpoly.Phase]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(k: Int, n: Int): Phase", "member" : "net.alasc.symdpoly.Phase.apply", "link" : "net\/alasc\/symdpoly\/Phase$.html#apply(k:Int,n:Int):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "fromEncoding", "tail" : "(encoding: Int): Phase", "member" : "net.alasc.symdpoly.Phase.fromEncoding", "link" : "net\/alasc\/symdpoly\/Phase$.html#fromEncoding(encoding:Int):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "encode", "tail" : "(k: Int, n: Int): Int", "member" : "net.alasc.symdpoly.Phase.encode", "link" : "net\/alasc\/symdpoly\/Phase$.html#encode(k:Int,n:Int):Int", "kind" : "def"}, {"label" : "apply", "tail" : "(n: Int): Phase", "member" : "net.alasc.symdpoly.Phase.apply", "link" : "net\/alasc\/symdpoly\/Phase$.html#apply(n:Int):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "minusI", "tail" : ": Phase", "member" : "net.alasc.symdpoly.Phase.minusI", "link" : "net\/alasc\/symdpoly\/Phase$.html#minusI:net.alasc.symdpoly.Phase", "kind" : "val"}, {"label" : "minusOne", "tail" : ": Phase", "member" : "net.alasc.symdpoly.Phase.minusOne", "link" : "net\/alasc\/symdpoly\/Phase$.html#minusOne:net.alasc.symdpoly.Phase", "kind" : "val"}, {"label" : "i", "tail" : ": Phase", "member" : "net.alasc.symdpoly.Phase.i", "link" : "net\/alasc\/symdpoly\/Phase$.html#i:net.alasc.symdpoly.Phase", "kind" : "val"}, {"label" : "one", "tail" : ": Phase", "member" : "net.alasc.symdpoly.Phase.one", "link" : "net\/alasc\/symdpoly\/Phase$.html#one:net.alasc.symdpoly.Phase", "kind" : "val"}, {"label" : "unapply", "tail" : "(e: Phase): Phase", "member" : "net.alasc.symdpoly.Phase.unapply", "link" : "net\/alasc\/symdpoly\/Phase$.html#unapply(e:net.alasc.symdpoly.Phase):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Phase$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Phase$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Phase$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Phase$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Phase$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Phase$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Phase$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Phase$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Phase$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Phase$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Phase$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Phase$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/Phase$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Phase$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Phase$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Phase$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Phase$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Phase$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Phase$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/Phase.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.PhaseInstances", "shortDescription" : "", "members_class" : [{"label" : "eqv", "tail" : "(x: Phase, y: Phase): Boolean", "member" : "net.alasc.symdpoly.PhaseInstances.eqv", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#eqv(x:net.alasc.symdpoly.Phase,y:net.alasc.symdpoly.Phase):Boolean", "kind" : "def"}, {"label" : "adjoint", "tail" : "(x: Phase): Phase", "member" : "net.alasc.symdpoly.PhaseInstances.adjoint", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#adjoint(x:net.alasc.symdpoly.Phase):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "times", "tail" : "(x: Phase, y: Phase): Phase", "member" : "net.alasc.symdpoly.PhaseInstances.times", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#times(x:net.alasc.symdpoly.Phase,y:net.alasc.symdpoly.Phase):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "one", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.PhaseInstances.one", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#one:net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(x: Phase): Phase", "member" : "net.alasc.symdpoly.PhaseInstances.reciprocal", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#reciprocal(x:net.alasc.symdpoly.Phase):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "div", "tail" : "(x: Phase, y: Phase): Phase", "member" : "net.alasc.symdpoly.PhaseInstances.div", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#div(x:net.alasc.symdpoly.Phase,y:net.alasc.symdpoly.Phase):net.alasc.symdpoly.Phase", "kind" : "def"}, {"member" : "net.alasc.symdpoly.PhaseInstances#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): CommutativeGroup[Phase]", "member" : "algebra.ring.MultiplicativeCommutativeGroup.multiplicative", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#multiplicative:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "pow", "tail" : "(a: Phase, n: Int): Phase", "member" : "algebra.ring.MultiplicativeGroup.pow", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Phase]): Option[Phase]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Phase]): Phase", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: Phase)(ev: Eq[Phase]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Phase, n: Int): Phase", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: Phase, y: Phase): Boolean", "member" : "cats.kernel.Eq.neqv", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#neqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/PhaseInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/PhaseInstances.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.Poly", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/Poly$.html", "members_class" : [{"label" : "-", "tail" : "(rhs: A)(ev: ToPoly[A, M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.-", "link" : "net\/alasc\/symdpoly\/Poly.html#-[A](rhs:A)(implicitev:net.alasc.symdpoly.ToPoly[A,M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: A)(ev: ToPoly[A, M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.+", "link" : "net\/alasc\/symdpoly\/Poly.html#+[A](rhs:A)(implicitev:net.alasc.symdpoly.ToPoly[A,M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Int): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.-", "link" : "net\/alasc\/symdpoly\/Poly.html#-(rhs:Int):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Rational): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.-", "link" : "net\/alasc\/symdpoly\/Poly.html#-(rhs:spire.math.Rational):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Cyclo): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.-", "link" : "net\/alasc\/symdpoly\/Poly.html#-(rhs:cyclo.Cyclo):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Int): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.+", "link" : "net\/alasc\/symdpoly\/Poly.html#+(rhs:Int):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Rational): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.+", "link" : "net\/alasc\/symdpoly\/Poly.html#+(rhs:spire.math.Rational):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Cyclo): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.+", "link" : "net\/alasc\/symdpoly\/Poly.html#+(rhs:cyclo.Cyclo):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.-", "link" : "net\/alasc\/symdpoly\/Poly.html#-(rhs:net.alasc.symdpoly.Poly[M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.+", "link" : "net\/alasc\/symdpoly\/Poly.html#+(rhs:net.alasc.symdpoly.Poly[M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: F.PhasedOp)(ev: =:=[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.-", "link" : "net\/alasc\/symdpoly\/Poly.html#-(rhs:F#PhasedOp)(implicitev:M=:=F):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: F.PhasedOp)(ev: =:=[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.+", "link" : "net\/alasc\/symdpoly\/Poly.html#+(rhs:F#PhasedOp)(implicitev:M=:=F):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: F.Op)(ev: =:=[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.-", "link" : "net\/alasc\/symdpoly\/Poly.html#-(rhs:F#Op)(implicitev:M=:=F):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: F.Op)(ev: =:=[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.+", "link" : "net\/alasc\/symdpoly\/Poly.html#+(rhs:F#Op)(implicitev:M=:=F):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "*:", "tail" : "(realLhs: Cyclo): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.*:", "link" : "net\/alasc\/symdpoly\/Poly.html#*:(realLhs:cyclo.Cyclo):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Int): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.\/", "link" : "net\/alasc\/symdpoly\/Poly.html#\/(rhs:Int):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Rational): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.\/", "link" : "net\/alasc\/symdpoly\/Poly.html#\/(rhs:spire.math.Rational):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Cyclo): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.\/", "link" : "net\/alasc\/symdpoly\/Poly.html#\/(rhs:cyclo.Cyclo):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Int): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.*", "link" : "net\/alasc\/symdpoly\/Poly.html#*(rhs:Int):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Rational): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.*", "link" : "net\/alasc\/symdpoly\/Poly.html#*(rhs:spire.math.Rational):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Cyclo): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.*", "link" : "net\/alasc\/symdpoly\/Poly.html#*(rhs:cyclo.Cyclo):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Mono[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.*", "link" : "net\/alasc\/symdpoly\/Poly.html#*(rhs:net.alasc.symdpoly.Mono[M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.*", "link" : "net\/alasc\/symdpoly\/Poly.html#*(rhs:net.alasc.symdpoly.Poly[M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.unary_-", "link" : "net\/alasc\/symdpoly\/Poly.html#unary_-:net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "adjoint", "tail" : "(): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.adjoint", "link" : "net\/alasc\/symdpoly\/Poly.html#adjoint:net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.Poly.hashCode", "link" : "net\/alasc\/symdpoly\/Poly.html#hashCode():Int", "kind" : "def"}, {"label" : "hash", "tail" : ": Int", "member" : "net.alasc.symdpoly.Poly.hash", "link" : "net\/alasc\/symdpoly\/Poly.html#hash:Int", "kind" : "lazy val"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.Poly.equals", "link" : "net\/alasc\/symdpoly\/Poly.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.Poly.toString", "link" : "net\/alasc\/symdpoly\/Poly.html#toString():String", "kind" : "def"}, {"label" : "string", "tail" : "(leftBracket: String, rightBracket: String): String", "member" : "net.alasc.symdpoly.Poly.string", "link" : "net\/alasc\/symdpoly\/Poly.html#string(leftBracket:String,rightBracket:String):String", "kind" : "def"}, {"label" : "mutableCopy", "tail" : "(ev: =:=[M, F]): MutablePoly[F]", "member" : "net.alasc.symdpoly.Poly.mutableCopy", "link" : "net\/alasc\/symdpoly\/Poly.html#mutableCopy(implicitev:M=:=F):net.alasc.symdpoly.free.MutablePoly[F]", "kind" : "def"}, {"label" : "degree", "tail" : "(ev: =:=[M, F]): Int", "member" : "net.alasc.symdpoly.Poly.degree", "link" : "net\/alasc\/symdpoly\/Poly.html#degree(implicitev:M=:=F):Int", "kind" : "def"}, {"label" : "coeff", "tail" : "(mono: Mono[M, F]): Cyclo", "member" : "net.alasc.symdpoly.Poly.coeff", "link" : "net\/alasc\/symdpoly\/Poly.html#coeff(mono:net.alasc.symdpoly.Mono[M,F]):cyclo.Cyclo", "kind" : "def"}, {"label" : "coeff", "tail" : "(i: Int): Cyclo", "member" : "net.alasc.symdpoly.Poly.coeff", "link" : "net\/alasc\/symdpoly\/Poly.html#coeff(i:Int):cyclo.Cyclo", "kind" : "def"}, {"label" : "monomial", "tail" : "(i: Int): Mono[M, F]", "member" : "net.alasc.symdpoly.Poly.monomial", "link" : "net\/alasc\/symdpoly\/Poly.html#monomial(i:Int):net.alasc.symdpoly.Mono[M,F]", "kind" : "def"}, {"label" : "monomialNormalForm", "tail" : "(i: Int): MutableWord[F]", "member" : "net.alasc.symdpoly.Poly.monomialNormalForm", "link" : "net\/alasc\/symdpoly\/Poly.html#monomialNormalForm(i:Int):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "nTerms", "tail" : "(): Int", "member" : "net.alasc.symdpoly.Poly.nTerms", "link" : "net\/alasc\/symdpoly\/Poly.html#nTerms:Int", "kind" : "def"}, {"label" : "normalForm", "tail" : "(): Poly[F, F]", "member" : "net.alasc.symdpoly.Poly.normalForm", "link" : "net\/alasc\/symdpoly\/Poly.html#normalForm:net.alasc.symdpoly.Poly[F,F]", "kind" : "def"}, {"label" : "eqv", "tail" : "(rhs: Poly[M, F]): Boolean", "member" : "net.alasc.symdpoly.Poly.eqv", "link" : "net\/alasc\/symdpoly\/Poly.html#eqv(rhs:net.alasc.symdpoly.Poly[M,F]):Boolean", "kind" : "def"}, {"label" : "wF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.Poly.wF", "link" : "net\/alasc\/symdpoly\/Poly.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.Poly.F", "link" : "net\/alasc\/symdpoly\/Poly.html#F:F", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.Poly.M", "link" : "net\/alasc\/symdpoly\/Poly.html#M:M", "kind" : "def"}, {"member" : "net.alasc.symdpoly.Poly#<init>", "error" : "unsupported entity"}, {"label" : "wM", "tail" : ": Aux[M]", "member" : "net.alasc.symdpoly.Poly.wM", "link" : "net\/alasc\/symdpoly\/Poly.html#wM:shapeless.Witness.Aux[M]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Poly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Poly.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Poly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Poly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Poly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Poly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Poly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Poly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Poly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Poly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Poly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Poly.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Poly.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Poly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Poly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Poly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "genPermAction", "tail" : "(wM: Aux[M]): Action[Poly[M, F], GenPerm]", "member" : "net.alasc.symdpoly.Poly.genPermAction", "link" : "net\/alasc\/symdpoly\/Poly$.html#genPermAction[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Action[net.alasc.symdpoly.Poly[M,F],net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit def"}, {"label" : "equ", "tail" : "(wM: Aux[M]): Eq[Poly[M, F]]", "member" : "net.alasc.symdpoly.Poly.equ", "link" : "net\/alasc\/symdpoly\/Poly$.html#equ[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Eq[net.alasc.symdpoly.Poly[M,F]]", "kind" : "implicit def"}, {"label" : "involution", "tail" : "(wM: Aux[M]): Involution[Poly[M, F]]", "member" : "net.alasc.symdpoly.Poly.involution", "link" : "net\/alasc\/symdpoly\/Poly$.html#involution[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Involution[net.alasc.symdpoly.Poly[M,F]]", "kind" : "implicit def"}, {"label" : "associativeAlgebra", "tail" : "(wM: Aux[M]): FieldAssociativeAlgebra[Poly[M, F], Cyclo]", "member" : "net.alasc.symdpoly.Poly.associativeAlgebra", "link" : "net\/alasc\/symdpoly\/Poly$.html#associativeAlgebra[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.FieldAssociativeAlgebra[net.alasc.symdpoly.Poly[M,F],cyclo.Cyclo]", "kind" : "implicit def"}, {"label" : "predicate", "tail" : "(): Predicate[Poly[M, F]]", "member" : "net.alasc.symdpoly.Poly.predicate", "link" : "net\/alasc\/symdpoly\/Poly$.html#predicate[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]:org.typelevel.discipline.Predicate[net.alasc.symdpoly.Poly[M,F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(terms: (Mono[M, F], Cyclo)*)(wM: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.apply", "link" : "net\/alasc\/symdpoly\/Poly$.html#apply[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](terms:(net.alasc.symdpoly.Mono[M,F],cyclo.Cyclo)*)(implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "fromMono", "tail" : "(mono: Mono[M, F])(arg0: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.fromMono", "link" : "net\/alasc\/symdpoly\/Poly$.html#fromMono[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](mono:net.alasc.symdpoly.Mono[M,F])(implicitevidence$4:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Poly[M,F]", "kind" : "implicit def"}, {"label" : "single", "tail" : "(mono: Mono[M, F], coeff: Cyclo)(arg0: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.single", "link" : "net\/alasc\/symdpoly\/Poly$.html#single[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](mono:net.alasc.symdpoly.Mono[M,F],coeff:cyclo.Cyclo)(implicitevidence$3:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "constant", "tail" : "(cyclo: Cyclo)(wM: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.constant", "link" : "net\/alasc\/symdpoly\/Poly$.html#constant[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](cyclo:cyclo.Cyclo)(implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "one", "tail" : "(wM: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.one", "link" : "net\/alasc\/symdpoly\/Poly$.html#one[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "zero", "tail" : "(arg0: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.zero", "link" : "net\/alasc\/symdpoly\/Poly$.html#zero[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitevidence$2:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "fromA", "tail" : "(a: A)(arg0: Aux[M], ev: ToPoly[A, M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.Poly.fromA", "link" : "net\/alasc\/symdpoly\/Poly$.html#fromA[A,M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](a:A)(implicitevidence$1:shapeless.Witness.Aux[M],implicitev:net.alasc.symdpoly.ToPoly[A,M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Poly$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Poly$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Poly$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Poly$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Poly$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Poly$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Poly$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Poly$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Poly$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Poly$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Poly$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Poly$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/Poly$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Poly$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Poly$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Poly$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Poly$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Poly$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Poly$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/Poly.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.PolyGenPermAction", "shortDescription" : "", "members_class" : [{"label" : "actl", "tail" : "(g: GenPerm, p: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.PolyGenPermAction.actl", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#actl(g:net.alasc.symdpoly.math.GenPerm,p:net.alasc.symdpoly.Poly[M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "actr", "tail" : "(p: Poly[M, F], g: GenPerm): Poly[M, F]", "member" : "net.alasc.symdpoly.PolyGenPermAction.actr", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#actr(p:net.alasc.symdpoly.Poly[M,F],g:net.alasc.symdpoly.math.GenPerm):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "wF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.PolyGenPermAction.wF", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.PolyGenPermAction.M", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#M:M", "kind" : "def"}, {"member" : "net.alasc.symdpoly.PolyGenPermAction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/PolyGenPermAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/PolyGenPermAction.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.Relaxation", "shortDescription" : "", "members_case class" : [{"label" : "writeSymmetryGroupDescription", "tail" : "(fileName: String): Unit", "member" : "net.alasc.symdpoly.Relaxation.writeSymmetryGroupDescription", "link" : "net\/alasc\/symdpoly\/Relaxation.html#writeSymmetryGroupDescription(fileName:String):Unit", "kind" : "def"}, {"label" : "writeCanonicalMonomials", "tail" : "(fileName: String): Unit", "member" : "net.alasc.symdpoly.Relaxation.writeCanonicalMonomials", "link" : "net\/alasc\/symdpoly\/Relaxation.html#writeCanonicalMonomials(fileName:String):Unit", "kind" : "def"}, {"label" : "writeMomentMatrix", "tail" : "(fileName: String): Unit", "member" : "net.alasc.symdpoly.Relaxation.writeMomentMatrix", "link" : "net\/alasc\/symdpoly\/Relaxation.html#writeMomentMatrix(fileName:String):Unit", "kind" : "def"}, {"label" : "writePhaseMatrix", "tail" : "(fileName: String): Unit", "member" : "net.alasc.symdpoly.Relaxation.writePhaseMatrix", "link" : "net\/alasc\/symdpoly\/Relaxation.html#writePhaseMatrix(fileName:String):Unit", "kind" : "def"}, {"label" : "writeMomentIndexMatrix", "tail" : "(fileName: String): Unit", "member" : "net.alasc.symdpoly.Relaxation.writeMomentIndexMatrix", "link" : "net\/alasc\/symdpoly\/Relaxation.html#writeMomentIndexMatrix(fileName:String):Unit", "kind" : "def"}, {"label" : "sdpaInstance", "tail" : "(): SDPAInstance", "member" : "net.alasc.symdpoly.Relaxation.sdpaInstance", "link" : "net\/alasc\/symdpoly\/Relaxation.html#sdpaInstance:net.alasc.symdpoly.solvers.SDPAInstance", "kind" : "def"}, {"label" : "mosekInstance", "tail" : "(): MosekInstance", "member" : "net.alasc.symdpoly.Relaxation.mosekInstance", "link" : "net\/alasc\/symdpoly\/Relaxation.html#mosekInstance:net.alasc.symdpoly.solvers.MosekInstance", "kind" : "def"}, {"label" : "isObjectiveReal", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.Relaxation.isObjectiveReal", "link" : "net\/alasc\/symdpoly\/Relaxation.html#isObjectiveReal:Boolean", "kind" : "def"}, {"label" : "objectiveVector", "tail" : ": Vec[Cyclo]", "member" : "net.alasc.symdpoly.Relaxation.objectiveVector", "link" : "net\/alasc\/symdpoly\/Relaxation.html#objectiveVector:scalin.immutable.Vec[cyclo.Cyclo]", "kind" : "val"}, {"label" : "gramMatrix", "tail" : ": GramMatrix[M, F]", "member" : "net.alasc.symdpoly.Relaxation.gramMatrix", "link" : "net\/alasc\/symdpoly\/Relaxation.html#gramMatrix:net.alasc.symdpoly.GramMatrix[M,F]", "kind" : "val"}, {"label" : "objective", "tail" : ": EvaluatedPoly[E, M, symmetryGroup.type]", "member" : "net.alasc.symdpoly.Relaxation.objective", "link" : "net\/alasc\/symdpoly\/Relaxation.html#objective:net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,Relaxation.this.symmetryGroup.type]", "kind" : "val"}, {"member" : "net.alasc.symdpoly.Relaxation#<init>", "error" : "unsupported entity"}, {"label" : "symmetryGroup", "tail" : ": Grp[GenPerm]", "member" : "net.alasc.symdpoly.Relaxation.symmetryGroup", "link" : "net\/alasc\/symdpoly\/Relaxation.html#symmetryGroup:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "generatingSet", "tail" : ": GSet[M]", "member" : "net.alasc.symdpoly.Relaxation.generatingSet", "link" : "net\/alasc\/symdpoly\/Relaxation.html#generatingSet:net.alasc.symdpoly.GSet[M]", "kind" : "val"}, {"label" : "problem", "tail" : ": Maximization[E, M, F]", "member" : "net.alasc.symdpoly.Relaxation.problem", "link" : "net\/alasc\/symdpoly\/Relaxation.html#problem:net.alasc.symdpoly.Maximization[E,M,F]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Relaxation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Relaxation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Relaxation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Relaxation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Relaxation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Relaxation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Relaxation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Relaxation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Relaxation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Relaxation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Relaxation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Relaxation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Relaxation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Relaxation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Relaxation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Relaxation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/Relaxation.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.Reynolds", "shortDescription" : "Reynolds operator that averages the orbit of an element under the action of a group.", "object" : "net\/alasc\/symdpoly\/Reynolds$.html", "members_object" : [{"label" : "apply", "tail" : "(p: P, grp: Grp[G])(P: VectorSpace[P, R], G: Action[P, G]): P", "member" : "net.alasc.symdpoly.Reynolds.apply", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#apply[G,P,R](p:P,grp:net.alasc.finite.Grp[G])(implicitP:spire.algebra.VectorSpace[P,R],implicitG:spire.algebra.Action[P,G]):P", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Reynolds$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.Solution", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Solution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Solution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Solution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Solution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Solution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Solution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Solution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Solution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Solution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Solution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Solution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Solution.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/Solution.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Solution.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Solution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Solution.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Solution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Solution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Solution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/Solution.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.ToPoly", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/ToPoly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/ToPoly.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/ToPoly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/ToPoly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/ToPoly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/ToPoly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/ToPoly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ToPoly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ToPoly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ToPoly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/ToPoly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/ToPoly.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/ToPoly.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/ToPoly.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/ToPoly.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/ToPoly.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/ToPoly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/ToPoly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/ToPoly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): Poly[M, F]", "member" : "net.alasc.symdpoly.ToPoly.apply", "link" : "net\/alasc\/symdpoly\/ToPoly.html#apply(a:A):net.alasc.symdpoly.Poly[M,F]", "kind" : "abstract def"}], "shortDescription" : "Typeclass that provides a conversion of an instance of type A to a polynomial.", "trait" : "net\/alasc\/symdpoly\/ToPoly.html", "kind" : "trait"}], "net" : [], "net.alasc.symdpoly.free" : [{"name" : "net.alasc.symdpoly.free.Generator", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/free\/Generator$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.free.Generator.toString", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#toString():String", "kind" : "def"}, {"member" : "net.alasc.symdpoly.free.Generator#<init>", "error" : "unsupported entity"}, {"label" : "opAction", "tail" : ": GenPerm", "member" : "net.alasc.symdpoly.free.Generator.opAction", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#opAction:net.alasc.symdpoly.math.GenPerm", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "net.alasc.symdpoly.free.Generator.name", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/Generator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Generator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "prettyPrintGenPerm", "tail" : "(opAction: GenPerm, F: MonoidDef): String", "member" : "net.alasc.symdpoly.free.Generator.prettyPrintGenPerm", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#prettyPrintGenPerm(opAction:net.alasc.symdpoly.math.GenPerm,F:net.alasc.symdpoly.free.MonoidDef):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Generator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/free\/Generator.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.free.IndexMap", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/free\/IndexMap$.html", "members_class" : [{"label" : "size", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.IndexMap.size", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#size:Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.free.IndexMap#<init>", "error" : "unsupported entity"}, {"label" : "element", "tail" : ": Seq[A]", "member" : "net.alasc.symdpoly.free.IndexMap.element", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#element:Seq[A]", "kind" : "val"}, {"label" : "index", "tail" : ": Map[A, Int]", "member" : "net.alasc.symdpoly.free.IndexMap.index", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#index:Map[A,Int]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/IndexMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(elements: Seq[A]): IndexMap[A]", "member" : "net.alasc.symdpoly.free.IndexMap.apply", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#apply[A](elements:Seq[A]):net.alasc.symdpoly.free.IndexMap[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/IndexMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/free\/IndexMap.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.free.MonoidDef", "shortDescription" : "Base class for a generalized free monoid.", "object" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html", "members_class" : [{"label" : "generator", "tail" : "(f: (Op) ⇒ PhasedOp)(name: Name): Generator[Free]", "member" : "net.alasc.symdpoly.free.MonoidDef.generator", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#generator(f:MonoidDef.this.Op=>MonoidDef.this.PhasedOp)(implicitname:sourcecode.Name):net.alasc.symdpoly.free.Generator[MonoidDef.this.Free]", "kind" : "def"}, {"label" : "PhasedOp", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.PhasedOp", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#PhasedOp", "kind" : "object"}, {"label" : "PhasedOp", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.PhasedOp", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#PhasedOpextendsProductwithSerializable", "kind" : "case class"}, {"label" : "NonHermitian2Type", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.NonHermitian2Type", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#NonHermitian2TypeextendsMonoidDef.this.OpType", "kind" : "abstract class"}, {"label" : "Hermitian2Type", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.Hermitian2Type", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#Hermitian2TypeextendsMonoidDef.this.OpType", "kind" : "abstract class"}, {"label" : "NonHermitianType1", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.NonHermitianType1", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#NonHermitianType1extendsMonoidDef.this.OpType", "kind" : "abstract class"}, {"label" : "HermitianType1", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.HermitianType1", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#HermitianType1extendsMonoidDef.this.OpType", "kind" : "abstract class"}, {"label" : "OpType", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.OpType", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#OpTypeextendsAnyRef", "kind" : "trait"}, {"label" : "HermitianOp", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.HermitianOp", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#HermitianOpextendsMonoidDef.this.Op", "kind" : "abstract class"}, {"label" : "Op", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.Op", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#Op", "kind" : "object"}, {"label" : "Op", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.Op", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#OpextendsAnyRef", "kind" : "abstract class"}, {"label" : "indexFromOp", "tail" : "(o: Op): Int", "member" : "net.alasc.symdpoly.free.MonoidDef.indexFromOp", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#indexFromOp(o:MonoidDef.this.Op):Int", "kind" : "def"}, {"label" : "opFromIndex", "tail" : "(i: Int): Op", "member" : "net.alasc.symdpoly.free.MonoidDef.opFromIndex", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#opFromIndex(i:Int):MonoidDef.this.Op", "kind" : "def"}, {"label" : "indexAdjoint", "tail" : "(opIndex: Int): Int", "member" : "net.alasc.symdpoly.free.MonoidDef.indexAdjoint", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#indexAdjoint(opIndex:Int):Int", "kind" : "def"}, {"label" : "nOperators", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MonoidDef.nOperators", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#nOperators:Int", "kind" : "def"}, {"label" : "opIndexMap", "tail" : ": IndexMap[Op]", "member" : "net.alasc.symdpoly.free.MonoidDef.opIndexMap", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#opIndexMap:net.alasc.symdpoly.free.IndexMap[MonoidDef.this.Op]", "kind" : "lazy val"}, {"label" : "mutableWordOrder", "tail" : ": MutableWordOrder[Free]", "member" : "net.alasc.symdpoly.free.MonoidDef.mutableWordOrder", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#mutableWordOrder:net.alasc.symdpoly.free.MutableWordOrder[MonoidDef.this.Free]", "kind" : "val"}, {"label" : "inPlaceNormalForm", "tail" : "(word: MutableWord[Free], start: Int): Boolean", "member" : "net.alasc.symdpoly.free.MonoidDef.inPlaceNormalForm", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#inPlaceNormalForm(word:net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free],start:Int):Boolean", "kind" : "def"}, {"label" : "immutableMutableWordZero", "tail" : ": MutableWord[Free]", "member" : "net.alasc.symdpoly.free.MonoidDef.immutableMutableWordZero", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#immutableMutableWordZero:net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free]", "kind" : "val"}, {"label" : "immutableMutableWordMinusOne", "tail" : ": MutableWord[Free]", "member" : "net.alasc.symdpoly.free.MonoidDef.immutableMutableWordMinusOne", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#immutableMutableWordMinusOne:net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free]", "kind" : "val"}, {"label" : "immutableMutableWordOne", "tail" : ": MutableWord[Free]", "member" : "net.alasc.symdpoly.free.MonoidDef.immutableMutableWordOne", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#immutableMutableWordOne:net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free]", "kind" : "val"}, {"label" : "quotient", "tail" : "(poly: Poly[Free, Free]): Poly[Free, Free]", "member" : "net.alasc.symdpoly.free.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#quotient(poly:net.alasc.symdpoly.Poly[MonoidDef.this.Free,MonoidDef.this.Free]):net.alasc.symdpoly.Poly[MonoidDef.this.Free,MonoidDef.this.Free]", "kind" : "def"}, {"label" : "quotient", "tail" : "(word: Mono[Free, Free]): Monomial", "member" : "net.alasc.symdpoly.free.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#quotient(word:net.alasc.symdpoly.Mono[MonoidDef.this.Free,MonoidDef.this.Free]):MonoidDef.this.Monomial", "kind" : "def"}, {"label" : "Free", "tail" : "(): Free", "member" : "net.alasc.symdpoly.free.MonoidDef.Free", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#Free:MonoidDef.this.Free", "kind" : "def"}, {"label" : "Free", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.Free", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#Free=MonoidDef.this.type", "kind" : "type"}, {"member" : "net.alasc.symdpoly.free.MonoidDef#<init>", "error" : "unsupported entity"}, {"label" : "ambientGroup", "tail" : "(generators: Generator[Free]*): Grp[GenPerm]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.ambientGroup", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#ambientGroup(generators:net.alasc.symdpoly.free.Generator[FreeBasedMonoidDef.this.Free]*):net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "def"}, {"label" : "monoToPoly", "tail" : ": ToPoly[Mono[MonoidDef.this.type, Free], MonoidDef.this.type, Free]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoToPoly", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoToPoly:net.alasc.symdpoly.ToPoly[net.alasc.symdpoly.Mono[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free],FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free]", "kind" : "val"}, {"label" : "polyGenPermAction", "tail" : ": Action[Poly[MonoidDef.this.type, Free], GenPerm]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyGenPermAction", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#polyGenPermAction:spire.algebra.Action[net.alasc.symdpoly.Poly[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free],net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "polyEq", "tail" : "(): Eq[Polynomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyEq", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#polyEq:spire.algebra.Eq[FreeBasedMonoidDef.this.Polynomial]", "kind" : "def"}, {"label" : "polyInvolution", "tail" : "(): Involution[Polynomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyInvolution", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#polyInvolution:spire.algebra.Involution[FreeBasedMonoidDef.this.Polynomial]", "kind" : "def"}, {"label" : "polyAssociativeAlgebra", "tail" : "(): FieldAssociativeAlgebra[Polynomial, Cyclo]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyAssociativeAlgebra", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#polyAssociativeAlgebra:spire.algebra.FieldAssociativeAlgebra[FreeBasedMonoidDef.this.Polynomial,cyclo.Cyclo]", "kind" : "def"}, {"label" : "Polynomial", "tail" : "", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.Polynomial", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#Polynomial=net.alasc.symdpoly.Poly[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free]", "kind" : "type"}, {"label" : "one", "tail" : ": Monomial", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.one", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#one:FreeBasedMonoidDef.this.Monomial", "kind" : "val"}, {"label" : "zero", "tail" : ": Monomial", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.zero", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#zero:FreeBasedMonoidDef.this.Monomial", "kind" : "val"}, {"label" : "monoGenPermAction", "tail" : ": Action[Monomial, GenPerm]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoGenPermAction", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoGenPermAction:spire.algebra.Action[FreeBasedMonoidDef.this.Monomial,net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "monoPhased", "tail" : ": Phased[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoPhased", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoPhased:net.alasc.symdpoly.algebra.Phased[FreeBasedMonoidDef.this.Monomial]", "kind" : "val"}, {"label" : "monoOrder", "tail" : "(): Order[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoOrder", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoOrder:spire.algebra.Order[FreeBasedMonoidDef.this.Monomial]", "kind" : "def"}, {"label" : "monoInvolution", "tail" : "(): Involution[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoInvolution", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoInvolution:spire.algebra.Involution[FreeBasedMonoidDef.this.Monomial]", "kind" : "def"}, {"label" : "monoMultiplicativeMonoid", "tail" : "(): MultiplicativeBinoid[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoMultiplicativeMonoid", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoMultiplicativeMonoid:net.alasc.symdpoly.algebra.MultiplicativeBinoid[FreeBasedMonoidDef.this.Monomial]", "kind" : "def"}, {"label" : "quotient", "tail" : "(gset: GSet[Free]): GSet[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#quotient(gset:net.alasc.symdpoly.GSet[FreeBasedMonoidDef.this.Free]):net.alasc.symdpoly.GSet[FreeBasedMonoidDef.this.type]", "kind" : "def"}, {"label" : "Monomial", "tail" : "", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.Monomial", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#Monomial=net.alasc.symdpoly.Mono[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free]", "kind" : "type"}, {"label" : "witnessFree", "tail" : "(): Aux[Free]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.witnessFree", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#witnessFree:shapeless.Witness.Aux[FreeBasedMonoidDef.this.Free]", "kind" : "implicit def"}, {"label" : "trivialGroupWitness", "tail" : ": Aux[TrivialGroup]", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroupWitness", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#trivialGroupWitness:shapeless.Witness.Aux[MonoidDef.this.TrivialGroup]", "kind" : "implicit val"}, {"label" : "trivialGroup", "tail" : "(): TrivialGroup", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroup", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#trivialGroup:MonoidDef.this.TrivialGroup", "kind" : "def"}, {"label" : "trivialGroupInstance", "tail" : ": Grp[GenPerm]", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroupInstance", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#trivialGroupInstance:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "TrivialGroup", "tail" : "", "member" : "net.alasc.symdpoly.generic.MonoidDef.TrivialGroup", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#TrivialGroup=MonoidDef.this.trivialGroupInstance.type", "kind" : "type"}, {"label" : "impWitness", "tail" : "(): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.impWitness", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#impWitness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "implicit def"}, {"label" : "witness", "tail" : ": Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.witness", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#witness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "operators", "tail" : "(): Seq[OpType]", "member" : "net.alasc.symdpoly.free.MonoidDef.operators", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#operators:Seq[MonoidDef.this.OpType]", "kind" : "abstract def"}], "members_object" : [{"label" : "Aux", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.Aux", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#Aux[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton]=net.alasc.symdpoly.free.MonoidDef{typeFree=F}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/free\/MonoidDef.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.free.MutablePoly", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.free.MutablePoly.toString", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#toString():String", "kind" : "def"}, {"label" : "immutableCopy", "tail" : "(arg0: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.free.MutablePoly.immutableCopy", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#immutableCopy[M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton](implicitevidence$1:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MutablePoly.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#hashCode():Int", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.free.MutablePoly.isZero", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#isZero:Boolean", "kind" : "def"}, {"label" : "setToZero", "tail" : "(): MutablePoly[F]", "member" : "net.alasc.symdpoly.free.MutablePoly.setToZero", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#setToZero():net.alasc.symdpoly.free.MutablePoly[F]", "kind" : "def"}, {"label" : "add", "tail" : "(monomial: MutableWord[F], coeff: Cyclo): MutablePoly[F]", "member" : "net.alasc.symdpoly.free.MutablePoly.add", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#add(monomial:net.alasc.symdpoly.free.MutableWord[F],coeff:cyclo.Cyclo):net.alasc.symdpoly.free.MutablePoly[F]", "kind" : "def"}, {"label" : "update", "tail" : "(monomial: MutableWord[F], coeff: Cyclo): Unit", "member" : "net.alasc.symdpoly.free.MutablePoly.update", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#update(monomial:net.alasc.symdpoly.free.MutableWord[F],coeff:cyclo.Cyclo):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(monomial: MutableWord[F]): Cyclo", "member" : "net.alasc.symdpoly.free.MutablePoly.apply", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#apply(monomial:net.alasc.symdpoly.free.MutableWord[F]):cyclo.Cyclo", "kind" : "def"}, {"label" : "terms", "tail" : "(): HashMap[MutableWord[F], Cyclo]", "member" : "net.alasc.symdpoly.free.MutablePoly.terms", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#terms:metal.generic.HashMap[net.alasc.symdpoly.free.MutableWord[F],cyclo.Cyclo]", "kind" : "def"}, {"label" : "nTerms", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MutablePoly.nTerms", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#nTerms:Int", "kind" : "def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.free.MutablePoly.F", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#F:F", "kind" : "def"}, {"label" : "copy", "tail" : "(): MutablePoly[F]", "member" : "net.alasc.symdpoly.free.MutablePoly.copy", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#copy:net.alasc.symdpoly.free.MutablePoly[F]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.free.MutablePoly#<init>", "error" : "unsupported entity"}, {"label" : "wF", "tail" : ": Aux[F]", "member" : "net.alasc.symdpoly.free.MutablePoly.wF", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : "(reservedSize: Int)(arg0: Aux[F]): MutablePoly[F]", "member" : "net.alasc.symdpoly.free.MutablePoly.empty", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#empty[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](reservedSize:Int)(implicitevidence$2:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutablePoly[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/free\/MutablePoly.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.free.MutableWord", "shortDescription" : "A mutable word in a graded, pointed monoid.", "object" : "net\/alasc\/symdpoly\/free\/MutableWord$.html", "members_class" : [{"label" : "applyGenPermAction", "tail" : "(rhs: GenPerm): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.applyGenPermAction", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#applyGenPermAction(rhs:net.alasc.symdpoly.math.GenPerm):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "inPlaceAdjoint", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.inPlaceAdjoint", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#inPlaceAdjoint():net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "swap", "tail" : "(i: Int, j: Int): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.swap", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#swap(i:Int,j:Int):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "update", "tail" : "(i: Int, index: Int): Unit", "member" : "net.alasc.symdpoly.free.MutableWord.update", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#update(i:Int,index:Int):Unit", "kind" : "def"}, {"label" : "update", "tail" : "(i: Int, op: F.Op): Unit", "member" : "net.alasc.symdpoly.free.MutableWord.update", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#update(i:Int,op:F#Op):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int): F.Op", "member" : "net.alasc.symdpoly.free.MutableWord.apply", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#apply(i:Int):F#Op", "kind" : "def"}, {"label" : "*=", "tail" : "(rhs: MutableWord[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.*=", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#*=(rhs:net.alasc.symdpoly.free.MutableWord[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "*=", "tail" : "(rhs: F.Op): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.*=", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#*=(rhs:F#Op):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "*=", "tail" : "(rhs: Phase): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.*=", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#*=(rhs:net.alasc.symdpoly.Phase):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "multiplyBySignOf", "tail" : "(rhs: Int): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.multiplyBySignOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#multiplyBySignOf(rhs:Int):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "flipSign", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.flipSign", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#flipSign():net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "setToZero", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.setToZero", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#setToZero():net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "setPhase", "tail" : "(newPhase: Phase): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.setPhase", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#setPhase(newPhase:net.alasc.symdpoly.Phase):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "ensureLength", "tail" : "(newMaxLength: Int): Unit", "member" : "net.alasc.symdpoly.free.MutableWord.ensureLength", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#ensureLength(newMaxLength:Int):Unit", "kind" : "def"}, {"label" : "compareTo", "tail" : "(rhs: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.free.MutableWord.compareTo", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#compareTo(rhs:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "def"}, {"label" : "compareToIgnoringPhase", "tail" : "(rhs: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.free.MutableWord.compareToIgnoringPhase", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#compareToIgnoringPhase(rhs:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "def"}, {"label" : "isMinusOne", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.isMinusOne", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#isMinusOne:Boolean", "kind" : "def"}, {"label" : "isOne", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.isOne", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#isOne:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.isEmpty", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.isZero", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#isZero:Boolean", "kind" : "def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.free.MutableWord.F", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#F:F", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MutableWord.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#hashCode():Int", "kind" : "def"}, {"label" : "immutableHash", "tail" : ": Int", "member" : "net.alasc.symdpoly.free.MutableWord.immutableHash", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#immutableHash:Int", "kind" : "lazy val"}, {"label" : "computeHash", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MutableWord.computeHash", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#computeHash:Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.free.MutableWord.toString", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#toString():String", "kind" : "def"}, {"label" : "wordString", "tail" : "(): String", "member" : "net.alasc.symdpoly.free.MutableWord.wordString", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#wordString:String", "kind" : "def"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.equals", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "checkMutable", "tail" : "(): Unit", "member" : "net.alasc.symdpoly.free.MutableWord.checkMutable", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#checkMutable():Unit", "kind" : "def"}, {"label" : "setImmutable", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.setImmutable", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#setImmutable():net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "check", "tail" : "(): Unit", "member" : "net.alasc.symdpoly.free.MutableWord.check", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#check():Unit", "kind" : "def"}, {"label" : "immutableCopy", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.immutableCopy", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#immutableCopy:net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "mutableCopy", "tail" : "(newReservedLength: Int): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.mutableCopy", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#mutableCopy(newReservedLength:Int):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "mutableCopy", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.mutableCopy", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#mutableCopy():net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "setToContentOf", "tail" : "(rhs: MutableWord[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.setToContentOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#setToContentOf(rhs:net.alasc.symdpoly.free.MutableWord[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "reservedSize", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MutableWord.reservedSize", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#reservedSize:Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.free.MutableWord#<init>", "error" : "unsupported entity"}, {"label" : "wF", "tail" : ": Aux[F]", "member" : "net.alasc.symdpoly.free.MutableWord.wF", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit val"}, {"label" : "mutable", "tail" : ": Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.mutable", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#mutable:Boolean", "kind" : "var"}, {"label" : "indices", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.free.MutableWord.indices", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#indices:Array[Int]", "kind" : "var"}, {"label" : "length", "tail" : ": Int", "member" : "net.alasc.symdpoly.free.MutableWord.length", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#length:Int", "kind" : "var"}, {"label" : "phase", "tail" : ": Phase", "member" : "net.alasc.symdpoly.free.MutableWord.phase", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#phase:net.alasc.symdpoly.Phase", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "order", "tail" : "(wM: Aux[F]): Order[MutableWord[F]]", "member" : "net.alasc.symdpoly.free.MutableWord.order", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#order[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](implicitwM:shapeless.Witness.Aux[F]):spire.algebra.Order[net.alasc.symdpoly.free.MutableWord[F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(phase: Phase)(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.apply", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#apply[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](phase:net.alasc.symdpoly.Phase)(implicitevidence$6:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, ops: Seq[MutableWord.apply.F.Op])(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.apply", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#apply[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](phase:net.alasc.symdpoly.Phase,ops:Seq[F#Op])(implicitevidence$5:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(ops: Seq[MutableWord.apply.F.Op])(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.apply", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#apply[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](ops:Seq[F#Op])(implicitevidence$4:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "zero", "tail" : "(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.zero", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#zero[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](implicitevidence$3:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "empty", "tail" : "(reservedLength: Int)(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.empty", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#empty[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](reservedLength:Int)(implicitevidence$2:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "one", "tail" : "(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.one", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#one[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](implicitevidence$1:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/free\/MutableWord.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.free.MutableWordOrder", "shortDescription" : "", "members_class" : [{"label" : "compare", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.free.MutableWordOrder.compare", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#compare(x:net.alasc.symdpoly.free.MutableWord[F],y:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.free.MutableWordOrder#<init>", "error" : "unsupported entity"}, {"label" : "toOrdering", "tail" : "(): Ordering[MutableWord[F]]", "member" : "cats.kernel.Order.toOrdering", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#toOrdering:Ordering[A]", "kind" : "def"}, {"label" : "gt", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Boolean", "member" : "cats.kernel.Order.gt", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#gt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "gteqv", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Boolean", "member" : "cats.kernel.Order.gteqv", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#gteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Boolean", "member" : "cats.kernel.Order.lt", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#lt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lteqv", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Boolean", "member" : "cats.kernel.Order.lteqv", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#lteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Boolean", "member" : "cats.kernel.Order.neqv", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#neqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Boolean", "member" : "cats.kernel.Order.eqv", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#eqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "max", "tail" : "(x: MutableWord[F], y: MutableWord[F]): MutableWord[F]", "member" : "cats.kernel.Order.max", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#max(x:A,y:A):A", "kind" : "def"}, {"label" : "min", "tail" : "(x: MutableWord[F], y: MutableWord[F]): MutableWord[F]", "member" : "cats.kernel.Order.min", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#min(x:A,y:A):A", "kind" : "def"}, {"label" : "partialCompare", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Double", "member" : "cats.kernel.Order.partialCompare", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#partialCompare(x:A,y:A):Double", "kind" : "def"}, {"label" : "comparison", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Comparison", "member" : "cats.kernel.Order.comparison", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#comparison(x:A,y:A):cats.kernel.Comparison", "kind" : "def"}, {"label" : "pmax", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Option[MutableWord[F]]", "member" : "cats.kernel.PartialOrder.pmax", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#pmax(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "pmin", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Option[MutableWord[F]]", "member" : "cats.kernel.PartialOrder.pmin", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#pmin(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Option[Int]", "member" : "cats.kernel.PartialOrder.tryCompare", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#tryCompare(x:A,y:A):Option[Int]", "kind" : "def"}, {"label" : "partialComparison", "tail" : "(x: MutableWord[F], y: MutableWord[F]): Option[Comparison]", "member" : "cats.kernel.PartialOrder.partialComparison", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#partialComparison(x:A,y:A):Option[cats.kernel.Comparison]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/free\/MutableWordOrder.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.free.Word", "shortDescription" : "A nonzero word with phase one.", "object" : "net\/alasc\/symdpoly\/free\/Word$.html", "members_object" : [{"label" : "one", "tail" : "(arg0: Aux[M]): Word[M]", "member" : "net.alasc.symdpoly.free.Word.one", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#one[M<:net.alasc.symdpoly.free.MonoidDef.Aux[M]withSingleton](implicitevidence$1:shapeless.Witness.Aux[M]):net.alasc.symdpoly.free.Word[M]", "kind" : "def"}, {"label" : "gen", "tail" : "(wM: Aux[M]): Gen[Word[M]]", "member" : "net.alasc.symdpoly.free.Word.gen", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#gen[M<:net.alasc.symdpoly.free.MonoidDef.Aux[M]withSingleton](implicitwM:shapeless.Witness.Aux[M]):org.scalacheck.Gen[net.alasc.symdpoly.free.Word[M]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/Word$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Word$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toMono", "tail" : "(): Mono[F, F]", "member" : "net.alasc.symdpoly.free.Word.toMono", "link" : "net\/alasc\/symdpoly\/free\/Word.html#toMono:net.alasc.symdpoly.Mono[F,F]", "kind" : "def"}, {"label" : "toMutableGradedWord", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.Word.toMutableGradedWord", "link" : "net\/alasc\/symdpoly\/free\/Word.html#toMutableGradedWord:net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.free.Word.toString", "link" : "net\/alasc\/symdpoly\/free\/Word.html#toString():String", "kind" : "def"}, {"label" : "M", "tail" : "(): F", "member" : "net.alasc.symdpoly.free.Word.M", "link" : "net\/alasc\/symdpoly\/free\/Word.html#M:F", "kind" : "def"}, {"label" : "wF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.free.Word.wF", "link" : "net\/alasc\/symdpoly\/free\/Word.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "isOne", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.free.Word.isOne", "link" : "net\/alasc\/symdpoly\/free\/Word.html#isOne:Boolean", "kind" : "def"}, {"member" : "net.alasc.symdpoly.free.Word#<init>", "error" : "unsupported entity"}, {"label" : "data", "tail" : ": MutableWord[F]", "member" : "net.alasc.symdpoly.free.Word.data", "link" : "net\/alasc\/symdpoly\/free\/Word.html#data:net.alasc.symdpoly.free.MutableWord[F]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/Word.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/Word.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/Word.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/Word.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/Word.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/Word.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/Word.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Word.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Word.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Word.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/Word.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/Word.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/Word.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/Word.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Word.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Word.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/free\/Word.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.free.WordTypeclasses", "shortDescription" : "", "members_class" : [{"label" : "times", "tail" : "(x: Word[M], y: Word[M]): Word[M]", "member" : "net.alasc.symdpoly.free.WordTypeclasses.times", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#times(x:net.alasc.symdpoly.free.Word[M],y:net.alasc.symdpoly.free.Word[M]):net.alasc.symdpoly.free.Word[M]", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Word[M], y: Word[M]): Int", "member" : "net.alasc.symdpoly.free.WordTypeclasses.compare", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#compare(x:net.alasc.symdpoly.free.Word[M],y:net.alasc.symdpoly.free.Word[M]):Int", "kind" : "def"}, {"label" : "one", "tail" : "(): Word[M]", "member" : "net.alasc.symdpoly.free.WordTypeclasses.one", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#one:net.alasc.symdpoly.free.Word[M]", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.free.WordTypeclasses.M", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#M:M", "kind" : "def"}, {"member" : "net.alasc.symdpoly.free.WordTypeclasses#<init>", "error" : "unsupported entity"}, {"label" : "wM", "tail" : ": Aux[M]", "member" : "net.alasc.symdpoly.free.WordTypeclasses.wM", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#wM:shapeless.Witness.Aux[M]", "kind" : "implicit val"}, {"label" : "toOrdering", "tail" : "(): Ordering[Word[M]]", "member" : "cats.kernel.Order.toOrdering", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#toOrdering:Ordering[A]", "kind" : "def"}, {"label" : "gt", "tail" : "(x: Word[M], y: Word[M]): Boolean", "member" : "cats.kernel.Order.gt", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#gt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "gteqv", "tail" : "(x: Word[M], y: Word[M]): Boolean", "member" : "cats.kernel.Order.gteqv", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#gteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: Word[M], y: Word[M]): Boolean", "member" : "cats.kernel.Order.lt", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#lt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lteqv", "tail" : "(x: Word[M], y: Word[M]): Boolean", "member" : "cats.kernel.Order.lteqv", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#lteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: Word[M], y: Word[M]): Boolean", "member" : "cats.kernel.Order.neqv", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#neqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: Word[M], y: Word[M]): Boolean", "member" : "cats.kernel.Order.eqv", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#eqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "max", "tail" : "(x: Word[M], y: Word[M]): Word[M]", "member" : "cats.kernel.Order.max", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#max(x:A,y:A):A", "kind" : "def"}, {"label" : "min", "tail" : "(x: Word[M], y: Word[M]): Word[M]", "member" : "cats.kernel.Order.min", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#min(x:A,y:A):A", "kind" : "def"}, {"label" : "partialCompare", "tail" : "(x: Word[M], y: Word[M]): Double", "member" : "cats.kernel.Order.partialCompare", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#partialCompare(x:A,y:A):Double", "kind" : "def"}, {"label" : "comparison", "tail" : "(x: Word[M], y: Word[M]): Comparison", "member" : "cats.kernel.Order.comparison", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#comparison(x:A,y:A):cats.kernel.Comparison", "kind" : "def"}, {"label" : "pmax", "tail" : "(x: Word[M], y: Word[M]): Option[Word[M]]", "member" : "cats.kernel.PartialOrder.pmax", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#pmax(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "pmin", "tail" : "(x: Word[M], y: Word[M]): Option[Word[M]]", "member" : "cats.kernel.PartialOrder.pmin", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#pmin(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: Word[M], y: Word[M]): Option[Int]", "member" : "cats.kernel.PartialOrder.tryCompare", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#tryCompare(x:A,y:A):Option[Int]", "kind" : "def"}, {"label" : "partialComparison", "tail" : "(x: Word[M], y: Word[M]): Option[Comparison]", "member" : "cats.kernel.PartialOrder.partialComparison", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#partialComparison(x:A,y:A):Option[cats.kernel.Comparison]", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Word[M]]): Option[Word[M]]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Word[M]]): Word[M]", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: Word[M], n: Int): Word[M]", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: Word[M])(ev: Eq[Word[M]]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Monoid[Word[M]]", "member" : "algebra.ring.MultiplicativeMonoid.multiplicative", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#multiplicative:algebra.Monoid[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Word[M], n: Int): Word[M]", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/free\/WordTypeclasses.html", "kind" : "class"}], "net.alasc.symdpoly.joptimizer" : [{"name" : "net.alasc.symdpoly.joptimizer.JOptimizerInstance", "shortDescription" : "", "members_class" : [{"label" : "solve", "tail" : "(tol: Double): Solution", "member" : "net.alasc.symdpoly.joptimizer.JOptimizerInstance.solve", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#solve(tol:Double):net.alasc.symdpoly.Solution", "kind" : "def"}, {"label" : "cfix", "tail" : ": Double", "member" : "net.alasc.symdpoly.joptimizer.JOptimizerInstance.cfix", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#cfix:Double", "kind" : "lazy val"}, {"label" : "G", "tail" : ": Array[Array[Double]]", "member" : "net.alasc.symdpoly.joptimizer.JOptimizerInstance.G", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#G:Array[Array[Double]]", "kind" : "lazy val"}, {"label" : "b", "tail" : ": Array[Double]", "member" : "net.alasc.symdpoly.joptimizer.JOptimizerInstance.b", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#b:Array[Double]", "kind" : "lazy val"}, {"label" : "A", "tail" : ": Vector[Array[Array[Double]]]", "member" : "net.alasc.symdpoly.joptimizer.JOptimizerInstance.A", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#A:scala.collection.immutable.Vector[Array[Array[Double]]]", "kind" : "lazy val"}, {"label" : "Amatrix", "tail" : "(i: Int): Array[Array[Double]]", "member" : "net.alasc.symdpoly.joptimizer.JOptimizerInstance.Amatrix", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#Amatrix(i:Int):Array[Array[Double]]", "kind" : "def"}, {"label" : "Gmatrix", "tail" : "(): Array[Array[Double]]", "member" : "net.alasc.symdpoly.joptimizer.JOptimizerInstance.Gmatrix", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#Gmatrix:Array[Array[Double]]", "kind" : "def"}, {"label" : "nDualVariables", "tail" : ": Int", "member" : "net.alasc.symdpoly.joptimizer.JOptimizerInstance.nDualVariables", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#nDualVariables:Int", "kind" : "val"}, {"member" : "net.alasc.symdpoly.joptimizer.JOptimizerInstance#<init>", "error" : "unsupported entity"}, {"label" : "relaxation", "tail" : ": Relaxation[_, _, _]", "member" : "net.alasc.symdpoly.joptimizer.JOptimizerInstance.relaxation", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#relaxation:net.alasc.symdpoly.Relaxation[_,_,_]", "kind" : "val"}, {"label" : "cycloToDouble", "tail" : "(cyclo: Cyclo): Double", "member" : "net.alasc.symdpoly.solvers.Instance.cycloToDouble", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#cycloToDouble(cyclo:cyclo.Cyclo):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/joptimizer\/JOptimizerInstance.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.joptimizer.JOptimizerRelaxation", "shortDescription" : "", "members_class" : [{"label" : "jOptimizerInstance", "tail" : "(): JOptimizerInstance", "member" : "net.alasc.symdpoly.joptimizer.JOptimizerRelaxation.jOptimizerInstance", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#jOptimizerInstance:net.alasc.symdpoly.joptimizer.JOptimizerInstance", "kind" : "def"}, {"member" : "net.alasc.symdpoly.joptimizer.JOptimizerRelaxation#<init>", "error" : "unsupported entity"}, {"label" : "relaxation", "tail" : ": Relaxation[_, _, _]", "member" : "net.alasc.symdpoly.joptimizer.JOptimizerRelaxation.relaxation", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#relaxation:net.alasc.symdpoly.Relaxation[_,_,_]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/joptimizer\/package$$JOptimizerRelaxation.html", "kind" : "class"}], "net.alasc.symdpoly.evaluation" : [{"name" : "net.alasc.symdpoly.evaluation.Equivalence", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "upperBound", "tail" : "(degree: Int): Int", "member" : "net.alasc.symdpoly.evaluation.Equivalence.upperBound", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#upperBound(degree:Int):Int", "kind" : "abstract def"}, {"label" : "inPlace", "tail" : "(mono: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.evaluation.Equivalence.inPlace", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#inPlace(mono:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "abstract def"}], "shortDescription" : "A transformation that generates equivalent monomials under evaluation by the linear functional.", "object" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html", "members_object" : [{"label" : "TransposeEquivalence", "tail" : "", "member" : "net.alasc.symdpoly.evaluation.Equivalence.TransposeEquivalence", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#TransposeEquivalence[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton]extendsPredicateEquivalence[F]", "kind" : "class"}, {"label" : "CyclicEquivalence", "tail" : "", "member" : "net.alasc.symdpoly.evaluation.Equivalence.CyclicEquivalence", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#CyclicEquivalence[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton]extendsPredicateEquivalence[F]", "kind" : "class"}, {"label" : "transpose", "tail" : "(predicate: OpPredicate[F])(arg0: Aux[F]): Equivalence[F]", "member" : "net.alasc.symdpoly.evaluation.Equivalence.transpose", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#transpose[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](predicate:net.alasc.symdpoly.evaluation.OpPredicate[F])(implicitevidence$3:shapeless.Witness.Aux[F]):net.alasc.symdpoly.evaluation.Equivalence[F]", "kind" : "def"}, {"label" : "cyclic", "tail" : "(predicate: OpPredicate[F])(arg0: Aux[F]): Equivalence[F]", "member" : "net.alasc.symdpoly.evaluation.Equivalence.cyclic", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#cyclic[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](predicate:net.alasc.symdpoly.evaluation.OpPredicate[F])(implicitevidence$2:shapeless.Witness.Aux[F]):net.alasc.symdpoly.evaluation.Equivalence[F]", "kind" : "def"}, {"label" : "fullAdjoint", "tail" : "(arg0: Aux[F]): Equivalence[F]", "member" : "net.alasc.symdpoly.evaluation.Equivalence.fullAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#fullAdjoint[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](implicitevidence$1:shapeless.Witness.Aux[F]):net.alasc.symdpoly.evaluation.Equivalence[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.evaluation.EvaluatedMono", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html", "members_class" : [{"label" : "*", "tail" : "(phase: Phase): EvaluatedMono[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMono.*", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#*(phase:net.alasc.symdpoly.Phase):net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]", "kind" : "def"}, {"label" : "phaseCanonical", "tail" : "(): EvaluatedMono[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMono.phaseCanonical", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#phaseCanonical:net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]", "kind" : "def"}, {"label" : "phaseOffset", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMono.phaseOffset", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#phaseOffset:net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMono.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMono.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#hashCode():Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMono.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#toString():String", "kind" : "def"}, {"label" : "E", "tail" : "(): E", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMono.E", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#E:E", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.EvaluatedMono#<init>", "error" : "unsupported entity"}, {"label" : "normalForm", "tail" : ": M.Monomial", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMono.normalForm", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#normalForm:M#Monomial", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "genPermAction", "tail" : "(arg0: Aux[E], arg1: Aux[M], arg2: Aux[G]): Action[EvaluatedMono[E, M, G], GenPerm]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMono.genPermAction", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#genPermAction[E<:net.alasc.symdpoly.evaluation.FreeBasedEvaluator[M,F]withSingleton,M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton,G<:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]withSingleton](implicitevidence$7:shapeless.Witness.Aux[E],implicitevidence$8:shapeless.Witness.Aux[M],implicitevidence$9:shapeless.Witness.Aux[G]):spire.algebra.Action[net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G],net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit def"}, {"label" : "phased", "tail" : "(arg0: Aux[E], arg1: Aux[M]): Phased[EvaluatedMono[E, M, G]]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMono.phased", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#phased[E<:net.alasc.symdpoly.evaluation.FreeBasedEvaluator[M,F]withSingleton,M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton,G<:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]withSingleton](implicitevidence$5:shapeless.Witness.Aux[E],implicitevidence$6:shapeless.Witness.Aux[M]):net.alasc.symdpoly.algebra.Phased[net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]]", "kind" : "implicit def"}, {"label" : "order", "tail" : "(arg0: Aux[E]): Order[EvaluatedMono[E, M, G]]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMono.order", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#order[E<:net.alasc.symdpoly.evaluation.Evaluator[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton,G<:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]withSingleton](implicitevidence$4:shapeless.Witness.Aux[E]):spire.algebra.Order[net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMono.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.EvaluatedMonoGenPermAction", "shortDescription" : "", "members_class" : [{"label" : "actr", "tail" : "(m: EvaluatedMono[E, M, G], g: GenPerm): EvaluatedMono[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMonoGenPermAction.actr", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#actr(m:net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G],g:net.alasc.symdpoly.math.GenPerm):net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]", "kind" : "def"}, {"label" : "actl", "tail" : "(g: GenPerm, m: EvaluatedMono[E, M, G]): EvaluatedMono[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMonoGenPermAction.actl", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#actl(g:net.alasc.symdpoly.math.GenPerm,m:net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]):net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.EvaluatedMonoGenPermAction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoGenPermAction.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.EvaluatedMonoPhased", "shortDescription" : "", "members_class" : [{"label" : "gtimesr", "tail" : "(p: EvaluatedMono[E, M, G], g: Phase): EvaluatedMono[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMonoPhased.gtimesr", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#gtimesr(p:net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G],g:net.alasc.symdpoly.Phase):net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]", "kind" : "def"}, {"label" : "gtimesl", "tail" : "(g: Phase, p: EvaluatedMono[E, M, G]): EvaluatedMono[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMonoPhased.gtimesl", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#gtimesl(g:net.alasc.symdpoly.Phase,p:net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]):net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]", "kind" : "def"}, {"label" : "phaseCanonical", "tail" : "(a: EvaluatedMono[E, M, G]): EvaluatedMono[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMonoPhased.phaseCanonical", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#phaseCanonical(a:net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]):net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]", "kind" : "def"}, {"label" : "phaseOffset", "tail" : "(a: EvaluatedMono[E, M, G]): Phase", "member" : "net.alasc.symdpoly.evaluation.EvaluatedMonoPhased.phaseOffset", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#phaseOffset(a:net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,G]):net.alasc.symdpoly.Phase", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.EvaluatedMonoPhased#<init>", "error" : "unsupported entity"}, {"label" : "multiplicative", "tail" : "(): Action[EvaluatedMono[E, M, G], Phase]", "member" : "spire.algebra.MultiplicativeAction.multiplicative", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#multiplicative:spire.algebra.Action[P,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedMonoPhased.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.EvaluatedPoly", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html", "members_class" : [{"label" : "vecOverOrderedSet", "tail" : "(orderedSet: OrderedSet[M.Monomial])(V: VecEngine[Cyclo]): Vec[Cyclo]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly.vecOverOrderedSet", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#vecOverOrderedSet(orderedSet:net.alasc.symdpoly.OrderedSet[M#Monomial])(implicitV:scalin.immutable.VecEngine[cyclo.Cyclo]):scalin.immutable.Vec[cyclo.Cyclo]", "kind" : "def"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#hashCode():Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#toString():String", "kind" : "def"}, {"label" : "G", "tail" : "(): G", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly.G", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#G:G", "kind" : "def"}, {"label" : "E", "tail" : "(): E", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly.E", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#E:E", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly#<init>", "error" : "unsupported entity"}, {"label" : "normalForm", "tail" : ": M.Polynomial", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly.normalForm", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#normalForm:M#Polynomial", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "genPermAction", "tail" : "(arg0: Aux[E], arg1: Aux[M], arg2: Aux[F], arg3: Aux[G]): Action[EvaluatedPoly[E, M, G], GenPerm]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly.genPermAction", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#genPermAction[E<:net.alasc.symdpoly.evaluation.FreeBasedEvaluator[M,F]withSingleton,M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton,G<:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]withSingleton](implicitevidence$11:shapeless.Witness.Aux[E],implicitevidence$12:shapeless.Witness.Aux[M],implicitevidence$13:shapeless.Witness.Aux[F],implicitevidence$14:shapeless.Witness.Aux[G]):spire.algebra.Action[net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G],net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit def"}, {"label" : "vectorSpace", "tail" : "(arg0: Aux[E], arg1: Aux[M], arg2: Aux[G]): VectorSpace[EvaluatedPoly[E, M, G], Cyclo]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly.vectorSpace", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#vectorSpace[E<:net.alasc.symdpoly.evaluation.Evaluator[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton,G<:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]withSingleton](implicitevidence$8:shapeless.Witness.Aux[E],implicitevidence$9:shapeless.Witness.Aux[M],implicitevidence$10:shapeless.Witness.Aux[G]):spire.algebra.VectorSpace[net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G],cyclo.Cyclo]", "kind" : "implicit def"}, {"label" : "equ", "tail" : "(arg0: Aux[E]): Eq[EvaluatedPoly[E, M, G]]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly.equ", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#equ[E<:net.alasc.symdpoly.evaluation.Evaluator[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton,G<:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]withSingleton](implicitevidence$7:shapeless.Witness.Aux[E]):spire.algebra.Eq[net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G]]", "kind" : "implicit def"}, {"label" : "EvaluatedPolyTrivialGroup", "tail" : "", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPoly.EvaluatedPolyTrivialGroup", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#EvaluatedPolyTrivialGroup[E<:net.alasc.symdpoly.evaluation.FreeBasedEvaluator[M,F]withSingleton,M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPoly.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.EvaluatedPolyGenPermAction", "shortDescription" : "", "members_class" : [{"label" : "actr", "tail" : "(p: EvaluatedPoly[E, M, G], g: GenPerm): EvaluatedPoly[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPolyGenPermAction.actr", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#actr(p:net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G],g:net.alasc.symdpoly.math.GenPerm):net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G]", "kind" : "def"}, {"label" : "actl", "tail" : "(g: GenPerm, p: EvaluatedPoly[E, M, G]): EvaluatedPoly[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPolyGenPermAction.actl", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#actl(g:net.alasc.symdpoly.math.GenPerm,p:net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G]):net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G]", "kind" : "def"}, {"label" : "E", "tail" : "(): E", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPolyGenPermAction.E", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#E:E", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.EvaluatedPolyGenPermAction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyGenPermAction.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.EvaluatedPolyVectorSpace", "shortDescription" : "", "members_class" : [{"label" : "plus", "tail" : "(x: EvaluatedPoly[E, M, G], y: EvaluatedPoly[E, M, G]): EvaluatedPoly[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPolyVectorSpace.plus", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#plus(x:net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G],y:net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G]):net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G]", "kind" : "def"}, {"label" : "zero", "tail" : "(): EvaluatedPoly[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPolyVectorSpace.zero", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#zero:net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G]", "kind" : "def"}, {"label" : "negate", "tail" : "(x: EvaluatedPoly[E, M, G]): EvaluatedPoly[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPolyVectorSpace.negate", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#negate(x:net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G]):net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G]", "kind" : "def"}, {"label" : "timesl", "tail" : "(r: Cyclo, v: EvaluatedPoly[E, M, G]): EvaluatedPoly[E, M, G]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPolyVectorSpace.timesl", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#timesl(r:cyclo.Cyclo,v:net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G]):net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,G]", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPolyVectorSpace.M", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#M:M", "kind" : "def"}, {"label" : "scalar", "tail" : "(): Field[Cyclo]", "member" : "net.alasc.symdpoly.evaluation.EvaluatedPolyVectorSpace.scalar", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#scalar:spire.algebra.Field[cyclo.Cyclo]", "kind" : "implicit def"}, {"member" : "net.alasc.symdpoly.evaluation.EvaluatedPolyVectorSpace#<init>", "error" : "unsupported entity"}, {"label" : "divr", "tail" : "(v: EvaluatedPoly[E, M, G], f: Cyclo): EvaluatedPoly[E, M, G]", "member" : "spire.algebra.VectorSpace.divr", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#divr(v:V,f:F):V", "kind" : "def"}, {"label" : "timesr", "tail" : "(v: EvaluatedPoly[E, M, G], r: Cyclo): EvaluatedPoly[E, M, G]", "member" : "spire.algebra.CModule.timesr", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#timesr(v:V,r:R):V", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[EvaluatedPoly[E, M, G]]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: EvaluatedPoly[E, M, G], n: Int): EvaluatedPoly[E, M, G]", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: EvaluatedPoly[E, M, G], y: EvaluatedPoly[E, M, G]): EvaluatedPoly[E, M, G]", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[EvaluatedPoly[E, M, G]]): Option[EvaluatedPoly[E, M, G]]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[EvaluatedPoly[E, M, G]]): EvaluatedPoly[E, M, G]", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: EvaluatedPoly[E, M, G])(ev: Eq[EvaluatedPoly[E, M, G]]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: EvaluatedPoly[E, M, G], n: Int): EvaluatedPoly[E, M, G]", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/EvaluatedPolyVectorSpace.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.Evaluator", "members_trait" : [{"label" : "apply", "tail" : "(poly: M.Polynomial, group: Grp[GenPerm])(d: DummyImplicit): EvaluatedPoly[Evaluator.this.type, M, group.type]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#apply(poly:M#Polynomial,group:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm])(implicitd:DummyImplicit):net.alasc.symdpoly.evaluation.EvaluatedPoly[Evaluator.this.type,M,group.type]", "kind" : "def"}, {"label" : "apply", "tail" : "(poly: M.Polynomial, pad: ScratchPad)(d: DummyImplicit): EvaluatedPoly[Evaluator.this.type, M, M.TrivialGroup]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#apply(poly:M#Polynomial,pad:Evaluator.this.ScratchPad)(implicitd:DummyImplicit):net.alasc.symdpoly.evaluation.EvaluatedPoly[Evaluator.this.type,M,M#TrivialGroup]", "kind" : "def"}, {"label" : "apply", "tail" : "(poly: M.Polynomial)(d: DummyImplicit): EvaluatedPoly[Evaluator.this.type, M, M.TrivialGroup]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#apply(poly:M#Polynomial)(implicitd:DummyImplicit):net.alasc.symdpoly.evaluation.EvaluatedPoly[Evaluator.this.type,M,M#TrivialGroup]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: M.Monomial, group: Grp[GenPerm]): EvaluatedMono[Evaluator.this.type, M, group.type]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#apply(mono:M#Monomial,group:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]):net.alasc.symdpoly.evaluation.EvaluatedMono[Evaluator.this.type,M,group.type]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: M.Monomial, pad: ScratchPad): EvaluatedMono[Evaluator.this.type, M, M.TrivialGroup]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#apply(mono:M#Monomial,pad:Evaluator.this.ScratchPad):net.alasc.symdpoly.evaluation.EvaluatedMono[Evaluator.this.type,M,M#TrivialGroup]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: M.Monomial): EvaluatedMono[Evaluator.this.type, M, M.TrivialGroup]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#apply(mono:M#Monomial):net.alasc.symdpoly.evaluation.EvaluatedMono[Evaluator.this.type,M,M#TrivialGroup]", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Evaluator.M", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#M:M", "kind" : "def"}, {"label" : "wE", "tail" : ": Aux[Evaluator.this.type]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.wE", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#wE:shapeless.Witness.Aux[Evaluator.this.type]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(poly: M.Polynomial, group: Grp[GenPerm], pad: ScratchPad)(d: DummyImplicit): EvaluatedPoly[Evaluator.this.type, M, group.type]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#apply(poly:M#Polynomial,group:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm],pad:Evaluator.this.ScratchPad)(implicitd:DummyImplicit):net.alasc.symdpoly.evaluation.EvaluatedPoly[Evaluator.this.type,M,group.type]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(mono: M.Monomial, group: Grp[GenPerm], pad: ScratchPad): EvaluatedMono[Evaluator.this.type, M, group.type]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#apply(mono:M#Monomial,group:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm],pad:Evaluator.this.ScratchPad):net.alasc.symdpoly.evaluation.EvaluatedMono[Evaluator.this.type,M,group.type]", "kind" : "abstract def"}, {"label" : "makeScratchPad", "tail" : "(): ScratchPad", "member" : "net.alasc.symdpoly.evaluation.Evaluator.makeScratchPad", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#makeScratchPad:Evaluator.this.ScratchPad", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.evaluation.Evaluator.ScratchPad", "error" : "unsupported entity"}, {"label" : "evaluatedMonoOrder", "tail" : "(): Order[EvaluatedMono[Evaluator.this.type, M, G]]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedMonoOrder", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#evaluatedMonoOrder[G<:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]withSingleton]:spire.algebra.Order[net.alasc.symdpoly.evaluation.EvaluatedMono[Evaluator.this.type,M,G]]", "kind" : "abstract def"}, {"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.Evaluator.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#isSelfAdjoint:Boolean", "kind" : "abstract def"}, {"label" : "wM", "tail" : "(): Aux[M]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.wM", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#wM:shapeless.Witness.Aux[M]", "kind" : "implicit abstract def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html", "members_class" : [{"label" : "evaluatedMonoPhased", "tail" : "(): Phased[EvaluatedMono[FreeBasedEvaluator.this.type, M, G]]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.evaluatedMonoPhased", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#evaluatedMonoPhased[G<:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]withSingleton]:net.alasc.symdpoly.algebra.Phased[net.alasc.symdpoly.evaluation.EvaluatedMono[FreeBasedEvaluator.this.type,M,G]]", "kind" : "def"}, {"label" : "evaluatedMonoOrder", "tail" : "(): Order[EvaluatedMono[FreeBasedEvaluator.this.type, M, G]]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.evaluatedMonoOrder", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#evaluatedMonoOrder[G<:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]withSingleton]:spire.algebra.Order[net.alasc.symdpoly.evaluation.EvaluatedMono[FreeBasedEvaluator.this.type,M,G]]", "kind" : "def"}, {"label" : "apply", "tail" : "(poly: Poly[M, F], group: Grp[GenPerm], pad: FreeScratchPad[F])(d: DummyImplicit): EvaluatedPoly[FreeBasedEvaluator.this.type, M, group.type]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#apply(poly:net.alasc.symdpoly.Poly[M,F],group:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm],pad:net.alasc.symdpoly.evaluation.FreeBasedEvaluator.FreeScratchPad[F])(implicitd:DummyImplicit):net.alasc.symdpoly.evaluation.EvaluatedPoly[FreeBasedEvaluator.this.type,M,group.type]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: Mono[M, F], group: Grp[GenPerm], pad: FreeScratchPad[F]): EvaluatedMono[FreeBasedEvaluator.this.type, M, group.type]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#apply(mono:net.alasc.symdpoly.Mono[M,F],group:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm],pad:net.alasc.symdpoly.evaluation.FreeBasedEvaluator.FreeScratchPad[F]):net.alasc.symdpoly.evaluation.EvaluatedMono[FreeBasedEvaluator.this.type,M,group.type]", "kind" : "def"}, {"label" : "reduceInScratchPad", "tail" : "(mono: MutableWord[F], groupElements: Array[GenPerm], pad: ScratchPad): Unit", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.reduceInScratchPad", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#reduceInScratchPad(mono:net.alasc.symdpoly.free.MutableWord[F],groupElements:Array[net.alasc.symdpoly.math.GenPerm],pad:FreeBasedEvaluator.this.ScratchPad):Unit", "kind" : "def"}, {"label" : "makeScratchPad", "tail" : "(): FreeScratchPad[F]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.makeScratchPad", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#makeScratchPad:net.alasc.symdpoly.evaluation.FreeBasedEvaluator.FreeScratchPad[F]", "kind" : "def"}, {"label" : "ScratchPad", "tail" : "", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.ScratchPad", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#ScratchPad=net.alasc.symdpoly.evaluation.FreeBasedEvaluator.FreeScratchPad[F]", "kind" : "type"}, {"label" : "wF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.wF", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator#<init>", "error" : "unsupported entity"}, {"label" : "wM", "tail" : ": Aux[M]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.wM", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#wM:shapeless.Witness.Aux[M]", "kind" : "implicit val"}, {"label" : "isSelfAdjoint", "tail" : ": Boolean", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#isSelfAdjoint:Boolean", "kind" : "val"}, {"label" : "equivalences", "tail" : ": Seq[Equivalence[F]]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.equivalences", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#equivalences:Seq[net.alasc.symdpoly.evaluation.Equivalence[F]]", "kind" : "val"}, {"label" : "apply", "tail" : "(poly: M.Polynomial, group: Grp[GenPerm])(d: DummyImplicit): EvaluatedPoly[FreeBasedEvaluator.this.type, M, group.type]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#apply(poly:M#Polynomial,group:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm])(implicitd:DummyImplicit):net.alasc.symdpoly.evaluation.EvaluatedPoly[Evaluator.this.type,M,group.type]", "kind" : "def"}, {"label" : "apply", "tail" : "(poly: M.Polynomial, pad: ScratchPad)(d: DummyImplicit): EvaluatedPoly[FreeBasedEvaluator.this.type, M, M.TrivialGroup]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#apply(poly:M#Polynomial,pad:Evaluator.this.ScratchPad)(implicitd:DummyImplicit):net.alasc.symdpoly.evaluation.EvaluatedPoly[Evaluator.this.type,M,M#TrivialGroup]", "kind" : "def"}, {"label" : "apply", "tail" : "(poly: M.Polynomial)(d: DummyImplicit): EvaluatedPoly[FreeBasedEvaluator.this.type, M, M.TrivialGroup]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#apply(poly:M#Polynomial)(implicitd:DummyImplicit):net.alasc.symdpoly.evaluation.EvaluatedPoly[Evaluator.this.type,M,M#TrivialGroup]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: M.Monomial, group: Grp[GenPerm]): EvaluatedMono[FreeBasedEvaluator.this.type, M, group.type]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#apply(mono:M#Monomial,group:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]):net.alasc.symdpoly.evaluation.EvaluatedMono[Evaluator.this.type,M,group.type]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: M.Monomial, pad: ScratchPad): EvaluatedMono[FreeBasedEvaluator.this.type, M, M.TrivialGroup]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#apply(mono:M#Monomial,pad:Evaluator.this.ScratchPad):net.alasc.symdpoly.evaluation.EvaluatedMono[Evaluator.this.type,M,M#TrivialGroup]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: M.Monomial): EvaluatedMono[FreeBasedEvaluator.this.type, M, M.TrivialGroup]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#apply(mono:M#Monomial):net.alasc.symdpoly.evaluation.EvaluatedMono[Evaluator.this.type,M,M#TrivialGroup]", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Evaluator.M", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#M:M", "kind" : "def"}, {"label" : "wE", "tail" : ": Aux[FreeBasedEvaluator.this.type]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.wE", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#wE:shapeless.Witness.Aux[Evaluator.this.type]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "FreeScratchPad", "tail" : "", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.FreeScratchPad", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#FreeScratchPad", "kind" : "object"}, {"label" : "FreeScratchPad", "tail" : "", "member" : "net.alasc.symdpoly.evaluation.FreeBasedEvaluator.FreeScratchPad", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#FreeScratchPad[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton]extendsAnyRef", "kind" : "class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedEvaluator.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.FullAdjointEquivalence", "shortDescription" : "", "members_class" : [{"label" : "upperBound", "tail" : "(degree: Int): Int", "member" : "net.alasc.symdpoly.evaluation.FullAdjointEquivalence.upperBound", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#upperBound(degree:Int):Int", "kind" : "def"}, {"label" : "inPlace", "tail" : "(mono: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.evaluation.FullAdjointEquivalence.inPlace", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#inPlace(mono:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.evaluation.FullAdjointEquivalence.F", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#F:F", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.FullAdjointEquivalence#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/FullAdjointEquivalence.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.OpPredicate", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(op: F.Op): Boolean", "member" : "net.alasc.symdpoly.evaluation.OpPredicate.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#apply(op:F#Op):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.evaluation.PredicateEquivalence", "shortDescription" : "", "members_class" : [{"label" : "predicateIndex", "tail" : ": BitSet", "member" : "net.alasc.symdpoly.evaluation.PredicateEquivalence.predicateIndex", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#predicateIndex:scala.collection.immutable.BitSet", "kind" : "val"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.evaluation.PredicateEquivalence.F", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#F:F", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.PredicateEquivalence#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "upperBound", "tail" : "(degree: Int): Int", "member" : "net.alasc.symdpoly.evaluation.Equivalence.upperBound", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#upperBound(degree:Int):Int", "kind" : "abstract def"}, {"label" : "inPlace", "tail" : "(mono: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.evaluation.Equivalence.inPlace", "link" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html#inPlace(mono:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "abstract def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/PredicateEquivalence.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.Symmetries", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html", "members_object" : [{"label" : "symmetrySubgroup", "tail" : "(poly1: EvaluatedPoly[E, M with Aux[F], Symmetries.symmetrySubgroup.M.TrivialGroup], ambientGroup: Grp[GenPerm])(arg0: Aux[E], arg1: Aux[M], arg2: Aux[F]): Grp[GenPerm]", "member" : "net.alasc.symdpoly.evaluation.Symmetries.symmetrySubgroup", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#symmetrySubgroup[E<:net.alasc.symdpoly.evaluation.FreeBasedEvaluator[M,F]withSingleton,M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](poly1:net.alasc.symdpoly.evaluation.EvaluatedPoly[E,Mwithnet.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F],M#TrivialGroup],ambientGroup:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm])(implicitevidence$6:shapeless.Witness.Aux[E],implicitevidence$7:shapeless.Witness.Aux[M],implicitevidence$8:shapeless.Witness.Aux[F]):net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "def"}, {"label" : "allEvaluatedMonomials", "tail" : "(poly: EvaluatedPoly[E, M, Symmetries.allEvaluatedMonomials.M.TrivialGroup], grp: Grp[GenPerm])(arg0: Aux[E], arg1: Aux[M], arg2: Aux[F]): OrderedSet[EvaluatedMono[E, M, Symmetries.allEvaluatedMonomials.M.TrivialGroup]]", "member" : "net.alasc.symdpoly.evaluation.Symmetries.allEvaluatedMonomials", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#allEvaluatedMonomials[E<:net.alasc.symdpoly.evaluation.FreeBasedEvaluator[M,F]withSingleton,M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](poly:net.alasc.symdpoly.evaluation.EvaluatedPoly[E,M,M#TrivialGroup],grp:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm])(implicitevidence$3:shapeless.Witness.Aux[E],implicitevidence$4:shapeless.Witness.Aux[M],implicitevidence$5:shapeless.Witness.Aux[F]):net.alasc.symdpoly.OrderedSet[net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,M#TrivialGroup]]", "kind" : "def"}, {"label" : "momentSetAction", "tail" : "(monomials: OrderedSet[EvaluatedMono[E, M, Symmetries.momentSetAction.M.TrivialGroup]], g: GenPerm)(arg0: Aux[E], arg1: Aux[M]): GenPerm", "member" : "net.alasc.symdpoly.evaluation.Symmetries.momentSetAction", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#momentSetAction[E<:net.alasc.symdpoly.evaluation.FreeBasedEvaluator[M,F]withSingleton,M<:net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](monomials:net.alasc.symdpoly.OrderedSet[net.alasc.symdpoly.evaluation.EvaluatedMono[E,M,M#TrivialGroup]],g:net.alasc.symdpoly.math.GenPerm)(implicitevidence$1:shapeless.Witness.Aux[E],implicitevidence$2:shapeless.Witness.Aux[M]):net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Symmetries$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "better" : [], "net.alasc.symdpoly.examples" : [{"name" : "net.alasc.symdpoly.examples.CHSH", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/examples\/CHSH$.html", "members_object" : [{"label" : "relaxation", "tail" : ": Relaxation[L.type, QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.CHSH.relaxation", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#relaxation:net.alasc.symdpoly.Relaxation[net.alasc.symdpoly.examples.CHSH.L.type,net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.CHSH.QM.Free]", "kind" : "val"}, {"label" : "problem", "tail" : ": Maximization[L.type, QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.CHSH.problem", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#problem:net.alasc.symdpoly.Maximization[net.alasc.symdpoly.examples.CHSH.L.type,net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.CHSH.QM.Free]", "kind" : "val"}, {"label" : "L", "tail" : ": FreeBasedEvaluator[QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.CHSH.L", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#L:net.alasc.symdpoly.evaluation.FreeBasedEvaluator[net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.CHSH.QM.Free]", "kind" : "val"}, {"label" : "generatingSet", "tail" : ": GSet[QM]", "member" : "net.alasc.symdpoly.examples.CHSH.generatingSet", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#generatingSet:net.alasc.symdpoly.GSet[net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type]", "kind" : "val"}, {"label" : "ambientGroup", "tail" : ": Grp[GenPerm]", "member" : "net.alasc.symdpoly.examples.CHSH.ambientGroup", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#ambientGroup:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "bellOperator", "tail" : ": Poly[QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.CHSH.bellOperator", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#bellOperator:net.alasc.symdpoly.Poly[net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.CHSH.QM.Free]", "kind" : "val"}, {"label" : "QM", "tail" : ": Aux[FM.type]", "member" : "net.alasc.symdpoly.examples.CHSH.QM", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#QM:net.alasc.symdpoly.quotient.MonoidDef.Aux[net.alasc.symdpoly.examples.CHSH.FM.type]", "kind" : "val"}, {"label" : "outputSwapA0", "tail" : ": Generator[CHSH.FM.Free]", "member" : "net.alasc.symdpoly.examples.CHSH.outputSwapA0", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#outputSwapA0:net.alasc.symdpoly.free.Generator[net.alasc.symdpoly.examples.CHSH.FM.Free]", "kind" : "val"}, {"label" : "inputSwapA", "tail" : ": Generator[CHSH.FM.Free]", "member" : "net.alasc.symdpoly.examples.CHSH.inputSwapA", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#inputSwapA:net.alasc.symdpoly.free.Generator[net.alasc.symdpoly.examples.CHSH.FM.Free]", "kind" : "val"}, {"label" : "swapParties", "tail" : ": Generator[CHSH.FM.Free]", "member" : "net.alasc.symdpoly.examples.CHSH.swapParties", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#swapParties:net.alasc.symdpoly.free.Generator[net.alasc.symdpoly.examples.CHSH.FM.Free]", "kind" : "val"}, {"label" : "FM", "tail" : "", "member" : "net.alasc.symdpoly.examples.CHSH.FM", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#FM", "kind" : "object"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/examples\/CHSH$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.examples.GuessYourNeighborInput", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html", "members_object" : [{"label" : "relaxation", "tail" : ": Relaxation[L.type, QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.GuessYourNeighborInput.relaxation", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#relaxation:net.alasc.symdpoly.Relaxation[net.alasc.symdpoly.examples.SliwaScenario.L.type,net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.SliwaScenario.QM.Free]", "kind" : "val"}, {"label" : "problem", "tail" : ": Maximization[L.type, QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.GuessYourNeighborInput.problem", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#problem:net.alasc.symdpoly.Maximization[net.alasc.symdpoly.examples.SliwaScenario.L.type,net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.SliwaScenario.QM.Free]", "kind" : "val"}, {"label" : "objective", "tail" : ": Poly[QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.GuessYourNeighborInput.objective", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#objective:net.alasc.symdpoly.Poly[net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.SliwaScenario.QM.Free]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/examples\/GuessYourNeighborInput$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.examples.I3322", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/examples\/I3322$.html", "members_object" : [{"label" : "relaxation", "tail" : ": Relaxation[L.type, QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.I3322.relaxation", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#relaxation:net.alasc.symdpoly.Relaxation[net.alasc.symdpoly.examples.I3322.L.type,net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.I3322.QM.Free]", "kind" : "val"}, {"label" : "problem", "tail" : ": Maximization[L.type, QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.I3322.problem", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#problem:net.alasc.symdpoly.Maximization[net.alasc.symdpoly.examples.I3322.L.type,net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.I3322.QM.Free]", "kind" : "val"}, {"label" : "bellOperator", "tail" : ": Poly[QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.I3322.bellOperator", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#bellOperator:net.alasc.symdpoly.Poly[net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.I3322.QM.Free]", "kind" : "val"}, {"label" : "L", "tail" : ": FreeBasedEvaluator[QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.I3322.L", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#L:net.alasc.symdpoly.evaluation.FreeBasedEvaluator[net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.I3322.QM.Free]", "kind" : "val"}, {"label" : "generatingSet", "tail" : ": GSet[QM]", "member" : "net.alasc.symdpoly.examples.I3322.generatingSet", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#generatingSet:net.alasc.symdpoly.GSet[net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type]", "kind" : "val"}, {"label" : "ambientGroup", "tail" : ": Grp[GenPerm]", "member" : "net.alasc.symdpoly.examples.I3322.ambientGroup", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#ambientGroup:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "QM", "tail" : ": Aux[FM.type]", "member" : "net.alasc.symdpoly.examples.I3322.QM", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#QM:net.alasc.symdpoly.quotient.MonoidDef.Aux[net.alasc.symdpoly.examples.I3322.FM.type]", "kind" : "val"}, {"label" : "outputA0", "tail" : ": Generator[I3322.FM.Free]", "member" : "net.alasc.symdpoly.examples.I3322.outputA0", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#outputA0:net.alasc.symdpoly.free.Generator[net.alasc.symdpoly.examples.I3322.FM.Free]", "kind" : "val"}, {"label" : "inputCyclicA", "tail" : ": Generator[I3322.FM.Free]", "member" : "net.alasc.symdpoly.examples.I3322.inputCyclicA", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#inputCyclicA:net.alasc.symdpoly.free.Generator[net.alasc.symdpoly.examples.I3322.FM.Free]", "kind" : "val"}, {"label" : "inputSwapA", "tail" : ": Generator[I3322.FM.Free]", "member" : "net.alasc.symdpoly.examples.I3322.inputSwapA", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#inputSwapA:net.alasc.symdpoly.free.Generator[net.alasc.symdpoly.examples.I3322.FM.Free]", "kind" : "val"}, {"label" : "swapParties", "tail" : ": Generator[I3322.FM.Free]", "member" : "net.alasc.symdpoly.examples.I3322.swapParties", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#swapParties:net.alasc.symdpoly.free.Generator[net.alasc.symdpoly.examples.I3322.FM.Free]", "kind" : "val"}, {"label" : "FM", "tail" : "", "member" : "net.alasc.symdpoly.examples.I3322.FM", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#FM", "kind" : "object"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/examples\/I3322$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.examples.Mermin3", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html", "members_object" : [{"label" : "relaxation", "tail" : ": Relaxation[L.type, QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.Mermin3.relaxation", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#relaxation:net.alasc.symdpoly.Relaxation[net.alasc.symdpoly.examples.SliwaScenario.L.type,net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.SliwaScenario.QM.Free]", "kind" : "val"}, {"label" : "problem", "tail" : ": Maximization[L.type, QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.Mermin3.problem", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#problem:net.alasc.symdpoly.Maximization[net.alasc.symdpoly.examples.SliwaScenario.L.type,net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.SliwaScenario.QM.Free]", "kind" : "val"}, {"label" : "objective", "tail" : ": Poly[QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.Mermin3.objective", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#objective:net.alasc.symdpoly.Poly[net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.SliwaScenario.QM.Free]", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/examples\/Mermin3$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.examples.SliwaScenario", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html", "members_object" : [{"label" : "L", "tail" : ": FreeBasedEvaluator[QM, (QM)#Free]", "member" : "net.alasc.symdpoly.examples.SliwaScenario.L", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#L:net.alasc.symdpoly.evaluation.FreeBasedEvaluator[net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type,net.alasc.symdpoly.examples.SliwaScenario.QM.Free]", "kind" : "val"}, {"label" : "localLevel", "tail" : "(l: Int): GSet[QM]", "member" : "net.alasc.symdpoly.examples.SliwaScenario.localLevel", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#localLevel(l:Int):net.alasc.symdpoly.GSet[net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type]", "kind" : "def"}, {"label" : "npaLevel", "tail" : "(l: Int): GSet[QM]", "member" : "net.alasc.symdpoly.examples.SliwaScenario.npaLevel", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#npaLevel(l:Int):net.alasc.symdpoly.GSet[net.alasc.symdpoly.quotient.MonoidDef.<refinement>.type]", "kind" : "def"}, {"label" : "p", "tail" : "(a: Int, b: Int, c: Int)(x: Int, y: Int, z: Int): SliwaScenario.FM.Polynomial", "member" : "net.alasc.symdpoly.examples.SliwaScenario.p", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#p(a:Int,b:Int,c:Int)(x:Int,y:Int,z:Int):net.alasc.symdpoly.examples.SliwaScenario.FM.Polynomial", "kind" : "def"}, {"label" : "minusOnePow", "tail" : "(i: Int): Int", "member" : "net.alasc.symdpoly.examples.SliwaScenario.minusOnePow", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#minusOnePow(i:Int):Int", "kind" : "def"}, {"label" : "select", "tail" : "(i: Int, j: Int, k: Int)(x: Int, y: Int, z: Int): SliwaScenario.FM.Polynomial", "member" : "net.alasc.symdpoly.examples.SliwaScenario.select", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#select(i:Int,j:Int,k:Int)(x:Int,y:Int,z:Int):net.alasc.symdpoly.examples.SliwaScenario.FM.Polynomial", "kind" : "def"}, {"label" : "ABC", "tail" : "(x: Int, y: Int, z: Int): SliwaScenario.FM.Monomial", "member" : "net.alasc.symdpoly.examples.SliwaScenario.ABC", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#ABC(x:Int,y:Int,z:Int):net.alasc.symdpoly.examples.SliwaScenario.FM.Monomial", "kind" : "def"}, {"label" : "AC", "tail" : "(x: Int, z: Int): SliwaScenario.FM.Monomial", "member" : "net.alasc.symdpoly.examples.SliwaScenario.AC", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#AC(x:Int,z:Int):net.alasc.symdpoly.examples.SliwaScenario.FM.Monomial", "kind" : "def"}, {"label" : "BC", "tail" : "(y: Int, z: Int): SliwaScenario.FM.Monomial", "member" : "net.alasc.symdpoly.examples.SliwaScenario.BC", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#BC(y:Int,z:Int):net.alasc.symdpoly.examples.SliwaScenario.FM.Monomial", "kind" : "def"}, {"label" : "AB", "tail" : "(x: Int, y: Int): SliwaScenario.FM.Monomial", "member" : "net.alasc.symdpoly.examples.SliwaScenario.AB", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#AB(x:Int,y:Int):net.alasc.symdpoly.examples.SliwaScenario.FM.Monomial", "kind" : "def"}, {"label" : "ambientGroup", "tail" : ": Grp[GenPerm]", "member" : "net.alasc.symdpoly.examples.SliwaScenario.ambientGroup", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#ambientGroup:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "oA0", "tail" : ": Generator[SliwaScenario.FM.Free]", "member" : "net.alasc.symdpoly.examples.SliwaScenario.oA0", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#oA0:net.alasc.symdpoly.free.Generator[net.alasc.symdpoly.examples.SliwaScenario.FM.Free]", "kind" : "val"}, {"label" : "iA", "tail" : ": Generator[SliwaScenario.FM.Free]", "member" : "net.alasc.symdpoly.examples.SliwaScenario.iA", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#iA:net.alasc.symdpoly.free.Generator[net.alasc.symdpoly.examples.SliwaScenario.FM.Free]", "kind" : "val"}, {"label" : "pC", "tail" : ": Generator[SliwaScenario.FM.Free]", "member" : "net.alasc.symdpoly.examples.SliwaScenario.pC", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#pC:net.alasc.symdpoly.free.Generator[net.alasc.symdpoly.examples.SliwaScenario.FM.Free]", "kind" : "val"}, {"label" : "pT", "tail" : ": Generator[SliwaScenario.FM.Free]", "member" : "net.alasc.symdpoly.examples.SliwaScenario.pT", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#pT:net.alasc.symdpoly.free.Generator[net.alasc.symdpoly.examples.SliwaScenario.FM.Free]", "kind" : "val"}, {"label" : "QM", "tail" : ": Aux[FM.type]", "member" : "net.alasc.symdpoly.examples.SliwaScenario.QM", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#QM:net.alasc.symdpoly.quotient.MonoidDef.Aux[net.alasc.symdpoly.examples.SliwaScenario.FM.type]", "kind" : "val"}, {"label" : "FM", "tail" : "", "member" : "net.alasc.symdpoly.examples.SliwaScenario.FM", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#FM", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/examples\/SliwaScenario$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "better.files" : [], "net.alasc.symdpoly.generic" : [{"name" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef", "shortDescription" : "Monoid whose elements are represented by normal forms in a free monoid.", "object" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html", "members_class" : [{"label" : "ambientGroup", "tail" : "(generators: Generator[Free]*): Grp[GenPerm]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.ambientGroup", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#ambientGroup(generators:net.alasc.symdpoly.free.Generator[FreeBasedMonoidDef.this.Free]*):net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "def"}, {"label" : "monoToPoly", "tail" : ": ToPoly[Mono[FreeBasedMonoidDef.this.type, Free], FreeBasedMonoidDef.this.type, Free]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoToPoly", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#monoToPoly:net.alasc.symdpoly.ToPoly[net.alasc.symdpoly.Mono[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free],FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free]", "kind" : "val"}, {"label" : "polyGenPermAction", "tail" : ": Action[Poly[FreeBasedMonoidDef.this.type, Free], GenPerm]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyGenPermAction", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#polyGenPermAction:spire.algebra.Action[net.alasc.symdpoly.Poly[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free],net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "polyEq", "tail" : "(): Eq[Polynomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyEq", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#polyEq:spire.algebra.Eq[FreeBasedMonoidDef.this.Polynomial]", "kind" : "def"}, {"label" : "polyInvolution", "tail" : "(): Involution[Polynomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyInvolution", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#polyInvolution:spire.algebra.Involution[FreeBasedMonoidDef.this.Polynomial]", "kind" : "def"}, {"label" : "polyAssociativeAlgebra", "tail" : "(): FieldAssociativeAlgebra[Polynomial, Cyclo]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.polyAssociativeAlgebra", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#polyAssociativeAlgebra:spire.algebra.FieldAssociativeAlgebra[FreeBasedMonoidDef.this.Polynomial,cyclo.Cyclo]", "kind" : "def"}, {"label" : "Polynomial", "tail" : "", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.Polynomial", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#Polynomial=net.alasc.symdpoly.Poly[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free]", "kind" : "type"}, {"label" : "one", "tail" : ": Monomial", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.one", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#one:FreeBasedMonoidDef.this.Monomial", "kind" : "val"}, {"label" : "zero", "tail" : ": Monomial", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.zero", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#zero:FreeBasedMonoidDef.this.Monomial", "kind" : "val"}, {"label" : "monoGenPermAction", "tail" : ": Action[Monomial, GenPerm]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoGenPermAction", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#monoGenPermAction:spire.algebra.Action[FreeBasedMonoidDef.this.Monomial,net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "monoPhased", "tail" : ": Phased[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoPhased", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#monoPhased:net.alasc.symdpoly.algebra.Phased[FreeBasedMonoidDef.this.Monomial]", "kind" : "val"}, {"label" : "monoOrder", "tail" : "(): Order[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoOrder", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#monoOrder:spire.algebra.Order[FreeBasedMonoidDef.this.Monomial]", "kind" : "def"}, {"label" : "monoInvolution", "tail" : "(): Involution[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoInvolution", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#monoInvolution:spire.algebra.Involution[FreeBasedMonoidDef.this.Monomial]", "kind" : "def"}, {"label" : "monoMultiplicativeMonoid", "tail" : "(): MultiplicativeBinoid[Monomial]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.monoMultiplicativeMonoid", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#monoMultiplicativeMonoid:net.alasc.symdpoly.algebra.MultiplicativeBinoid[FreeBasedMonoidDef.this.Monomial]", "kind" : "def"}, {"label" : "quotient", "tail" : "(gset: GSet[Free]): GSet[FreeBasedMonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#quotient(gset:net.alasc.symdpoly.GSet[FreeBasedMonoidDef.this.Free]):net.alasc.symdpoly.GSet[FreeBasedMonoidDef.this.type]", "kind" : "def"}, {"label" : "Monomial", "tail" : "", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.Monomial", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#Monomial=net.alasc.symdpoly.Mono[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free]", "kind" : "type"}, {"label" : "witnessFree", "tail" : "(): Aux[Free]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.witnessFree", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#witnessFree:shapeless.Witness.Aux[FreeBasedMonoidDef.this.Free]", "kind" : "implicit def"}, {"member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef#<init>", "error" : "unsupported entity"}, {"label" : "trivialGroupWitness", "tail" : ": Aux[TrivialGroup]", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroupWitness", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#trivialGroupWitness:shapeless.Witness.Aux[MonoidDef.this.TrivialGroup]", "kind" : "implicit val"}, {"label" : "trivialGroup", "tail" : "(): TrivialGroup", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroup", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#trivialGroup:MonoidDef.this.TrivialGroup", "kind" : "def"}, {"label" : "trivialGroupInstance", "tail" : ": Grp[GenPerm]", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroupInstance", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#trivialGroupInstance:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "TrivialGroup", "tail" : "", "member" : "net.alasc.symdpoly.generic.MonoidDef.TrivialGroup", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#TrivialGroup=MonoidDef.this.trivialGroupInstance.type", "kind" : "type"}, {"label" : "impWitness", "tail" : "(): Aux[FreeBasedMonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.impWitness", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#impWitness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "implicit def"}, {"label" : "witness", "tail" : ": Aux[FreeBasedMonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.witness", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#witness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inPlaceNormalForm", "tail" : "(word: MutableWord[Free], start: Int): Boolean", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.inPlaceNormalForm", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#inPlaceNormalForm(word:net.alasc.symdpoly.free.MutableWord[FreeBasedMonoidDef.this.Free],start:Int):Boolean", "kind" : "abstract def"}, {"label" : "quotient", "tail" : "(word: Mono[Free, Free]): Monomial", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#quotient(word:net.alasc.symdpoly.Mono[FreeBasedMonoidDef.this.Free,FreeBasedMonoidDef.this.Free]):FreeBasedMonoidDef.this.Monomial", "kind" : "abstract def"}, {"label" : "quotient", "tail" : "(poly: Poly[Free, Free]): Poly[FreeBasedMonoidDef.this.type, Free]", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#quotient(poly:net.alasc.symdpoly.Poly[FreeBasedMonoidDef.this.Free,FreeBasedMonoidDef.this.Free]):net.alasc.symdpoly.Poly[FreeBasedMonoidDef.this.type,FreeBasedMonoidDef.this.Free]", "kind" : "abstract def"}, {"label" : "Free", "tail" : "(): Free", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.Free", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html#Free:FreeBasedMonoidDef.this.Free", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.Free", "error" : "unsupported entity"}], "members_object" : [{"label" : "Aux", "tail" : "", "member" : "net.alasc.symdpoly.generic.FreeBasedMonoidDef.Aux", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#Aux[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton]=net.alasc.symdpoly.generic.FreeBasedMonoidDef{typeFree=F}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/generic\/FreeBasedMonoidDef.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.generic.MonoidDef", "shortDescription" : "", "members_class" : [{"label" : "trivialGroupWitness", "tail" : ": Aux[TrivialGroup]", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroupWitness", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#trivialGroupWitness:shapeless.Witness.Aux[MonoidDef.this.TrivialGroup]", "kind" : "implicit val"}, {"label" : "trivialGroup", "tail" : "(): TrivialGroup", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroup", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#trivialGroup:MonoidDef.this.TrivialGroup", "kind" : "def"}, {"label" : "trivialGroupInstance", "tail" : ": Grp[GenPerm]", "member" : "net.alasc.symdpoly.generic.MonoidDef.trivialGroupInstance", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#trivialGroupInstance:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "TrivialGroup", "tail" : "", "member" : "net.alasc.symdpoly.generic.MonoidDef.TrivialGroup", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#TrivialGroup=MonoidDef.this.trivialGroupInstance.type", "kind" : "type"}, {"label" : "impWitness", "tail" : "(): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.impWitness", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#impWitness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "implicit def"}, {"label" : "witness", "tail" : ": Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.witness", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#witness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "val"}, {"member" : "net.alasc.symdpoly.generic.MonoidDef#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "polyEq", "tail" : "(): Eq[Polynomial]", "member" : "net.alasc.symdpoly.generic.MonoidDef.polyEq", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#polyEq:spire.algebra.Eq[MonoidDef.this.Polynomial]", "kind" : "abstract def"}, {"label" : "polyInvolution", "tail" : "(): Involution[Polynomial]", "member" : "net.alasc.symdpoly.generic.MonoidDef.polyInvolution", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#polyInvolution:spire.algebra.Involution[MonoidDef.this.Polynomial]", "kind" : "abstract def"}, {"label" : "polyAssociativeAlgebra", "tail" : "(): FieldAssociativeAlgebra[Polynomial, Cyclo]", "member" : "net.alasc.symdpoly.generic.MonoidDef.polyAssociativeAlgebra", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#polyAssociativeAlgebra:spire.algebra.FieldAssociativeAlgebra[MonoidDef.this.Polynomial,cyclo.Cyclo]", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.generic.MonoidDef.Polynomial", "error" : "unsupported entity"}, {"label" : "monoPhased", "tail" : "(): Phased[Monomial]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoPhased", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#monoPhased:net.alasc.symdpoly.algebra.Phased[MonoidDef.this.Monomial]", "kind" : "abstract def"}, {"label" : "monoOrder", "tail" : "(): Order[Monomial]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoOrder", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#monoOrder:spire.algebra.Order[MonoidDef.this.Monomial]", "kind" : "abstract def"}, {"label" : "monoInvolution", "tail" : "(): Involution[Monomial]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoInvolution", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#monoInvolution:spire.algebra.Involution[MonoidDef.this.Monomial]", "kind" : "abstract def"}, {"label" : "monoMultiplicativeMonoid", "tail" : "(): MultiplicativeMonoid[Monomial]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoMultiplicativeMonoid", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#monoMultiplicativeMonoid:spire.algebra.MultiplicativeMonoid[MonoidDef.this.Monomial]", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): Monomial", "member" : "net.alasc.symdpoly.generic.MonoidDef.one", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#one:MonoidDef.this.Monomial", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): Monomial", "member" : "net.alasc.symdpoly.generic.MonoidDef.zero", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#zero:MonoidDef.this.Monomial", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.generic.MonoidDef.Monomial", "error" : "unsupported entity"}], "class" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.generic.PolyInstances", "shortDescription" : "", "members_class" : [{"label" : "timesl", "tail" : "(c: Cyclo, v: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.generic.PolyInstances.timesl", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#timesl(c:cyclo.Cyclo,v:net.alasc.symdpoly.Poly[M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "scalar", "tail" : "(): Field[Cyclo]", "member" : "net.alasc.symdpoly.generic.PolyInstances.scalar", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#scalar:spire.algebra.Field[cyclo.Cyclo]", "kind" : "implicit def"}, {"label" : "eqv", "tail" : "(x: Poly[M, F], y: Poly[M, F]): Boolean", "member" : "net.alasc.symdpoly.generic.PolyInstances.eqv", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#eqv(x:net.alasc.symdpoly.Poly[M,F],y:net.alasc.symdpoly.Poly[M,F]):Boolean", "kind" : "def"}, {"label" : "times", "tail" : "(x: Poly[M, F], y: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.generic.PolyInstances.times", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#times(x:net.alasc.symdpoly.Poly[M,F],y:net.alasc.symdpoly.Poly[M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "one", "tail" : "(): Poly[M, F]", "member" : "net.alasc.symdpoly.generic.PolyInstances.one", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#one:net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "plus", "tail" : "(x: Poly[M, F], y: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.generic.PolyInstances.plus", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#plus(x:net.alasc.symdpoly.Poly[M,F],y:net.alasc.symdpoly.Poly[M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "zero", "tail" : "(): Poly[M, F]", "member" : "net.alasc.symdpoly.generic.PolyInstances.zero", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#zero:net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "negate", "tail" : "(x: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.generic.PolyInstances.negate", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#negate(x:net.alasc.symdpoly.Poly[M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"label" : "adjoint", "tail" : "(a: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.generic.PolyInstances.adjoint", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#adjoint(a:net.alasc.symdpoly.Poly[M,F]):net.alasc.symdpoly.Poly[M,F]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.generic.PolyInstances#<init>", "error" : "unsupported entity"}, {"label" : "wM", "tail" : ": Aux[M]", "member" : "net.alasc.symdpoly.generic.PolyInstances.wM", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#wM:shapeless.Witness.Aux[M]", "kind" : "implicit val"}, {"label" : "neqv", "tail" : "(x: Poly[M, F], y: Poly[M, F]): Boolean", "member" : "cats.kernel.Eq.neqv", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#neqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "divr", "tail" : "(v: Poly[M, F], f: Cyclo): Poly[M, F]", "member" : "spire.algebra.VectorSpace.divr", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#divr(v:V,f:F):V", "kind" : "def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt): Poly[M, F]", "member" : "algebra.ring.Ring.fromBigInt", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#fromBigInt(n:BigInt):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): Poly[M, F]", "member" : "algebra.ring.Ring.fromInt", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#fromInt(n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Poly[M, F]]): Option[Poly[M, F]]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Poly[M, F]]): Poly[M, F]", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: Poly[M, F], n: Int): Poly[M, F]", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: Poly[M, F])(ev: Eq[Poly[M, F]]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Monoid[Poly[M, F]]", "member" : "algebra.ring.MultiplicativeMonoid.multiplicative", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#multiplicative:algebra.Monoid[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Poly[M, F], n: Int): Poly[M, F]", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "timesr", "tail" : "(v: Poly[M, F], r: Cyclo): Poly[M, F]", "member" : "spire.algebra.CModule.timesr", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#timesr(v:V,r:R):V", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[Poly[M, F]]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Poly[M, F], n: Int): Poly[M, F]", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: Poly[M, F], y: Poly[M, F]): Poly[M, F]", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Poly[M, F]]): Option[Poly[M, F]]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Poly[M, F]]): Poly[M, F]", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Poly[M, F])(ev: Eq[Poly[M, F]]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Poly[M, F], n: Int): Poly[M, F]", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/generic\/PolyInstances.html", "kind" : "class"}], "net.alasc.symdpoly.math" : [{"name" : "net.alasc.symdpoly.math.GenPerm", "shortDescription" : "A generalized permutation is an element of the generalized symmetric group, and combinesa permutation and a multiplication by a diagonal matrix whose entries are rational rootsof unity.", "object" : "net\/alasc\/symdpoly\/math\/GenPerm$.html", "members_object" : [{"label" : "commonRootOrder", "tail" : "(perms: Iterable[GenPerm]): Int", "member" : "net.alasc.symdpoly.math.GenPerm.commonRootOrder", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#commonRootOrder(perms:Iterable[net.alasc.symdpoly.math.GenPerm]):Int", "kind" : "def"}, {"label" : "generalizedSymmetricGroup", "tail" : "(m: Int, n: Int)(gg: GrpGroup[GenPerm]): Grp[GenPerm]", "member" : "net.alasc.symdpoly.math.GenPerm.generalizedSymmetricGroup", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#generalizedSymmetricGroup(m:Int,n:Int)(implicitgg:net.alasc.finite.GrpGroup[net.alasc.symdpoly.math.GenPerm]):net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "def"}, {"label" : "phasedIntAction", "tail" : ": Action[PhasedInt, GenPerm]", "member" : "net.alasc.symdpoly.math.GenPerm.phasedIntAction", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#phasedIntAction:spire.algebra.Action[net.alasc.symdpoly.math.PhasedInt,net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit val"}, {"label" : "equ", "tail" : "(): Eq[GenPerm]", "member" : "net.alasc.symdpoly.math.GenPerm.equ", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#equ:spire.algebra.Eq[net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit def"}, {"label" : "group", "tail" : "(): Group[GenPerm]", "member" : "net.alasc.symdpoly.math.GenPerm.group", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#group:spire.algebra.Group[net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit def"}, {"label" : "fpab", "tail" : ": FaithfulPermutationActionBuilder[GenPerm]", "member" : "net.alasc.symdpoly.math.GenPerm.fpab", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#fpab:net.alasc.finite.FaithfulPermutationActionBuilder[net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit val"}, {"label" : "id", "tail" : ": GenPerm", "member" : "net.alasc.symdpoly.math.GenPerm.id", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#id:net.alasc.symdpoly.math.GenPerm", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "truncate", "tail" : "(n: Int): GenPerm", "member" : "net.alasc.symdpoly.math.GenPerm.truncate", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#truncate(n:Int):net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "inverse", "tail" : "(): GenPerm", "member" : "net.alasc.symdpoly.math.GenPerm.inverse", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#inverse:net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "|+|", "tail" : "(rhs: GenPerm): GenPerm", "member" : "net.alasc.symdpoly.math.GenPerm.|+|", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#|+|(rhs:net.alasc.symdpoly.math.GenPerm):net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "largestMovedPoint", "tail" : "(): NNOption", "member" : "net.alasc.symdpoly.math.GenPerm.largestMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#largestMovedPoint:net.alasc.util.NNOption", "kind" : "def"}, {"label" : "invImage", "tail" : "(pi: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.GenPerm.invImage", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#invImage(pi:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "image", "tail" : "(pi: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.GenPerm.image", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#image(pi:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.GenPerm.hashCode", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.math.GenPerm.equals", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#equals(any:Any):Boolean", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.GenPerm#<init>", "error" : "unsupported entity"}, {"label" : "phases", "tail" : ": Phases", "member" : "net.alasc.symdpoly.math.GenPerm.phases", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#phases:net.alasc.symdpoly.math.Phases", "kind" : "val"}, {"label" : "perm", "tail" : ": Perm", "member" : "net.alasc.symdpoly.math.GenPerm.perm", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#perm:net.alasc.perms.Perm", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/math\/GenPerm.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction", "shortDescription" : "", "members_case class" : [{"label" : "actl", "tail" : "(g: GenPerm, p: Int): Int", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.actl", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#actl(g:net.alasc.symdpoly.math.GenPerm,p:Int):Int", "kind" : "def"}, {"label" : "actr", "tail" : "(p: Int, g: GenPerm): Int", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.actr", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#actr(p:Int,g:net.alasc.symdpoly.math.GenPerm):Int", "kind" : "def"}, {"label" : "movedPointsUpperBound", "tail" : "(g: GenPerm): NNOption", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.movedPointsUpperBound", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#movedPointsUpperBound(g:net.alasc.symdpoly.math.GenPerm):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "findMovedPoint", "tail" : "(g: GenPerm): NNOption", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.findMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#findMovedPoint(g:net.alasc.symdpoly.math.GenPerm):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "isFaithful", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.isFaithful", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#isFaithful:Boolean", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction#<init>", "error" : "unsupported entity"}, {"label" : "rootOrder", "tail" : ": Int", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.rootOrder", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#rootOrder:Int", "kind" : "val"}, {"label" : "domainSize", "tail" : ": Int", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.domainSize", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#domainSize:Int", "kind" : "val"}, {"label" : "largestMovedPoint", "tail" : "(generators: Iterable[GenPerm]): NNOption", "member" : "net.alasc.algebra.PermutationAction.largestMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#largestMovedPoint(generators:Iterable[G]):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "smallestMovedPoint", "tail" : "(generators: Iterable[GenPerm]): NNOption", "member" : "net.alasc.algebra.PermutationAction.smallestMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#smallestMovedPoint(generators:Iterable[G]):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "hasSameAction", "tail" : "(g: GenPerm, q: Q)(Q: PermutationAction[Q]): Boolean", "member" : "net.alasc.algebra.PermutationAction.hasSameAction", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#hasSameAction[Q](g:G,q:Q)(implicitQ:net.alasc.algebra.PermutationAction[Q]):Boolean", "kind" : "def"}, {"label" : "toPerm", "tail" : "(g: GenPerm): Perm", "member" : "net.alasc.algebra.PermutationAction.toPerm", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#toPerm(g:G):net.alasc.perms.Perm", "kind" : "def"}, {"label" : "images", "tail" : "(g: GenPerm, n: Int): Seq[Int]", "member" : "net.alasc.algebra.PermutationAction.images", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#images(g:G,n:Int):Seq[Int]", "kind" : "def"}, {"label" : "orbit", "tail" : "(g: GenPerm, i: Int): Set[Int]", "member" : "net.alasc.algebra.PermutationAction.orbit", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#orbit(g:G,i:Int):Set[Int]", "kind" : "def"}, {"label" : "permutationOrder", "tail" : "(g: GenPerm): SafeLong", "member" : "net.alasc.algebra.PermutationAction.permutationOrder", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#permutationOrder(g:G):spire.math.SafeLong", "kind" : "def"}, {"label" : "cycleStructure", "tail" : "(g: GenPerm): Map[Int, Int]", "member" : "net.alasc.algebra.PermutationAction.cycleStructure", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#cycleStructure(g:G):Map[Int,Int]", "kind" : "def"}, {"label" : "signPerm", "tail" : "(g: GenPerm): Int", "member" : "net.alasc.algebra.PermutationAction.signPerm", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#signPerm(g:G):Int", "kind" : "def"}, {"label" : "smallestMovedPoint", "tail" : "(g: GenPerm): NNOption", "member" : "net.alasc.algebra.PermutationAction.smallestMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#smallestMovedPoint(g:G):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "largestMovedPoint", "tail" : "(g: GenPerm): NNOption", "member" : "net.alasc.algebra.PermutationAction.largestMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#largestMovedPoint(g:G):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "movedPoints", "tail" : "(g: GenPerm): Set[Int]", "member" : "net.alasc.algebra.PermutationAction.movedPoints", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#movedPoints(g:G):Set[Int]", "kind" : "def"}, {"label" : "nMovedPoints", "tail" : "(g: GenPerm): Int", "member" : "net.alasc.algebra.PermutationAction.nMovedPoints", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#nMovedPoints(g:G):Int", "kind" : "def"}, {"label" : "movesPoint", "tail" : "(g: GenPerm, i: Int): Boolean", "member" : "net.alasc.algebra.PermutationAction.movesPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#movesPoint(g:G,i:Int):Boolean", "kind" : "def"}, {"label" : "movesAnyPoint", "tail" : "(g: GenPerm): Boolean", "member" : "net.alasc.algebra.PermutationAction.movesAnyPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#movesAnyPoint(g:G):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationActionBuilder", "shortDescription" : "", "members_class" : [{"label" : "apply", "tail" : "(generators: Iterable[GenPerm]): PermutationAction[GenPerm]", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationActionBuilder.apply", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#apply(generators:Iterable[net.alasc.symdpoly.math.GenPerm]):net.alasc.algebra.PermutationAction[net.alasc.symdpoly.math.GenPerm]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationActionBuilder#<init>", "error" : "unsupported entity"}, {"label" : "apply", "tail" : "(grp: Grp[GenPerm]): PermutationAction[GenPerm]", "member" : "net.alasc.finite.FaithfulActionBuilder.apply", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#apply(grp:net.alasc.finite.Grp[G]):A", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (PermutationAction[GenPerm]) ⇒ A): (Iterable[GenPerm]) ⇒ A", "member" : "scala.Function1.andThen", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Iterable[GenPerm]): (A) ⇒ PermutationAction[GenPerm]", "member" : "scala.Function1.compose", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationActionBuilder.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.math.GenPermInstances", "shortDescription" : "", "members_class" : [{"label" : "combine", "tail" : "(x: GenPerm, y: GenPerm): GenPerm", "member" : "net.alasc.symdpoly.math.GenPermInstances.combine", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#combine(x:net.alasc.symdpoly.math.GenPerm,y:net.alasc.symdpoly.math.GenPerm):net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "empty", "tail" : "(): GenPerm", "member" : "net.alasc.symdpoly.math.GenPermInstances.empty", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#empty:net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "inverse", "tail" : "(a: GenPerm): GenPerm", "member" : "net.alasc.symdpoly.math.GenPermInstances.inverse", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#inverse(a:net.alasc.symdpoly.math.GenPerm):net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: GenPerm, y: GenPerm): Boolean", "member" : "net.alasc.symdpoly.math.GenPermInstances.eqv", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#eqv(x:net.alasc.symdpoly.math.GenPerm,y:net.alasc.symdpoly.math.GenPerm):Boolean", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.GenPermInstances#<init>", "error" : "unsupported entity"}, {"label" : "combineN", "tail" : "(a: GenPerm, n: Int): GenPerm", "member" : "cats.kernel.Group.combineN", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "remove", "tail" : "(a: GenPerm, b: GenPerm): GenPerm", "member" : "cats.kernel.Group.remove", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#remove(a:A,b:A):A", "kind" : "def"}, {"label" : "combineAllOption", "tail" : "(as: TraversableOnce[GenPerm]): Option[GenPerm]", "member" : "cats.kernel.Monoid.combineAllOption", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#combineAllOption(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "combineAll", "tail" : "(as: TraversableOnce[GenPerm]): GenPerm", "member" : "cats.kernel.Monoid.combineAll", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#combineAll(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(a: GenPerm)(ev: Eq[GenPerm]): Boolean", "member" : "cats.kernel.Monoid.isEmpty", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#isEmpty(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: GenPerm, n: Int): GenPerm", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: GenPerm, y: GenPerm): Boolean", "member" : "cats.kernel.Eq.neqv", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#neqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/GenPermInstances.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.math.PhasedInt", "shortDescription" : "Described a domain element (integer >= 0) along with a phase.", "object" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html", "members_class" : [{"label" : "phase", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.math.PhasedInt.phase", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#phase:net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "index", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.PhasedInt.index", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#index:Int", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.PhasedInt.isEmpty", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "_2", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.PhasedInt._2", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#_2:Int", "kind" : "def"}, {"label" : "_1", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.math.PhasedInt._1", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#_1:net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "get", "tail" : "(): PhasedInt", "member" : "net.alasc.symdpoly.math.PhasedInt.get", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#get:net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.math.PhasedInt.toString", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#toString():String", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.PhasedInt#<init>", "error" : "unsupported entity"}, {"label" : "encoding", "tail" : ": Long", "member" : "net.alasc.symdpoly.math.PhasedInt.encoding", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#encoding:Long", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "equ", "tail" : ": Eq[PhasedInt]", "member" : "net.alasc.symdpoly.math.PhasedInt.equ", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#equ:spire.algebra.Eq[net.alasc.symdpoly.math.PhasedInt]", "kind" : "implicit val"}, {"label" : "arb", "tail" : ": Arbitrary[PhasedInt]", "member" : "net.alasc.symdpoly.math.PhasedInt.arb", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#arb:org.scalacheck.Arbitrary[net.alasc.symdpoly.math.PhasedInt]", "kind" : "implicit val"}, {"label" : "gen", "tail" : "(): Gen[PhasedInt]", "member" : "net.alasc.symdpoly.math.PhasedInt.gen", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#gen:org.scalacheck.Gen[net.alasc.symdpoly.math.PhasedInt]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, index: Int): PhasedInt", "member" : "net.alasc.symdpoly.math.PhasedInt.apply", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#apply(phase:net.alasc.symdpoly.Phase,index:Int):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "unapply", "tail" : "(pi: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.PhasedInt.unapply", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#unapply(pi:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/PhasedInt.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.math.PhasedIntGenPermAction", "shortDescription" : "", "members_class" : [{"label" : "actl", "tail" : "(g: GenPerm, p: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.PhasedIntGenPermAction.actl", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#actl(g:net.alasc.symdpoly.math.GenPerm,p:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "actr", "tail" : "(p: PhasedInt, g: GenPerm): PhasedInt", "member" : "net.alasc.symdpoly.math.PhasedIntGenPermAction.actr", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#actr(p:net.alasc.symdpoly.math.PhasedInt,g:net.alasc.symdpoly.math.GenPerm):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.PhasedIntGenPermAction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/PhasedIntGenPermAction.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.math.Phases", "shortDescription" : "Phase vector, representing a diagonal matrix with \"root of unity\" entries", "object" : "net\/alasc\/symdpoly\/math\/Phases$.html", "members_class" : [{"label" : "invImage", "tail" : "(pi: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.Phases.invImage", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#invImage(pi:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "image", "tail" : "(pi: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.Phases.image", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#image(pi:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "truncate", "tail" : "(n: Int): Phases", "member" : "net.alasc.symdpoly.math.Phases.truncate", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#truncate(n:Int):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "phaseFor", "tail" : "(searchedElement: Int): Phase", "member" : "net.alasc.symdpoly.math.Phases.phaseFor", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#phaseFor(searchedElement:Int):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "adjoint", "tail" : "(): Phases", "member" : "net.alasc.symdpoly.math.Phases.adjoint", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#adjoint:net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "|-|", "tail" : "(rhs: Phases): Phases", "member" : "net.alasc.symdpoly.math.Phases.|-|", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#|-|(rhs:net.alasc.symdpoly.math.Phases):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "|+|", "tail" : "(rhs: Phases): Phases", "member" : "net.alasc.symdpoly.math.Phases.|+|", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#|+|(rhs:net.alasc.symdpoly.math.Phases):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "inverse", "tail" : "(): Phases", "member" : "net.alasc.symdpoly.math.Phases.inverse", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#inverse:net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "combineRemove", "tail" : "(rhs: Phases, remove: Boolean): Phases", "member" : "net.alasc.symdpoly.math.Phases.combineRemove", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#combineRemove(rhs:net.alasc.symdpoly.math.Phases,remove:Boolean):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "mapKeys", "tail" : "(f: Perm): Phases", "member" : "net.alasc.symdpoly.math.Phases.mapKeys", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#mapKeys(f:net.alasc.perms.Perm):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "internal_===", "tail" : "(rhs: Phases): Boolean", "member" : "net.alasc.symdpoly.math.Phases.internal_===", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#internal_===(rhs:net.alasc.symdpoly.math.Phases):Boolean", "kind" : "def"}, {"label" : "valueEncoding", "tail" : "(i: Int): Int", "member" : "net.alasc.symdpoly.math.Phases.valueEncoding", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#valueEncoding(i:Int):Int", "kind" : "def"}, {"label" : "value", "tail" : "(i: Int): Phase", "member" : "net.alasc.symdpoly.math.Phases.value", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#value(i:Int):net.alasc.symdpoly.Phase", "kind" : "def"}, {"label" : "key", "tail" : "(i: Int): Int", "member" : "net.alasc.symdpoly.math.Phases.key", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#key(i:Int):Int", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.Phases.isEmpty", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.Phases.size", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#size:Int", "kind" : "def"}, {"label" : "hash", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.Phases.hash", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#hash:Int", "kind" : "def"}, {"label" : "string", "tail" : "(): String", "member" : "net.alasc.symdpoly.math.Phases.string", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#string:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.math.Phases.toString", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#toString():String", "kind" : "def"}, {"label" : "commonRootOrder", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.Phases.commonRootOrder", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#commonRootOrder:Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.Phases#<init>", "error" : "unsupported entity"}, {"label" : "elements", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.math.Phases.elements", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#elements:Array[Int]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "net\/alasc\/symdpoly\/math\/Phases.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "involution", "tail" : "(): Involution[Phases]", "member" : "net.alasc.symdpoly.math.Phases.involution", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#involution:spire.algebra.Involution[net.alasc.symdpoly.math.Phases]", "kind" : "implicit def"}, {"label" : "abGroup", "tail" : "(): AbGroup[Phases]", "member" : "net.alasc.symdpoly.math.Phases.abGroup", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#abGroup:spire.algebra.AbGroup[net.alasc.symdpoly.math.Phases]", "kind" : "implicit def"}, {"label" : "equ", "tail" : "(): Eq[Phases]", "member" : "net.alasc.symdpoly.math.Phases.equ", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#equ:spire.algebra.Eq[net.alasc.symdpoly.math.Phases]", "kind" : "implicit def"}, {"label" : "action", "tail" : ": Action[PhasedInt, Phases]", "member" : "net.alasc.symdpoly.math.Phases.action", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#action:spire.algebra.Action[net.alasc.symdpoly.math.PhasedInt,net.alasc.symdpoly.math.Phases]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(pairs: (Int, Phase)*): Phases", "member" : "net.alasc.symdpoly.math.Phases.apply", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#apply(pairs:(Int,net.alasc.symdpoly.Phase)*):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "empty", "tail" : ": Phases", "member" : "net.alasc.symdpoly.math.Phases.empty", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#empty:net.alasc.symdpoly.math.Phases", "kind" : "val"}, {"label" : "permAction", "tail" : ": Action[Phases, Perm]", "member" : "net.alasc.symdpoly.math.Phases.permAction", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#permAction:spire.algebra.Action[net.alasc.symdpoly.math.Phases,net.alasc.perms.Perm]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/Phases.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.math.PhasesInstances", "shortDescription" : "", "members_class" : [{"label" : "combine", "tail" : "(x: Phases, y: Phases): Phases", "member" : "net.alasc.symdpoly.math.PhasesInstances.combine", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#combine(x:net.alasc.symdpoly.math.Phases,y:net.alasc.symdpoly.math.Phases):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "adjoint", "tail" : "(a: Phases): Phases", "member" : "net.alasc.symdpoly.math.PhasesInstances.adjoint", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#adjoint(a:net.alasc.symdpoly.math.Phases):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "empty", "tail" : "(): Phases", "member" : "net.alasc.symdpoly.math.PhasesInstances.empty", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#empty:net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: Phases, y: Phases): Boolean", "member" : "net.alasc.symdpoly.math.PhasesInstances.eqv", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#eqv(x:net.alasc.symdpoly.math.Phases,y:net.alasc.symdpoly.math.Phases):Boolean", "kind" : "def"}, {"label" : "inverse", "tail" : "(x: Phases): Phases", "member" : "net.alasc.symdpoly.math.PhasesInstances.inverse", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#inverse(x:net.alasc.symdpoly.math.Phases):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "remove", "tail" : "(x: Phases, y: Phases): Phases", "member" : "net.alasc.symdpoly.math.PhasesInstances.remove", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#remove(x:net.alasc.symdpoly.math.Phases,y:net.alasc.symdpoly.math.Phases):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.PhasesInstances#<init>", "error" : "unsupported entity"}, {"label" : "combineN", "tail" : "(a: Phases, n: Int): Phases", "member" : "cats.kernel.Group.combineN", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "combineAllOption", "tail" : "(as: TraversableOnce[Phases]): Option[Phases]", "member" : "cats.kernel.Monoid.combineAllOption", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#combineAllOption(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "combineAll", "tail" : "(as: TraversableOnce[Phases]): Phases", "member" : "cats.kernel.Monoid.combineAll", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#combineAll(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(a: Phases)(ev: Eq[Phases]): Boolean", "member" : "cats.kernel.Monoid.isEmpty", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#isEmpty(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: Phases, n: Int): Phases", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: Phases, y: Phases): Boolean", "member" : "cats.kernel.Eq.neqv", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#neqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/PhasesInstances.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.math.PhasesPermAction", "shortDescription" : "", "members_class" : [{"label" : "actr", "tail" : "(p: Phases, g: Perm): Phases", "member" : "net.alasc.symdpoly.math.PhasesPermAction.actr", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#actr(p:net.alasc.symdpoly.math.Phases,g:net.alasc.perms.Perm):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "actl", "tail" : "(g: Perm, p: Phases): Phases", "member" : "net.alasc.symdpoly.math.PhasesPermAction.actl", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#actl(g:net.alasc.perms.Perm,p:net.alasc.symdpoly.math.Phases):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.PhasesPermAction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/PhasesPermAction.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.math.PhasesPhasedIntAction", "shortDescription" : "", "members_class" : [{"label" : "actr", "tail" : "(pi: PhasedInt, g: Phases): PhasedInt", "member" : "net.alasc.symdpoly.math.PhasesPhasedIntAction.actr", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#actr(pi:net.alasc.symdpoly.math.PhasedInt,g:net.alasc.symdpoly.math.Phases):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "actl", "tail" : "(g: Phases, pi: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.PhasesPhasedIntAction.actl", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#actl(g:net.alasc.symdpoly.math.Phases,pi:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.PhasesPhasedIntAction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/PhasesPhasedIntAction.html", "kind" : "class"}]};
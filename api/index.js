Index.PACKAGES = {"net.alasc.symdpoly.solvers.matlab" : [{"name" : "net.alasc.symdpoly.solvers.matlab.CellArray", "shortDescription" : "", "members_case class" : [{"label" : "data", "tail" : "(name: Option[String]): MLArray", "member" : "net.alasc.symdpoly.solvers.matlab.CellArray.data", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#data(name:Option[String]):com.jmatio.types.MLArray", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.matlab.CellArray#<init>", "error" : "unsupported entity"}, {"label" : "mat", "tail" : ": Mat[MatlabData]", "member" : "net.alasc.symdpoly.solvers.matlab.CellArray.mat", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#mat:scalin.immutable.Mat[net.alasc.symdpoly.solvers.matlab.MatlabData]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/matlab\/CellArray.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.matlab.Char", "shortDescription" : "", "members_case class" : [{"label" : "data", "tail" : "(name: Option[String]): MLArray", "member" : "net.alasc.symdpoly.solvers.matlab.Char.data", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#data(name:Option[String]):com.jmatio.types.MLArray", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.matlab.Char#<init>", "error" : "unsupported entity"}, {"label" : "s", "tail" : ": String", "member" : "net.alasc.symdpoly.solvers.matlab.Char.s", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#s:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/matlab\/Char.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.matlab.MatlabChar", "shortDescription" : "", "members_case class" : [{"label" : "data", "tail" : "(name: Option[String]): MLArray", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabChar.data", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#data(name:Option[String]):com.jmatio.types.MLArray", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.matlab.MatlabChar#<init>", "error" : "unsupported entity"}, {"label" : "string", "tail" : ": String", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabChar.string", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#string:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabChar.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.matlab.MatlabData", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "data", "tail" : "(name: Option[String]): MLArray", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabData.data", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html#data(name:Option[String]):com.jmatio.types.MLArray", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabData.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.solvers.matlab.MatlabFormat", "members_trait" : [{"label" : "writeFile", "tail" : "(filename: String): Unit", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabFormat.writeFile", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#writeFile(filename:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "data", "tail" : "(): Struct", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabFormat.data", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html#data:net.alasc.symdpoly.solvers.matlab.Struct", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/solvers\/matlab\/MatlabFormat.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.solvers.matlab.MatlabGenPerm", "shortDescription" : "", "members_class" : [{"label" : "matlabImage", "tail" : "(n: Int): Array[Int]", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabGenPerm.matlabImage", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabGenPerm.html#matlabImage(n:Int):Array[Int]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.matlab.MatlabGenPerm#<init>", "error" : "unsupported entity"}, {"label" : "genPerm", "tail" : ": GenPerm", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabGenPerm.genPerm", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabGenPerm.html#genPerm:net.alasc.symdpoly.math.GenPerm", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabGenPerm.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabGenPerm.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabGenPerm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabGenPerm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabGenPerm.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabGenPerm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabGenPerm.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabGenPerm.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.solvers.matlab.MatlabPerm", "shortDescription" : "", "members_class" : [{"label" : "matlabImage", "tail" : "(n: Int): Vect", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabPerm.matlabImage", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabPerm.html#matlabImage(n:Int):net.alasc.symdpoly.solvers.matlab.Vect", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.matlab.MatlabPerm#<init>", "error" : "unsupported entity"}, {"label" : "perm", "tail" : ": Perm", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabPerm.perm", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabPerm.html#perm:net.alasc.perms.Perm", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabPerm.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabPerm.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabPerm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabPerm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabPerm.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabPerm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabPerm.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/solvers\/matlab\/package$$MatlabPerm.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.solvers.matlab.Matrix", "shortDescription" : "", "members_case class" : [{"label" : "data", "tail" : "(name: Option[String]): MLArray", "member" : "net.alasc.symdpoly.solvers.matlab.Matrix.data", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#data(name:Option[String]):com.jmatio.types.MLArray", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.matlab.Matrix#<init>", "error" : "unsupported entity"}, {"label" : "mat", "tail" : ": Mat[Double]", "member" : "net.alasc.symdpoly.solvers.matlab.Matrix.mat", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#mat:scalin.immutable.Mat[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/matlab\/Matrix.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.matlab.Scalar", "shortDescription" : "", "members_case class" : [{"label" : "data", "tail" : "(name: Option[String]): MLArray", "member" : "net.alasc.symdpoly.solvers.matlab.Scalar.data", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#data(name:Option[String]):com.jmatio.types.MLArray", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.matlab.Scalar#<init>", "error" : "unsupported entity"}, {"label" : "real", "tail" : ": Double", "member" : "net.alasc.symdpoly.solvers.matlab.Scalar.real", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#real:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/matlab\/Scalar.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.matlab.Struct", "shortDescription" : "", "members_case class" : [{"label" : "write", "tail" : "(filename: String): Unit", "member" : "net.alasc.symdpoly.solvers.matlab.Struct.write", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#write(filename:String):Unit", "kind" : "def"}, {"label" : "exported", "tail" : "(): Collection[MLArray]", "member" : "net.alasc.symdpoly.solvers.matlab.Struct.exported", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#exported:java.util.Collection[com.jmatio.types.MLArray]", "kind" : "def"}, {"label" : "data", "tail" : "(name: Option[String]): MLArray", "member" : "net.alasc.symdpoly.solvers.matlab.Struct.data", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#data(name:Option[String]):com.jmatio.types.MLArray", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.matlab.Struct#<init>", "error" : "unsupported entity"}, {"label" : "elements", "tail" : ": (String, MatlabData)*", "member" : "net.alasc.symdpoly.solvers.matlab.Struct.elements", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#elements:(String,net.alasc.symdpoly.solvers.matlab.MatlabData)*", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/matlab\/Struct.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.matlab.Vect", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html", "members_object" : [{"label" : "emptyCol", "tail" : ": Vect", "member" : "net.alasc.symdpoly.solvers.matlab.Vect.emptyCol", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#emptyCol:net.alasc.symdpoly.solvers.matlab.Vect", "kind" : "val"}, {"label" : "emptyRow", "tail" : ": Vect", "member" : "net.alasc.symdpoly.solvers.matlab.Vect.emptyRow", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#emptyRow:net.alasc.symdpoly.solvers.matlab.Vect", "kind" : "val"}, {"label" : "col", "tail" : "(seq: Seq[Double]): Vect", "member" : "net.alasc.symdpoly.solvers.matlab.Vect.col", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#col(seq:Seq[Double]):net.alasc.symdpoly.solvers.matlab.Vect", "kind" : "def"}, {"label" : "row", "tail" : "(seq: Seq[Double]): Vect", "member" : "net.alasc.symdpoly.solvers.matlab.Vect.row", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#row(seq:Seq[Double]):net.alasc.symdpoly.solvers.matlab.Vect", "kind" : "def"}, {"label" : "col", "tail" : "(vec: Vec[Double]): Vect", "member" : "net.alasc.symdpoly.solvers.matlab.Vect.col", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#col(vec:scalin.immutable.Vec[Double]):net.alasc.symdpoly.solvers.matlab.Vect", "kind" : "def"}, {"label" : "row", "tail" : "(vec: Vec[Double]): Vect", "member" : "net.alasc.symdpoly.solvers.matlab.Vect.row", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#row(vec:scalin.immutable.Vec[Double]):net.alasc.symdpoly.solvers.matlab.Vect", "kind" : "def"}, {"label" : "col", "tail" : "(array: Array[Double]): Vect", "member" : "net.alasc.symdpoly.solvers.matlab.Vect.col", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#col(array:Array[Double]):net.alasc.symdpoly.solvers.matlab.Vect", "kind" : "def"}, {"label" : "row", "tail" : "(array: Array[Double]): Vect", "member" : "net.alasc.symdpoly.solvers.matlab.Vect.row", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#row(array:Array[Double]):net.alasc.symdpoly.solvers.matlab.Vect", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "data", "tail" : "(name: Option[String]): MLArray", "member" : "net.alasc.symdpoly.solvers.matlab.Vect.data", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#data(name:Option[String]):com.jmatio.types.MLArray", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.matlab.Vect#<init>", "error" : "unsupported entity"}, {"label" : "isColVector", "tail" : ": Boolean", "member" : "net.alasc.symdpoly.solvers.matlab.Vect.isColVector", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#isColVector:Boolean", "kind" : "val"}, {"label" : "vec", "tail" : ": Array[Double]", "member" : "net.alasc.symdpoly.solvers.matlab.Vect.vec", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#vec:Array[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/matlab\/Vect.html", "kind" : "case class"}], "scala.collection" : [], "net.alasc.symdpoly.algebra" : [{"name" : "net.alasc.symdpoly.algebra.InjectiveMorphism", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (T) ⇒ A): (S) ⇒ A", "member" : "scala.Function1.andThen", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ S): (A) ⇒ T", "member" : "scala.Function1.compose", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(s: S): T", "member" : "net.alasc.symdpoly.algebra.Morphism.apply", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#apply(s:S):T", "kind" : "abstract def"}, {"label" : "T", "tail" : "(): F[T]", "member" : "net.alasc.symdpoly.algebra.Morphism.T", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#T:F[T]", "kind" : "abstract def"}, {"label" : "S", "tail" : "(): F[S]", "member" : "net.alasc.symdpoly.algebra.Morphism.S", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html#S:F[S]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html", "members_object" : [{"label" : "apply", "tail" : "(f: (S) ⇒ T)(S0: F[S], T0: F[T]): InjectiveMorphism[S, T, F]", "member" : "net.alasc.symdpoly.algebra.InjectiveMorphism.apply", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#apply[S,T,F[_]](f:S=>T)(implicitS0:F[S],implicitT0:F[T]):net.alasc.symdpoly.algebra.InjectiveMorphism[S,T,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/algebra\/InjectiveMorphism.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.algebra.Isomorphism", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (T) ⇒ A): (S) ⇒ A", "member" : "scala.Function1.andThen", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ S): (A) ⇒ T", "member" : "scala.Function1.compose", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "preimageRepresentative", "tail" : "(t: T): S", "member" : "net.alasc.symdpoly.algebra.SurjectiveMorphism.preimageRepresentative", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#preimageRepresentative(t:T):S", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(s: S): T", "member" : "net.alasc.symdpoly.algebra.Morphism.apply", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#apply(s:S):T", "kind" : "abstract def"}, {"label" : "T", "tail" : "(): F[T]", "member" : "net.alasc.symdpoly.algebra.Morphism.T", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#T:F[T]", "kind" : "abstract def"}, {"label" : "S", "tail" : "(): F[S]", "member" : "net.alasc.symdpoly.algebra.Morphism.S", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html#S:F[S]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html", "members_object" : [{"label" : "apply", "tail" : "(image: (S) ⇒ T)(preimage: (T) ⇒ S)(S0: F[S], T0: F[T]): Isomorphism[S, T, F]", "member" : "net.alasc.symdpoly.algebra.Isomorphism.apply", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#apply[S,T,F[_]](image:S=>T)(preimage:T=>S)(implicitS0:F[S],implicitT0:F[T]):net.alasc.symdpoly.algebra.Isomorphism[S,T,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Isomorphism$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/algebra\/Isomorphism.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.algebra.Morphism", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (T) ⇒ A): (S) ⇒ A", "member" : "scala.Function1.andThen", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ S): (A) ⇒ T", "member" : "scala.Function1.compose", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(s: S): T", "member" : "net.alasc.symdpoly.algebra.Morphism.apply", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#apply(s:S):T", "kind" : "abstract def"}, {"label" : "T", "tail" : "(): F[T]", "member" : "net.alasc.symdpoly.algebra.Morphism.T", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#T:F[T]", "kind" : "abstract def"}, {"label" : "S", "tail" : "(): F[S]", "member" : "net.alasc.symdpoly.algebra.Morphism.S", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism.html#S:F[S]", "kind" : "abstract def"}], "shortDescription" : "Describes a map S => T that preserves the algebraic structure F[_]", "object" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html", "members_object" : [{"label" : "compose", "tail" : "(): Compose[[S, T]Morphism[S, T, F]]", "member" : "net.alasc.symdpoly.algebra.Morphism.compose", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#compose[F[_]]:cats.arrow.Compose[[S,T]net.alasc.symdpoly.algebra.Morphism[S,T,F]]", "kind" : "implicit def"}, {"label" : "niceMonomorphism", "tail" : "(grp: Grp[G])(ev: FaithfulPermutationActionBuilder[G]): Morphism[G, Perm, Group]", "member" : "net.alasc.symdpoly.algebra.Morphism.niceMonomorphism", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#niceMonomorphism[G](grp:net.alasc.finite.Grp[G])(implicitev:net.alasc.finite.FaithfulPermutationActionBuilder[G]):net.alasc.symdpoly.algebra.Morphism[G,net.alasc.perms.Perm,spire.algebra.Group]", "kind" : "def"}, {"label" : "faithfulPermutationActionFromGrp", "tail" : "(grp: Grp[G]): Option[PermutationAction[G]]", "member" : "net.alasc.symdpoly.algebra.Morphism.faithfulPermutationActionFromGrp", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#faithfulPermutationActionFromGrp[G](grp:net.alasc.finite.Grp[G]):Option[net.alasc.algebra.PermutationAction[G]]", "kind" : "def"}, {"label" : "morphismGrpImage", "tail" : "", "member" : "net.alasc.symdpoly.algebra.Morphism.morphismGrpImage", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#morphismGrpImage[S,T]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "fromGeneratorImages", "tail" : "(source: Grp[S], images: Seq[T])(ev: MorphismFromGeneratorImages[S, T]): Morphism[S, T, Group]", "member" : "net.alasc.symdpoly.algebra.Morphism.fromGeneratorImages", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#fromGeneratorImages[S,T,F[_]](source:net.alasc.finite.Grp[S],images:Seq[T])(implicitev:net.alasc.symdpoly.algebra.MorphismFromGeneratorImages[S,T]):net.alasc.symdpoly.algebra.Morphism[S,T,spire.algebra.Group]", "kind" : "def"}, {"label" : "apply", "tail" : "(f: (S) ⇒ T)(S0: F[S], T0: F[T]): Morphism[S, T, F]", "member" : "net.alasc.symdpoly.algebra.Morphism.apply", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#apply[S,T,F[_]](f:S=>T)(implicitS0:F[S],implicitT0:F[T]):net.alasc.symdpoly.algebra.Morphism[S,T,F]", "kind" : "def"}, {"label" : "GroupMorphism", "tail" : "", "member" : "net.alasc.symdpoly.algebra.Morphism.GroupMorphism", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#GroupMorphism[S,T]=net.alasc.symdpoly.algebra.Morphism[S,T,spire.algebra.Group]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Morphism$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/algebra\/Morphism.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.algebra.MorphismFromGeneratorImages", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(source: Grp[S], images: Seq[T]): Morphism[S, T, Group]", "member" : "net.alasc.symdpoly.algebra.MorphismFromGeneratorImages.apply", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html#apply(source:net.alasc.finite.Grp[S],images:Seq[T]):net.alasc.symdpoly.algebra.Morphism[S,T,spire.algebra.Group]", "kind" : "abstract def"}], "shortDescription" : "Describes the ability to construct a morphism from images of the generators.", "object" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html", "members_object" : [{"label" : "forFaithfulPermutationAction", "tail" : "(arg0: Eq[S], arg1: FaithfulPermutationActionBuilder[S], arg2: Group[S], arg3: Eq[T], arg4: FaithfulPermutationActionBuilder[T], arg5: Group[T]): MorphismFromGeneratorImages[S, T]", "member" : "net.alasc.symdpoly.algebra.MorphismFromGeneratorImages.forFaithfulPermutationAction", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#forFaithfulPermutationAction[S,T](implicitevidence$1:spire.algebra.Eq[S],implicitevidence$2:net.alasc.finite.FaithfulPermutationActionBuilder[S],implicitevidence$3:spire.algebra.Group[S],implicitevidence$4:spire.algebra.Eq[T],implicitevidence$5:net.alasc.finite.FaithfulPermutationActionBuilder[T],implicitevidence$6:spire.algebra.Group[T]):net.alasc.symdpoly.algebra.MorphismFromGeneratorImages[S,T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/algebra\/MorphismFromGeneratorImages.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.algebra.MultiplicativeBinoid", "members_trait" : [{"label" : "isZero", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "net.alasc.symdpoly.algebra.MultiplicativeBinoid.isZero", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#isZero(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[A]): Option[A]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[A]): A", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: A)(ev: Eq[A]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Monoid[A]", "member" : "algebra.ring.MultiplicativeMonoid.multiplicative", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#multiplicative:algebra.Monoid[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: A, n: Int): A", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "zero", "tail" : "(): A", "member" : "net.alasc.symdpoly.algebra.MultiplicativeBinoid.zero", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#zero:A", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): A", "member" : "algebra.ring.MultiplicativeMonoid.one", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#one:A", "kind" : "abstract def"}, {"label" : "times", "tail" : "(x: A, y: A): A", "member" : "algebra.ring.MultiplicativeSemigroup.times", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html#times(x:A,y:A):A", "kind" : "abstract def"}], "shortDescription" : "Describes a multiplicative monoid that has a absorbing\/zero element.", "object" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: MultiplicativeBinoid[A]): MultiplicativeBinoid[A]", "member" : "net.alasc.symdpoly.algebra.MultiplicativeBinoid.apply", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#apply[A](implicitev:net.alasc.symdpoly.algebra.MultiplicativeBinoid[A]):net.alasc.symdpoly.algebra.MultiplicativeBinoid[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/algebra\/MultiplicativeBinoid.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.algebra.NiceVectorSpace", "members_trait" : [{"label" : "linearCombination", "tail" : "(elements: Iterable[(B, F)]): V", "member" : "net.alasc.symdpoly.algebra.NiceVectorSpace.linearCombination", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#linearCombination(elements:Iterable[(B,F)]):V", "kind" : "def"}, {"label" : "element", "tail" : "(f: F, b: B): V", "member" : "net.alasc.symdpoly.algebra.NiceVectorSpace.element", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#element(f:F,b:B):V", "kind" : "def"}, {"label" : "support", "tail" : "(v: V): SortedSet[B]", "member" : "net.alasc.symdpoly.algebra.NiceVectorSpace.support", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#support(v:V):scala.collection.immutable.SortedSet[B]", "kind" : "def"}, {"label" : "divr", "tail" : "(v: V, f: F): V", "member" : "spire.algebra.VectorSpace.divr", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#divr(v:V,f:F):V", "kind" : "def"}, {"label" : "timesr", "tail" : "(v: V, r: F): V", "member" : "spire.algebra.CModule.timesr", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#timesr(v:V,r:R):V", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[V]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: V, n: Int): V", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "minus", "tail" : "(x: V, y: V): V", "member" : "algebra.ring.AdditiveGroup.minus", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#minus(x:A,y:A):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[V]): Option[V]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[V]): V", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: V)(ev: Eq[V]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: V, n: Int): V", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "basisElement", "tail" : "(b: B): V", "member" : "net.alasc.symdpoly.algebra.NiceVectorSpace.basisElement", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#basisElement(b:B):V", "kind" : "abstract def"}, {"label" : "decompose", "tail" : "(v: V): SortedMap[B, F]", "member" : "net.alasc.symdpoly.algebra.NiceVectorSpace.decompose", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#decompose(v:V):scala.collection.immutable.SortedMap[B,F]", "kind" : "abstract def"}, {"label" : "orderB", "tail" : "(): Order[B]", "member" : "net.alasc.symdpoly.algebra.NiceVectorSpace.orderB", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#orderB:spire.algebra.Order[B]", "kind" : "implicit abstract def"}, {"label" : "eqF", "tail" : "(): Eq[F]", "member" : "net.alasc.symdpoly.algebra.NiceVectorSpace.eqF", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#eqF:spire.algebra.Eq[F]", "kind" : "implicit abstract def"}, {"label" : "scalar", "tail" : "(): Field[F]", "member" : "spire.algebra.VectorSpace.scalar", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#scalar:spire.algebra.Field[F]", "kind" : "implicit abstract def"}, {"label" : "timesl", "tail" : "(r: F, v: V): V", "member" : "spire.algebra.LeftModule.timesl", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#timesl(r:R,v:V):V", "kind" : "abstract def"}, {"label" : "negate", "tail" : "(x: V): V", "member" : "algebra.ring.AdditiveGroup.negate", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#negate(x:A):A", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): V", "member" : "algebra.ring.AdditiveMonoid.zero", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#zero:A", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(x: V, y: V): V", "member" : "algebra.ring.AdditiveSemigroup.plus", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html#plus(x:A,y:A):A", "kind" : "abstract def"}], "shortDescription" : "A nice vector space:", "object" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: NiceVectorSpace[V, B, F]): NiceVectorSpace[V, B, F]", "member" : "net.alasc.symdpoly.algebra.NiceVectorSpace.apply", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#apply[V,B,F](implicitev:net.alasc.symdpoly.algebra.NiceVectorSpace[V,B,F]):net.alasc.symdpoly.algebra.NiceVectorSpace[V,B,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/algebra\/NiceVectorSpace.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.algebra.Phased", "members_trait" : [{"label" : "multiplicative", "tail" : "(): Action[A, Phase]", "member" : "spire.algebra.MultiplicativeAction.multiplicative", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#multiplicative:spire.algebra.Action[P,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "phaseOffset", "tail" : "(a: A): Phase", "member" : "net.alasc.symdpoly.algebra.Phased.phaseOffset", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#phaseOffset(a:A):net.alasc.symdpoly.math.Phase", "kind" : "abstract def"}, {"label" : "phaseCanonical", "tail" : "(a: A): A", "member" : "net.alasc.symdpoly.algebra.Phased.phaseCanonical", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#phaseCanonical(a:A):A", "kind" : "abstract def"}, {"label" : "gtimesr", "tail" : "(p: A, g: Phase): A", "member" : "spire.algebra.MultiplicativeAction.gtimesr", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#gtimesr(p:P,g:G):P", "kind" : "abstract def"}, {"label" : "gtimesl", "tail" : "(g: Phase, p: A): A", "member" : "spire.algebra.MultiplicativeAction.gtimesl", "link" : "net\/alasc\/symdpoly\/algebra\/Phased.html#gtimesl(g:G,p:P):P", "kind" : "abstract def"}], "shortDescription" : "Describes an element with a phase.", "object" : "net\/alasc\/symdpoly\/algebra\/Phased$.html", "members_object" : [{"label" : "invariant", "tail" : ": Invariant[Phased]", "member" : "net.alasc.symdpoly.algebra.Phased.invariant", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#invariant:cats.Invariant[net.alasc.symdpoly.algebra.Phased]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(ev: Phased[A]): Phased[A]", "member" : "net.alasc.symdpoly.algebra.Phased.apply", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#apply[A](implicitev:net.alasc.symdpoly.algebra.Phased[A]):net.alasc.symdpoly.algebra.Phased[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/Phased$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/algebra\/Phased.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.algebra.SurjectiveMorphism", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (T) ⇒ A): (S) ⇒ A", "member" : "scala.Function1.andThen", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ S): (A) ⇒ T", "member" : "scala.Function1.compose", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "preimageRepresentative", "tail" : "(t: T): S", "member" : "net.alasc.symdpoly.algebra.SurjectiveMorphism.preimageRepresentative", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#preimageRepresentative(t:T):S", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(s: S): T", "member" : "net.alasc.symdpoly.algebra.Morphism.apply", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#apply(s:S):T", "kind" : "abstract def"}, {"label" : "T", "tail" : "(): F[T]", "member" : "net.alasc.symdpoly.algebra.Morphism.T", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#T:F[T]", "kind" : "abstract def"}, {"label" : "S", "tail" : "(): F[S]", "member" : "net.alasc.symdpoly.algebra.Morphism.S", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html#S:F[S]", "kind" : "abstract def"}], "shortDescription" : "Describes a morphism S => T that is also surjective, i.e.", "object" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html", "members_object" : [{"label" : "apply", "tail" : "(image: (S) ⇒ T)(preimage: (T) ⇒ S)(S0: F[S], T0: F[T]): SurjectiveMorphism[S, T, F]", "member" : "net.alasc.symdpoly.algebra.SurjectiveMorphism.apply", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#apply[S,T,F[_]](image:S=>T)(preimage:T=>S)(implicitS0:F[S],implicitT0:F[T]):net.alasc.symdpoly.algebra.SurjectiveMorphism[S,T,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/algebra\/SurjectiveMorphism.html", "kind" : "trait"}], "net.alasc.symdpoly.solvers" : [{"name" : "net.alasc.symdpoly.solvers.JOptimizerInstance", "shortDescription" : "Interface to the pure Java JOptimizer solver", "members_case class" : [{"label" : "solve", "tail" : "(tol: Double): Solution", "member" : "net.alasc.symdpoly.solvers.JOptimizerInstance.solve", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#solve(tol:Double):net.alasc.symdpoly.Solution", "kind" : "def"}, {"label" : "m", "tail" : ": Int", "member" : "net.alasc.symdpoly.solvers.JOptimizerInstance.m", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#m:Int", "kind" : "val"}, {"member" : "net.alasc.symdpoly.solvers.JOptimizerInstance#<init>", "error" : "unsupported entity"}, {"label" : "program", "tail" : ": Program", "member" : "net.alasc.symdpoly.solvers.JOptimizerInstance.program", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#program:net.alasc.symdpoly.sdp.Program", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/JOptimizerInstance.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.MosekFormat", "shortDescription" : "Support for export to Mosek CBF file format", "object" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html", "members_object" : [{"label" : "apply", "tail" : "(sdp: Program): MosekFormat", "member" : "net.alasc.symdpoly.solvers.MosekFormat.apply", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#apply(sdp:net.alasc.symdpoly.sdp.Program):net.alasc.symdpoly.solvers.MosekFormat", "kind" : "def"}, {"label" : "ScalarVariable", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.ScalarVariable", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ScalarVariable=Int", "kind" : "type"}, {"label" : "PSDVariable", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.PSDVariable", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#PSDVariable=Int", "kind" : "type"}, {"label" : "ScalarConstraint", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.ScalarConstraint", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ScalarConstraint=Int", "kind" : "type"}, {"label" : "ObjBCoord", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.ObjBCoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ObjBCoordextendsProductwithSerializable", "kind" : "case class"}, {"label" : "BCoord", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.BCoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#BCoordextendsProductwithSerializable", "kind" : "case class"}, {"label" : "BCoordElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.BCoordElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#BCoordElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ACoord", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.ACoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ACoordextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ACoordElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.ACoordElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ACoordElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "FCoord", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.FCoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#FCoordextendsProductwithSerializable", "kind" : "case class"}, {"label" : "FCoordElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.FCoordElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#FCoordElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ObjACoord", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.ObjACoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ObjACoordextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ObjACoordElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.ObjACoordElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ObjACoordElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Con", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.Con", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ConextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ConElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.ConElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ConElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Var", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.Var", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#VarextendsProductwithSerializable", "kind" : "case class"}, {"label" : "VarElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.VarElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#VarElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PSDVar", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.PSDVar", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#PSDVarextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PSDVarElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.PSDVarElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#PSDVarElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ObjFCoord", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.ObjFCoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ObjFCoordextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ObjFCoordElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekFormat.ObjFCoordElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ObjFCoordElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "writeData", "tail" : "(writer: Writer): Unit", "member" : "net.alasc.symdpoly.solvers.MosekFormat.writeData", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#writeData(writer:java.io.Writer):Unit", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.MosekFormat#<init>", "error" : "unsupported entity"}, {"label" : "objBCoord", "tail" : ": ObjBCoord", "member" : "net.alasc.symdpoly.solvers.MosekFormat.objBCoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#objBCoord:net.alasc.symdpoly.solvers.MosekFormat.ObjBCoord", "kind" : "val"}, {"label" : "bCoord", "tail" : ": BCoord", "member" : "net.alasc.symdpoly.solvers.MosekFormat.bCoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#bCoord:net.alasc.symdpoly.solvers.MosekFormat.BCoord", "kind" : "val"}, {"label" : "aCoord", "tail" : ": ACoord", "member" : "net.alasc.symdpoly.solvers.MosekFormat.aCoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#aCoord:net.alasc.symdpoly.solvers.MosekFormat.ACoord", "kind" : "val"}, {"label" : "fCoord", "tail" : ": FCoord", "member" : "net.alasc.symdpoly.solvers.MosekFormat.fCoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#fCoord:net.alasc.symdpoly.solvers.MosekFormat.FCoord", "kind" : "val"}, {"label" : "objACoord", "tail" : ": ObjACoord", "member" : "net.alasc.symdpoly.solvers.MosekFormat.objACoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#objACoord:net.alasc.symdpoly.solvers.MosekFormat.ObjACoord", "kind" : "val"}, {"label" : "objFCoord", "tail" : ": ObjFCoord", "member" : "net.alasc.symdpoly.solvers.MosekFormat.objFCoord", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#objFCoord:net.alasc.symdpoly.solvers.MosekFormat.ObjFCoord", "kind" : "val"}, {"label" : "con", "tail" : ": Con", "member" : "net.alasc.symdpoly.solvers.MosekFormat.con", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#con:net.alasc.symdpoly.solvers.MosekFormat.Con", "kind" : "val"}, {"label" : "var", "tail" : ": Var", "member" : "net.alasc.symdpoly.solvers.MosekFormat.var", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#var:net.alasc.symdpoly.solvers.MosekFormat.Var", "kind" : "val"}, {"label" : "psdVar", "tail" : ": PSDVar", "member" : "net.alasc.symdpoly.solvers.MosekFormat.psdVar", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#psdVar:net.alasc.symdpoly.solvers.MosekFormat.PSDVar", "kind" : "val"}, {"label" : "direction", "tail" : ": Direction", "member" : "net.alasc.symdpoly.solvers.MosekFormat.direction", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#direction:net.alasc.symdpoly.Direction", "kind" : "val"}, {"label" : "data", "tail" : "(): String", "member" : "net.alasc.symdpoly.solvers.TextFormat.data", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#data:String", "kind" : "def"}, {"label" : "writeFile", "tail" : "(filename: String): Unit", "member" : "net.alasc.symdpoly.solvers.TextFormat.writeFile", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#writeFile(filename:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/MosekFormat.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat", "shortDescription" : "", "members_case class" : [{"label" : "writeData", "tail" : "(writer: Writer): Unit", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.writeData", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#writeData(writer:java.io.Writer):Unit", "kind" : "def"}, {"label" : "ScalarConstraint", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.ScalarConstraint", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#ScalarConstraint", "kind" : "object"}, {"label" : "ScalarConstraint", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.ScalarConstraint", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#ScalarConstraintextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PSDConstraints", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.PSDConstraints", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#PSDConstraints", "kind" : "object"}, {"label" : "PSDConstraints", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.PSDConstraints", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#PSDConstraintsextendsProductwithSerializable", "kind" : "case class"}, {"label" : "DCoordElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.DCoordElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#DCoordElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "HCoordElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.HCoordElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#HCoordElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "BCoordElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.BCoordElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#BCoordElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ACoordElement", "tail" : "", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.ACoordElement", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#ACoordElementextendsProductwithSerializable", "kind" : "case class"}, {"label" : "writeVector", "tail" : "(writer: Writer, vec: Vec[Double]): Unit", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.writeVector", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#writeVector(writer:java.io.Writer,vec:scalin.immutable.Vec[Double]):Unit", "kind" : "def"}, {"label" : "n", "tail" : ": Int", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.n", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#n:Int", "kind" : "val"}, {"member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat#<init>", "error" : "unsupported entity"}, {"label" : "sdp", "tail" : ": Program", "member" : "net.alasc.symdpoly.solvers.MosekUnsupportedFormat.sdp", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#sdp:net.alasc.symdpoly.sdp.Program", "kind" : "val"}, {"label" : "data", "tail" : "(): String", "member" : "net.alasc.symdpoly.solvers.TextFormat.data", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#data:String", "kind" : "def"}, {"label" : "writeFile", "tail" : "(filename: String): Unit", "member" : "net.alasc.symdpoly.solvers.TextFormat.writeFile", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#writeFile(filename:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/MosekUnsupportedFormat.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.SCSMatlabFormat", "shortDescription" : "Export interface for the SCS solver", "members_case class" : [{"label" : "data", "tail" : "(): Struct", "member" : "net.alasc.symdpoly.solvers.SCSMatlabFormat.data", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#data:net.alasc.symdpoly.solvers.matlab.Struct", "kind" : "def"}, {"label" : "convertBlock", "tail" : "(block: Block): (Mat[Double], Vec[Double])", "member" : "net.alasc.symdpoly.solvers.SCSMatlabFormat.convertBlock", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#convertBlock(block:net.alasc.symdpoly.sdp.Block):(scalin.immutable.Mat[Double],scalin.immutable.Vec[Double])", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.SCSMatlabFormat#<init>", "error" : "unsupported entity"}, {"label" : "sdp", "tail" : ": Program", "member" : "net.alasc.symdpoly.solvers.SCSMatlabFormat.sdp", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#sdp:net.alasc.symdpoly.sdp.Program", "kind" : "val"}, {"label" : "writeFile", "tail" : "(filename: String): Unit", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabFormat.writeFile", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#writeFile(filename:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/SCSMatlabFormat.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.SDPAFormat", "shortDescription" : "", "members_case class" : [{"label" : "solve", "tail" : "(): Solution", "member" : "net.alasc.symdpoly.solvers.SDPAFormat.solve", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#solve():net.alasc.symdpoly.Solution", "kind" : "def"}, {"label" : "writeData", "tail" : "(writer: Writer): Unit", "member" : "net.alasc.symdpoly.solvers.SDPAFormat.writeData", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#writeData(writer:java.io.Writer):Unit", "kind" : "def"}, {"label" : "m", "tail" : ": Int", "member" : "net.alasc.symdpoly.solvers.SDPAFormat.m", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#m:Int", "kind" : "val"}, {"member" : "net.alasc.symdpoly.solvers.SDPAFormat#<init>", "error" : "unsupported entity"}, {"label" : "sdp", "tail" : ": Program", "member" : "net.alasc.symdpoly.solvers.SDPAFormat.sdp", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#sdp:net.alasc.symdpoly.sdp.Program", "kind" : "val"}, {"label" : "data", "tail" : "(): String", "member" : "net.alasc.symdpoly.solvers.TextFormat.data", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#data:String", "kind" : "def"}, {"label" : "writeFile", "tail" : "(filename: String): Unit", "member" : "net.alasc.symdpoly.solvers.TextFormat.writeFile", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#writeFile(filename:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/SDPAFormat.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat", "shortDescription" : "Export interface for the SDPT3 solver (same format is used in the SDPNAL family)", "object" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html", "members_class" : [{"label" : "data", "tail" : "(): Struct", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.data", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#data:net.alasc.symdpoly.solvers.matlab.Struct", "kind" : "def"}, {"label" : "blk", "tail" : ": CellArray", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.blk", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#blk:net.alasc.symdpoly.solvers.matlab.CellArray", "kind" : "val"}, {"label" : "matCseq", "tail" : ": Seq[Matrix]", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.matCseq", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#matCseq:Seq[net.alasc.symdpoly.solvers.matlab.Matrix]", "kind" : "val"}, {"label" : "matAseq", "tail" : ": Seq[Matrix]", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.matAseq", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#matAseq:Seq[net.alasc.symdpoly.solvers.matlab.Matrix]", "kind" : "val"}, {"label" : "convertBlock", "tail" : "(block: Block): (Matrix, Matrix)", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.convertBlock", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#convertBlock(block:net.alasc.symdpoly.sdp.Block):(net.alasc.symdpoly.solvers.matlab.Matrix,net.alasc.symdpoly.solvers.matlab.Matrix)", "kind" : "def"}, {"label" : "sparseMatrix", "tail" : "(nRows: Int, nCols: Int, data: Seq[(Int, Int, Double)]): Mat[Double]", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.sparseMatrix", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#sparseMatrix(nRows:Int,nCols:Int,data:Seq[(Int,Int,Double)]):scalin.immutable.Mat[Double]", "kind" : "def"}, {"label" : "b", "tail" : ": Vect", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.b", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#b:net.alasc.symdpoly.solvers.matlab.Vect", "kind" : "val"}, {"label" : "objFactor", "tail" : ": Double", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.objFactor", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#objFactor:Double", "kind" : "val"}, {"label" : "objShift", "tail" : ": Double", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.objShift", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#objShift:Double", "kind" : "val"}, {"label" : "nBlocks", "tail" : ": Int", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.nBlocks", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#nBlocks:Int", "kind" : "val"}, {"label" : "m", "tail" : ": Int", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.m", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#m:Int", "kind" : "val"}, {"member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat#<init>", "error" : "unsupported entity"}, {"label" : "program", "tail" : ": Program", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.program", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#program:net.alasc.symdpoly.sdp.Program", "kind" : "val"}, {"label" : "writeFile", "tail" : "(filename: String): Unit", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabFormat.writeFile", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#writeFile(filename:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(program: Program): SDPT3MatlabFormat", "member" : "net.alasc.symdpoly.solvers.SDPT3MatlabFormat.apply", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#apply(program:net.alasc.symdpoly.sdp.Program):net.alasc.symdpoly.solvers.SDPT3MatlabFormat", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/solvers\/SDPT3MatlabFormat.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.solvers.SedumiMatlabFormat", "shortDescription" : "Export interface for the Sedumi solver", "members_case class" : [{"label" : "data", "tail" : "(): Struct", "member" : "net.alasc.symdpoly.solvers.SedumiMatlabFormat.data", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#data:net.alasc.symdpoly.solvers.matlab.Struct", "kind" : "def"}, {"label" : "convertBlock", "tail" : "(block: Block): (Mat[Double], Vec[Double])", "member" : "net.alasc.symdpoly.solvers.SedumiMatlabFormat.convertBlock", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#convertBlock(block:net.alasc.symdpoly.sdp.Block):(scalin.immutable.Mat[Double],scalin.immutable.Vec[Double])", "kind" : "def"}, {"member" : "net.alasc.symdpoly.solvers.SedumiMatlabFormat#<init>", "error" : "unsupported entity"}, {"label" : "program", "tail" : ": Program", "member" : "net.alasc.symdpoly.solvers.SedumiMatlabFormat.program", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#program:net.alasc.symdpoly.sdp.Program", "kind" : "val"}, {"label" : "writeFile", "tail" : "(filename: String): Unit", "member" : "net.alasc.symdpoly.solvers.matlab.MatlabFormat.writeFile", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#writeFile(filename:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/solvers\/SedumiMatlabFormat.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.solvers.TextFormat", "members_trait" : [{"label" : "data", "tail" : "(): String", "member" : "net.alasc.symdpoly.solvers.TextFormat.data", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#data:String", "kind" : "def"}, {"label" : "writeFile", "tail" : "(filename: String): Unit", "member" : "net.alasc.symdpoly.solvers.TextFormat.writeFile", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#writeFile(filename:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "writeData", "tail" : "(writer: Writer): Unit", "member" : "net.alasc.symdpoly.solvers.TextFormat.writeData", "link" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html#writeData(writer:java.io.Writer):Unit", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/solvers\/TextFormat.html", "kind" : "trait"}], "net.alasc" : [], "net.alasc.symdpoly.mosek" : [{"name" : "net.alasc.symdpoly.mosek.MosekProgram", "shortDescription" : "", "members_class" : [{"label" : "nativeMosek", "tail" : "(): NativeMosekInstance", "member" : "net.alasc.symdpoly.mosek.MosekProgram.nativeMosek", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#nativeMosek:net.alasc.symdpoly.mosek.NativeMosekInstance", "kind" : "def"}, {"member" : "net.alasc.symdpoly.mosek.MosekProgram#<init>", "error" : "unsupported entity"}, {"label" : "program", "tail" : ": Program", "member" : "net.alasc.symdpoly.mosek.MosekProgram.program", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#program:net.alasc.symdpoly.sdp.Program", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/mosek\/package$$MosekProgram.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.mosek.NativeMosekInstance", "shortDescription" : "", "members_class" : [{"label" : "solve", "tail" : "(tolRelGap: Double): Solution", "member" : "net.alasc.symdpoly.mosek.NativeMosekInstance.solve", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#solve(tolRelGap:Double):net.alasc.symdpoly.Solution", "kind" : "def"}, {"label" : "writeFile", "tail" : "(fileName: String, tolRelGap: Double): Unit", "member" : "net.alasc.symdpoly.mosek.NativeMosekInstance.writeFile", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#writeFile(fileName:String,tolRelGap:Double):Unit", "kind" : "def"}, {"label" : "populateTask", "tail" : "(task: Task): Unit", "member" : "net.alasc.symdpoly.mosek.NativeMosekInstance.populateTask", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#populateTask(task:mosek.Task):Unit", "kind" : "def"}, {"label" : "format", "tail" : ": MosekFormat", "member" : "net.alasc.symdpoly.mosek.NativeMosekInstance.format", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#format:net.alasc.symdpoly.solvers.MosekFormat", "kind" : "val"}, {"member" : "net.alasc.symdpoly.mosek.NativeMosekInstance#<init>", "error" : "unsupported entity"}, {"label" : "program", "tail" : ": Program", "member" : "net.alasc.symdpoly.mosek.NativeMosekInstance.program", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#program:net.alasc.symdpoly.sdp.Program", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/mosek\/NativeMosekInstance.html", "kind" : "class"}], "net.alasc.symdpoly.symmetries" : [{"name" : "net.alasc.symdpoly.symmetries.Actions", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html", "members_object" : [{"label" : "permutationAction", "tail" : "(canonicalElements: OrderedSet[A], cyclotomicOrder: Int)(arg0: Order[A], arg1: Phased[A], arg2: Group[G], action: Action[A, G]): PermutationAction[G]", "member" : "net.alasc.symdpoly.symmetries.Actions.permutationAction", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#permutationAction[A,G](canonicalElements:net.alasc.symdpoly.util.OrderedSet[A],cyclotomicOrder:Int)(implicitevidence$3:spire.algebra.Order[A],implicitevidence$4:net.alasc.symdpoly.algebra.Phased[A],implicitevidence$5:spire.algebra.Group[G],implicitaction:spire.algebra.Action[A,G]):net.alasc.algebra.PermutationAction[G]", "kind" : "def"}, {"label" : "permutationActionOnSet", "tail" : "(canonicalElements: OrderedSet[A])(arg0: Order[A], arg1: Group[G], action: Action[A, G]): PermutationAction[G]", "member" : "net.alasc.symdpoly.symmetries.Actions.permutationActionOnSet", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#permutationActionOnSet[A,G](canonicalElements:net.alasc.symdpoly.util.OrderedSet[A])(implicitevidence$1:spire.algebra.Order[A],implicitevidence$2:spire.algebra.Group[G],implicitaction:spire.algebra.Action[A,G]):net.alasc.algebra.PermutationAction[G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Actions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.symmetries.Configuration", "shortDescription" : "Configuration matrix that encodes a matrix invariant under a monomial group representation.", "object" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html", "members_class" : [{"label" : "fromMatrix", "tail" : "(mat: Mat[Cyclo]): Option[Vec[Cyclo]]", "member" : "net.alasc.symdpoly.symmetries.Configuration.fromMatrix", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#fromMatrix(mat:scalin.immutable.Mat[cyclo.Cyclo]):Option[scalin.immutable.Vec[cyclo.Cyclo]]", "kind" : "def"}, {"label" : "toMatrix", "tail" : "(values: Vec[Cyclo]): Mat[Cyclo]", "member" : "net.alasc.symdpoly.symmetries.Configuration.toMatrix", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#toMatrix(values:scalin.immutable.Vec[cyclo.Cyclo]):scalin.immutable.Mat[cyclo.Cyclo]", "kind" : "def"}, {"label" : "phase", "tail" : "(r: Int, c: Int): Phase", "member" : "net.alasc.symdpoly.symmetries.Configuration.phase", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#phase(r:Int,c:Int):net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "orbit", "tail" : "(r: Int, c: Int): Int", "member" : "net.alasc.symdpoly.symmetries.Configuration.orbit", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#orbit(r:Int,c:Int):Int", "kind" : "def"}, {"label" : "nextPtr", "tail" : "(ptr: Ptr[Configuration.this.type]): Ptr[Configuration.this.type]", "member" : "net.alasc.symdpoly.symmetries.Configuration.nextPtr", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#nextPtr(ptr:net.alasc.symdpoly.symmetries.Ptr[Configuration.this.type]):net.alasc.symdpoly.symmetries.Ptr[Configuration.this.type]", "kind" : "def"}, {"label" : "ptr", "tail" : "(r: Int, c: Int): Ptr[Configuration.this.type]", "member" : "net.alasc.symdpoly.symmetries.Configuration.ptr", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#ptr(r:Int,c:Int):net.alasc.symdpoly.symmetries.Ptr[Configuration.this.type]", "kind" : "def"}, {"label" : "orbitStart", "tail" : "(o: Int): Ptr[Configuration.this.type]", "member" : "net.alasc.symdpoly.symmetries.Configuration.orbitStart", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#orbitStart(o:Int):net.alasc.symdpoly.symmetries.Ptr[Configuration.this.type]", "kind" : "def"}, {"label" : "nOrbits", "tail" : "(): Int", "member" : "net.alasc.symdpoly.symmetries.Configuration.nOrbits", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#nOrbits:Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.symmetries.Configuration.toString", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#toString():String", "kind" : "def"}, {"member" : "net.alasc.symdpoly.symmetries.Configuration#<init>", "error" : "unsupported entity"}, {"label" : "n", "tail" : ": Int", "member" : "net.alasc.symdpoly.symmetries.Configuration.n", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#n:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(n: Int, generators: Seq[GenPerm]): Configuration", "member" : "net.alasc.symdpoly.symmetries.Configuration.apply", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#apply(n:Int,generators:Seq[net.alasc.symdpoly.math.GenPerm]):net.alasc.symdpoly.symmetries.Configuration", "kind" : "def"}, {"label" : "apply", "tail" : "(n: Int, grp: Grp[GenPerm]): Configuration", "member" : "net.alasc.symdpoly.symmetries.Configuration.apply", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#apply(n:Int,grp:net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]):net.alasc.symdpoly.symmetries.Configuration", "kind" : "def"}, {"label" : "trivial", "tail" : "(n: Int): Configuration", "member" : "net.alasc.symdpoly.symmetries.Configuration.trivial", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#trivial(n:Int):net.alasc.symdpoly.symmetries.Configuration", "kind" : "def"}, {"label" : "fromGrpMonomialRepresentation", "tail" : "(gm: GrpMonomialRepresentation[G]): Configuration", "member" : "net.alasc.symdpoly.symmetries.Configuration.fromGrpMonomialRepresentation", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#fromGrpMonomialRepresentation[G](gm:net.alasc.symdpoly.math.GrpMonomialRepresentation[G]):net.alasc.symdpoly.symmetries.Configuration", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Configuration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/symmetries\/Configuration.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.symmetries.Orbit", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html", "members_object" : [{"label" : "compatibleSubgroup", "tail" : "(elements: Iterable[A], grp: Grp[G], normalForm: (A) ⇒ A)(arg0: ClassTag[A], arg1: Order[A], arg2: GrpPermutationAction[G], action: Action[A, G]): Grp[G]", "member" : "net.alasc.symdpoly.symmetries.Orbit.compatibleSubgroup", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#compatibleSubgroup[A,G](elements:Iterable[A],grp:net.alasc.finite.Grp[G],normalForm:A=>A)(implicitevidence$4:scala.reflect.ClassTag[A],implicitevidence$5:spire.algebra.Order[A],implicitevidence$6:net.alasc.finite.GrpPermutationAction[G],implicitaction:spire.algebra.Action[A,G]):net.alasc.finite.Grp[G]", "kind" : "def"}, {"label" : "allElements", "tail" : "(elements: Iterable[A], generators: Seq[G], normalForm: (A) ⇒ A)(arg0: ClassTag[A], arg1: Order[A], action: Action[A, G]): OrderedSet[A]", "member" : "net.alasc.symdpoly.symmetries.Orbit.allElements", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#allElements[A,G](elements:Iterable[A],generators:Seq[G],normalForm:A=>A)(implicitevidence$2:scala.reflect.ClassTag[A],implicitevidence$3:spire.algebra.Order[A],implicitaction:spire.algebra.Action[A,G]):net.alasc.symdpoly.util.OrderedSet[A]", "kind" : "def"}, {"label" : "compatible", "tail" : "(elements: Iterable[A], generators: Seq[G], normalForm: (A) ⇒ A)(arg0: Order[A], action: Action[A, G]): Boolean", "member" : "net.alasc.symdpoly.symmetries.Orbit.compatible", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#compatible[A,G](elements:Iterable[A],generators:Seq[G],normalForm:A=>A)(implicitevidence$1:spire.algebra.Order[A],implicitaction:spire.algebra.Action[A,G]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Orbit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.symmetries.Ptr", "shortDescription" : "Pointer in a configuration that either represents:", "object" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html", "members_class" : [{"label" : "next", "tail" : "(C: Aux[C]): Ptr[C]", "member" : "net.alasc.symdpoly.symmetries.Ptr.next", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#next(implicitC:shapeless.Witness.Aux[C]):net.alasc.symdpoly.symmetries.Ptr[C]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.symmetries.Ptr.isEmpty", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "phase", "tail" : "(C: Aux[C]): Phase", "member" : "net.alasc.symdpoly.symmetries.Ptr.phase", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#phase(implicitC:shapeless.Witness.Aux[C]):net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "col", "tail" : "(C: Aux[C]): Int", "member" : "net.alasc.symdpoly.symmetries.Ptr.col", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#col(implicitC:shapeless.Witness.Aux[C]):Int", "kind" : "def"}, {"label" : "row", "tail" : "(C: Aux[C]): Int", "member" : "net.alasc.symdpoly.symmetries.Ptr.row", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#row(implicitC:shapeless.Witness.Aux[C]):Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.symmetries.Ptr#<init>", "error" : "unsupported entity"}, {"label" : "i", "tail" : ": Long", "member" : "net.alasc.symdpoly.symmetries.Ptr.i", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#i:Long", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "col", "tail" : "(i: Int): Int", "member" : "net.alasc.symdpoly.symmetries.Ptr.col", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#col(i:Int):Int", "kind" : "def"}, {"label" : "row", "tail" : "(i: Int): Int", "member" : "net.alasc.symdpoly.symmetries.Ptr.row", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#row(i:Int):Int", "kind" : "def"}, {"label" : "encode", "tail" : "(r: Int, c: Int): Int", "member" : "net.alasc.symdpoly.symmetries.Ptr.encode", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#encode(r:Int,c:Int):Int", "kind" : "def"}, {"label" : "empty", "tail" : "(): Ptr[C]", "member" : "net.alasc.symdpoly.symmetries.Ptr.empty", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#empty[C<:net.alasc.symdpoly.symmetries.ConfigurationwithSingleton]:net.alasc.symdpoly.symmetries.Ptr[C]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(r: Int, c: Int): Ptr[C]", "member" : "net.alasc.symdpoly.symmetries.Ptr.nonEmpty", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#nonEmpty[C<:net.alasc.symdpoly.symmetries.ConfigurationwithSingleton](r:Int,c:Int):net.alasc.symdpoly.symmetries.Ptr[C]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(i: Int): Ptr[C]", "member" : "net.alasc.symdpoly.symmetries.Ptr.nonEmpty", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#nonEmpty[C<:net.alasc.symdpoly.symmetries.ConfigurationwithSingleton](i:Int):net.alasc.symdpoly.symmetries.Ptr[C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/symmetries\/Ptr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/symmetries\/Ptr.html", "kind" : "class"}], "net.alasc.symdpoly.evaluation.components" : [{"name" : "net.alasc.symdpoly.evaluation.components.CyclicComponent", "shortDescription" : "", "members_case class" : [{"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.components.CyclicComponent.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#isSelfAdjoint:Boolean", "kind" : "def"}, {"label" : "inPlace", "tail" : "(mono: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.evaluation.components.CyclicComponent.inPlace", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#inPlace(mono:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.components.CyclicComponent#<init>", "error" : "unsupported entity"}, {"label" : "witnessM", "tail" : ": Aux[M]", "member" : "net.alasc.symdpoly.evaluation.components.CyclicComponent.witnessM", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#witnessM:shapeless.Witness.Aux[M]", "kind" : "implicit val"}, {"label" : "predicate", "tail" : ": OpPredicate[F]", "member" : "net.alasc.symdpoly.evaluation.components.CyclicComponent.predicate", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#predicate:net.alasc.symdpoly.evaluation.OpPredicate[F]", "kind" : "val"}, {"label" : "predicateIndex", "tail" : ": BitSet", "member" : "net.alasc.symdpoly.evaluation.components.PredicateComponent.predicateIndex", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#predicateIndex:scala.collection.immutable.BitSet", "kind" : "val"}, {"label" : "apply", "tail" : "(mono0: Mono[M, F]): Set[Mono[M, F]]", "member" : "net.alasc.symdpoly.evaluation.components.InPlaceComponent.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#apply(mono0:net.alasc.symdpoly.freebased.Mono[M,F]):Set[net.alasc.symdpoly.freebased.Mono[M,F]]", "kind" : "def"}, {"label" : "witnessF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.witnessF", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#witnessF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.F", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#F:F", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Component.M", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#M:M", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/evaluation\/components\/CyclicComponent.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.evaluation.components.InPlaceComponent", "shortDescription" : "", "members_class" : [{"label" : "apply", "tail" : "(mono0: Mono[M, F]): Set[Mono[M, F]]", "member" : "net.alasc.symdpoly.evaluation.components.InPlaceComponent.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#apply(mono0:net.alasc.symdpoly.freebased.Mono[M,F]):Set[net.alasc.symdpoly.freebased.Mono[M,F]]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.components.InPlaceComponent#<init>", "error" : "unsupported entity"}, {"label" : "witnessF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.witnessF", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#witnessF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.F", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#F:F", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Component.M", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#M:M", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inPlace", "tail" : "(mono: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.evaluation.components.InPlaceComponent.inPlace", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#inPlace(mono:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "abstract def"}, {"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.Component.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#isSelfAdjoint:Boolean", "kind" : "abstract def"}, {"label" : "witnessM", "tail" : "(): Aux[M]", "member" : "net.alasc.symdpoly.evaluation.Component.witnessM", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html#witnessM:shapeless.Witness.Aux[M]", "kind" : "implicit abstract def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/components\/InPlaceComponent.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.components.PredicateComponent", "shortDescription" : "", "members_class" : [{"label" : "predicateIndex", "tail" : ": BitSet", "member" : "net.alasc.symdpoly.evaluation.components.PredicateComponent.predicateIndex", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#predicateIndex:scala.collection.immutable.BitSet", "kind" : "val"}, {"member" : "net.alasc.symdpoly.evaluation.components.PredicateComponent#<init>", "error" : "unsupported entity"}, {"label" : "apply", "tail" : "(mono0: Mono[M, F]): Set[Mono[M, F]]", "member" : "net.alasc.symdpoly.evaluation.components.InPlaceComponent.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#apply(mono0:net.alasc.symdpoly.freebased.Mono[M,F]):Set[net.alasc.symdpoly.freebased.Mono[M,F]]", "kind" : "def"}, {"label" : "witnessF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.witnessF", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#witnessF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.F", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#F:F", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Component.M", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#M:M", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "predicate", "tail" : "(): OpPredicate[F]", "member" : "net.alasc.symdpoly.evaluation.components.PredicateComponent.predicate", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#predicate:net.alasc.symdpoly.evaluation.OpPredicate[F]", "kind" : "abstract def"}, {"label" : "inPlace", "tail" : "(mono: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.evaluation.components.InPlaceComponent.inPlace", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#inPlace(mono:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "abstract def"}, {"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.Component.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#isSelfAdjoint:Boolean", "kind" : "abstract def"}, {"label" : "witnessM", "tail" : "(): Aux[M]", "member" : "net.alasc.symdpoly.evaluation.Component.witnessM", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html#witnessM:shapeless.Witness.Aux[M]", "kind" : "implicit abstract def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/components\/PredicateComponent.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.components.TransposeComponent", "shortDescription" : "", "members_case class" : [{"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.components.TransposeComponent.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#isSelfAdjoint:Boolean", "kind" : "def"}, {"label" : "inPlace", "tail" : "(mono: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.evaluation.components.TransposeComponent.inPlace", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#inPlace(mono:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.components.TransposeComponent#<init>", "error" : "unsupported entity"}, {"label" : "witnessM", "tail" : ": Aux[M]", "member" : "net.alasc.symdpoly.evaluation.components.TransposeComponent.witnessM", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#witnessM:shapeless.Witness.Aux[M]", "kind" : "implicit val"}, {"label" : "predicate", "tail" : ": OpPredicate[F]", "member" : "net.alasc.symdpoly.evaluation.components.TransposeComponent.predicate", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#predicate:net.alasc.symdpoly.evaluation.OpPredicate[F]", "kind" : "val"}, {"label" : "predicateIndex", "tail" : ": BitSet", "member" : "net.alasc.symdpoly.evaluation.components.PredicateComponent.predicateIndex", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#predicateIndex:scala.collection.immutable.BitSet", "kind" : "val"}, {"label" : "apply", "tail" : "(mono0: Mono[M, F]): Set[Mono[M, F]]", "member" : "net.alasc.symdpoly.evaluation.components.InPlaceComponent.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#apply(mono0:net.alasc.symdpoly.freebased.Mono[M,F]):Set[net.alasc.symdpoly.freebased.Mono[M,F]]", "kind" : "def"}, {"label" : "witnessF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.witnessF", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#witnessF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.F", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#F:F", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Component.M", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#M:M", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/evaluation\/components\/TransposeComponent.html", "kind" : "case class"}], "net.alasc.symdpoly.freebased" : [{"name" : "net.alasc.symdpoly.freebased.Mono", "shortDescription" : "An element of a MonoidDef, which represents a monomial in a polynomial ring.", "object" : "net\/alasc\/symdpoly\/freebased\/Mono$.html", "members_class" : [{"label" : "toPoly", "tail" : "(): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.Mono.toPoly", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#toPoly:net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "mutableCopy", "tail" : "(ev: =:=[F, M]): MutableWord[F]", "member" : "net.alasc.symdpoly.freebased.Mono.mutableCopy", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#mutableCopy(implicitev:F=:=M):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "phase", "tail" : "(ev: =:=[F, M]): Phase", "member" : "net.alasc.symdpoly.freebased.Mono.phase", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#phase(implicitev:F=:=M):net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int)(ev: =:=[F, M]): F.Op", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#apply(i:Int)(implicitev:F=:=M):F#Op", "kind" : "def"}, {"label" : "length", "tail" : "(ev: =:=[F, M]): Int", "member" : "net.alasc.symdpoly.freebased.Mono.length", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#length(implicitev:F=:=M):Int", "kind" : "def"}, {"label" : "pow", "tail" : "(rhs: Int)(mm: MultiplicativeMonoid[Mono[M, F]]): Mono[M, F]", "member" : "net.alasc.symdpoly.freebased.Mono.pow", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#pow(rhs:Int)(implicitmm:spire.algebra.MultiplicativeMonoid[net.alasc.symdpoly.freebased.Mono[M,F]]):net.alasc.symdpoly.freebased.Mono[M,F]", "kind" : "def"}, {"label" : "adjoint", "tail" : "(inv: Involution[Mono[M, F]]): Mono[M, F]", "member" : "net.alasc.symdpoly.freebased.Mono.adjoint", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#adjoint(implicitinv:spire.algebra.Involution[net.alasc.symdpoly.freebased.Mono[M,F]]):net.alasc.symdpoly.freebased.Mono[M,F]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Mono[M, F])(mm: MultiplicativeMonoid[Mono[M, F]]): Mono[M, F]", "member" : "net.alasc.symdpoly.freebased.Mono.*", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#*(rhs:net.alasc.symdpoly.freebased.Mono[M,F])(implicitmm:spire.algebra.MultiplicativeMonoid[net.alasc.symdpoly.freebased.Mono[M,F]]):net.alasc.symdpoly.freebased.Mono[M,F]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Phase)(phased: Phased[Mono[M, F]]): Mono[M, F]", "member" : "net.alasc.symdpoly.freebased.Mono.*", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#*(rhs:net.alasc.symdpoly.math.Phase)(implicitphased:net.alasc.symdpoly.algebra.Phased[net.alasc.symdpoly.freebased.Mono[M,F]]):net.alasc.symdpoly.freebased.Mono[M,F]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(phased: Phased[Mono[M, F]]): Mono[M, F]", "member" : "net.alasc.symdpoly.freebased.Mono.unary_-", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#unary_-(implicitphased:net.alasc.symdpoly.algebra.Phased[net.alasc.symdpoly.freebased.Mono[M,F]]):net.alasc.symdpoly.freebased.Mono[M,F]", "kind" : "def"}, {"label" : "isOne", "tail" : "(mm: MultiplicativeMonoid[Mono[M, F]], equ: Eq[Mono[M, F]]): Boolean", "member" : "net.alasc.symdpoly.freebased.Mono.isOne", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#isOne(implicitmm:spire.algebra.MultiplicativeMonoid[net.alasc.symdpoly.freebased.Mono[M,F]],implicitequ:cats.kernel.Eq[net.alasc.symdpoly.freebased.Mono[M,F]]):Boolean", "kind" : "def"}, {"label" : "isZero", "tail" : "(mb: MultiplicativeBinoid[Mono[M, F]], equ: Eq[Mono[M, F]]): Boolean", "member" : "net.alasc.symdpoly.freebased.Mono.isZero", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#isZero(implicitmb:net.alasc.symdpoly.algebra.MultiplicativeBinoid[net.alasc.symdpoly.freebased.Mono[M,F]],implicitequ:cats.kernel.Eq[net.alasc.symdpoly.freebased.Mono[M,F]]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.freebased.Mono.hashCode", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.freebased.Mono.equals", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.freebased.Mono.toString", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#toString():String", "kind" : "def"}, {"label" : "degree", "tail" : "(): Int", "member" : "net.alasc.symdpoly.freebased.Mono.degree", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#degree:Int", "kind" : "def"}, {"label" : "normalForm", "tail" : "(): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.normalForm", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#normalForm:net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "witnessF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.freebased.Mono.witnessF", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#witnessF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.freebased.Mono.F", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#F:F", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.freebased.Mono.M", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#M:M", "kind" : "def"}, {"label" : "toMono", "tail" : "(): Mono[M, F]", "member" : "net.alasc.symdpoly.freebased.Mono.toMono", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#toMono:net.alasc.symdpoly.freebased.Mono[M,F]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.freebased.Mono#<init>", "error" : "unsupported entity"}, {"label" : "data", "tail" : ": MutableWord[F]", "member" : "net.alasc.symdpoly.freebased.Mono.data", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#data:net.alasc.symdpoly.free.MutableWord[F]", "kind" : "val"}, {"label" : "\/", "tail" : "(rhs: Phase)(d: DummyImplicit): generic.Mono[M]", "member" : "net.alasc.symdpoly.generic.Mono.\/", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#\/(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):net.alasc.symdpoly.generic.Mono[M]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Phase)(d: DummyImplicit): generic.Mono[M]", "member" : "net.alasc.symdpoly.generic.Mono.*", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#*(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):net.alasc.symdpoly.generic.Mono[M]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: MonoLike[M]): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.*", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#*(rhs:net.alasc.symdpoly.generic.MonoLike[M]):M#MonoType", "kind" : "def"}, {"label" : "pow", "tail" : "(rhs: Int): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.pow", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#pow(rhs:Int):M#MonoType", "kind" : "def"}, {"label" : "**", "tail" : "(rhs: Int): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.**", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#**(rhs:Int):M#MonoType", "kind" : "def"}, {"label" : "constant", "tail" : "(c: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.constant", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#constant(c:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#\/(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#\/(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#\/(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#*(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#*(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#*(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#-(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#-(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#-(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#-(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#+(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#+(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#+(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#+(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#-(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#+(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: M.PolyType): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#*(rhs:M#PolyType):M#PolyType", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.generic.PolyLike.isZero", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#isZero:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Mono.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "FreeBasedMonoPhased", "tail" : "", "member" : "net.alasc.symdpoly.freebased.Mono.FreeBasedMonoPhased", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#FreeBasedMonoPhased[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsPhased[net.alasc.symdpoly.freebased.Mono[M,F]]", "kind" : "final class"}, {"label" : "FreeBasedMonoInstances", "tail" : "", "member" : "net.alasc.symdpoly.freebased.Mono.FreeBasedMonoInstances", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#FreeBasedMonoInstances[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsMultiplicativeBinoid[net.alasc.symdpoly.freebased.Mono[M,F]]withInvolution[net.alasc.symdpoly.freebased.Mono[M,F]]withspire.algebra.Order[net.alasc.symdpoly.freebased.Mono[M,F]]", "kind" : "final class"}, {"label" : "FreeBasedMonoGenPermAction", "tail" : "", "member" : "net.alasc.symdpoly.freebased.Mono.FreeBasedMonoGenPermAction", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#FreeBasedMonoGenPermAction[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsAction[net.alasc.symdpoly.freebased.Mono[M,F],net.alasc.symdpoly.math.GenPerm]", "kind" : "final class"}, {"label" : "phased", "tail" : "(wM: Aux[M]): Phased[Mono[M, F]]", "member" : "net.alasc.symdpoly.freebased.Mono.phased", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#phased[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.algebra.Phased[net.alasc.symdpoly.freebased.Mono[M,F]]", "kind" : "implicit def"}, {"label" : "genPermAction", "tail" : "(wM: Aux[M]): Action[Mono[M, F], GenPerm]", "member" : "net.alasc.symdpoly.freebased.Mono.genPermAction", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#genPermAction[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Action[net.alasc.symdpoly.freebased.Mono[M,F],net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit def"}, {"label" : "order", "tail" : "(wM: Aux[M]): Order[Mono[M, F]]", "member" : "net.alasc.symdpoly.freebased.Mono.order", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#order[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Order[net.alasc.symdpoly.freebased.Mono[M,F]]", "kind" : "implicit def"}, {"label" : "multiplicativeBinoid", "tail" : "(wM: Aux[M]): MultiplicativeBinoid[Mono[M, F]]", "member" : "net.alasc.symdpoly.freebased.Mono.multiplicativeBinoid", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#multiplicativeBinoid[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.algebra.MultiplicativeBinoid[net.alasc.symdpoly.freebased.Mono[M,F]]", "kind" : "implicit def"}, {"label" : "involution", "tail" : "(wM: Aux[M]): Involution[Mono[M, F]]", "member" : "net.alasc.symdpoly.freebased.Mono.involution", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#involution[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Involution[net.alasc.symdpoly.freebased.Mono[M,F]]", "kind" : "implicit def"}, {"label" : "predicate", "tail" : "(): Predicate[Mono[M, F]]", "member" : "net.alasc.symdpoly.freebased.Mono.predicate", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#predicate[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]:org.typelevel.discipline.Predicate[net.alasc.symdpoly.freebased.Mono[M,F]]", "kind" : "implicit def"}, {"label" : "fromOp", "tail" : "(op: Mono.fromOp.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.fromOp", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#fromOp[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](op:F#Op)(implicitevidence$19:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "implicit def"}, {"label" : "fromSeq", "tail" : "(phase: Phase, ops: Seq[Mono.fromSeq.F.Op])(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.fromSeq", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#fromSeq[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.math.Phase,ops:Seq[F#Op])(implicitevidence$18:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "fromSeq", "tail" : "(ops: Seq[Mono.fromSeq.F.Op])(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.fromSeq", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#fromSeq[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](ops:Seq[F#Op])(implicitevidence$17:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, op1: Mono.apply.F.Op, op2: Mono.apply.F.Op, op3: Mono.apply.F.Op, op4: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.math.Phase,op1:F#Op,op2:F#Op,op3:F#Op,op4:F#Op)(implicitevidence$16:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, op1: Mono.apply.F.Op, op2: Mono.apply.F.Op, op3: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.math.Phase,op1:F#Op,op2:F#Op,op3:F#Op)(implicitevidence$15:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, op1: Mono.apply.F.Op, op2: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.math.Phase,op1:F#Op,op2:F#Op)(implicitevidence$14:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, op1: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.math.Phase,op1:F#Op)(implicitevidence$13:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(op1: Mono.apply.F.Op, op2: Mono.apply.F.Op, op3: Mono.apply.F.Op, op4: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](op1:F#Op,op2:F#Op,op3:F#Op,op4:F#Op)(implicitevidence$12:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(op1: Mono.apply.F.Op, op2: Mono.apply.F.Op, op3: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](op1:F#Op,op2:F#Op,op3:F#Op)(implicitevidence$11:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(op1: Mono.apply.F.Op, op2: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](op1:F#Op,op2:F#Op)(implicitevidence$10:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(op1: Mono.apply.F.Op)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](op1:F#Op)(implicitevidence$9:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phasedOp: PhasedOp[F])(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phasedOp:net.alasc.symdpoly.free.PhasedOp[F])(implicitevidence$8:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase)(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.math.Phase)(implicitevidence$7:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "apply", "tail" : "()(arg0: Aux[F]): Mono[F, F]", "member" : "net.alasc.symdpoly.freebased.Mono.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]()(implicitevidence$6:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "one", "tail" : "(arg0: Aux[M], arg1: Aux[F]): Mono[M, F]", "member" : "net.alasc.symdpoly.freebased.Mono.one", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#one[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitevidence$4:shapeless.Witness.Aux[M],implicitevidence$5:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[M,F]", "kind" : "def"}, {"label" : "zero", "tail" : "(arg0: Aux[M], arg1: Aux[F]): Mono[M, F]", "member" : "net.alasc.symdpoly.freebased.Mono.zero", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#zero[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitevidence$2:shapeless.Witness.Aux[M],implicitevidence$3:shapeless.Witness.Aux[F]):net.alasc.symdpoly.freebased.Mono[M,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Mono$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/freebased\/Mono.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.freebased.MonoidDef", "shortDescription" : "Monoid whose elements are represented by normal forms in a free monoid.", "object" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html", "members_class" : [{"label" : "permutationClassTag", "tail" : ": ClassTag[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationClassTag", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#permutationClassTag:scala.reflect.ClassTag[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationMonoAction", "tail" : ": Action[MonoType, PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationMonoAction", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#permutationMonoAction:spire.algebra.Action[MonoidDef.this.MonoType,MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationFaithfulPermutationActionBuilder", "tail" : ": FaithfulPermutationActionBuilder[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationFaithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#permutationFaithfulPermutationActionBuilder:net.alasc.finite.FaithfulPermutationActionBuilder[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationGroup", "tail" : ": Group[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationGroup", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#permutationGroup:spire.algebra.Group[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationEq", "tail" : ": Eq[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationEq", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#permutationEq:spire.algebra.Eq[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "Permutation", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.Permutation", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#Permutation", "kind" : "object"}, {"label" : "PermutationType", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.PermutationType", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#PermutationType=net.alasc.symdpoly.freebased.Permutation[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "type"}, {"label" : "constant", "tail" : "(c: Cyclo): PolyType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#constant(c:cyclo.Cyclo):MonoidDef.this.PolyType", "kind" : "def"}, {"label" : "constant", "tail" : "(r: Rational): PolyType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#constant(r:spire.math.Rational):MonoidDef.this.PolyType", "kind" : "def"}, {"label" : "constant", "tail" : "(i: Int): PolyType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#constant(i:Int):MonoidDef.this.PolyType", "kind" : "def"}, {"label" : "polyClassTag", "tail" : ": ClassTag[PolyType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyClassTag", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#polyClassTag:scala.reflect.ClassTag[MonoidDef.this.PolyType]", "kind" : "val"}, {"label" : "polyGenPermAction", "tail" : ": Action[Poly[MonoidDef.this.type, Free], GenPerm]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyGenPermAction", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#polyGenPermAction:spire.algebra.Action[net.alasc.symdpoly.freebased.Poly[MonoidDef.this.type,MonoidDef.this.Free],net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "polyEq", "tail" : "(): Eq[PolyType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyEq", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#polyEq:spire.algebra.Eq[MonoidDef.this.PolyType]", "kind" : "def"}, {"label" : "polyInvolution", "tail" : "(): Involution[PolyType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyInvolution", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#polyInvolution:spire.algebra.Involution[MonoidDef.this.PolyType]", "kind" : "def"}, {"label" : "polyAssociativeAlgebra", "tail" : "(): FieldAssociativeAlgebra[PolyType, Cyclo]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyAssociativeAlgebra", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#polyAssociativeAlgebra:spire.algebra.FieldAssociativeAlgebra[MonoidDef.this.PolyType,cyclo.Cyclo]", "kind" : "def"}, {"label" : "monomialToPolynomial", "tail" : "(m: Mono[MonoidDef.this.type, Free]): Poly[MonoidDef.this.type, Free]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monomialToPolynomial", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#monomialToPolynomial(m:net.alasc.symdpoly.freebased.Mono[MonoidDef.this.type,MonoidDef.this.Free]):net.alasc.symdpoly.freebased.Poly[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "def"}, {"label" : "PolyType", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.PolyType", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#PolyType=net.alasc.symdpoly.freebased.Poly[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "type"}, {"label" : "one", "tail" : ": MonoType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.one", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#one:MonoidDef.this.MonoType", "kind" : "val"}, {"label" : "zero", "tail" : ": MonoType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.zero", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#zero:MonoidDef.this.MonoType", "kind" : "val"}, {"label" : "monoClassTag", "tail" : ": ClassTag[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoClassTag", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#monoClassTag:scala.reflect.ClassTag[MonoidDef.this.MonoType]", "kind" : "val"}, {"label" : "monoGenPermAction", "tail" : ": Action[MonoType, GenPerm]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoGenPermAction", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#monoGenPermAction:spire.algebra.Action[MonoidDef.this.MonoType,net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "monoPhased", "tail" : ": Phased[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoPhased", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#monoPhased:net.alasc.symdpoly.algebra.Phased[MonoidDef.this.MonoType]", "kind" : "val"}, {"label" : "monoOrder", "tail" : "(): Order[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoOrder", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#monoOrder:spire.algebra.Order[MonoidDef.this.MonoType]", "kind" : "def"}, {"label" : "monoInvolution", "tail" : "(): Involution[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoInvolution", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#monoInvolution:spire.algebra.Involution[MonoidDef.this.MonoType]", "kind" : "def"}, {"label" : "monoMultiplicativeBinoid", "tail" : "(): MultiplicativeBinoid[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoMultiplicativeBinoid", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#monoMultiplicativeBinoid:net.alasc.symdpoly.algebra.MultiplicativeBinoid[MonoidDef.this.MonoType]", "kind" : "def"}, {"label" : "quotient", "tail" : "(gset: GSet[Free]): GSet[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#quotient(gset:net.alasc.symdpoly.GSet[MonoidDef.this.Free]):net.alasc.symdpoly.GSet[MonoidDef.this.type]", "kind" : "def"}, {"label" : "MonoType", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.MonoType", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#MonoType=net.alasc.symdpoly.freebased.Mono[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "type"}, {"label" : "witnessFree", "tail" : "(): Aux[Free]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.witnessFree", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#witnessFree:shapeless.Witness.Aux[MonoidDef.this.Free]", "kind" : "implicit def"}, {"member" : "net.alasc.symdpoly.freebased.MonoidDef#<init>", "error" : "unsupported entity"}, {"label" : "symmetricEvaluator", "tail" : "(symmetryGroup0: Grp[PermutationType], equivalence0: Equivalence[MonoidDef.this.type]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.symmetricEvaluator", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#symmetricEvaluator(symmetryGroup0:net.alasc.finite.Grp[MonoidDef.this.PermutationType],equivalence0:net.alasc.symdpoly.evaluation.Equivalence[MonoidDef.this.type]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "symmetricEvaluator", "tail" : "(symmetryGroup: Grp[PermutationType]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.symmetricEvaluator", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#symmetricEvaluator(symmetryGroup:net.alasc.finite.Grp[MonoidDef.this.PermutationType]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "evaluator", "tail" : "(): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.evaluator", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#evaluator():net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "evaluator", "tail" : "(equivalence: Equivalence[MonoidDef.this.type]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.evaluator", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#evaluator(equivalence:net.alasc.symdpoly.evaluation.Equivalence[MonoidDef.this.type]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "impWitness", "tail" : "(): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.impWitness", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#impWitness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "implicit def"}, {"label" : "witness", "tail" : ": Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.witness", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#witness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "symmetryGroup", "tail" : "(): Grp[Permutation[MonoidDef.this.type, Free]]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.symmetryGroup", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#symmetryGroup:net.alasc.finite.Grp[net.alasc.symdpoly.freebased.Permutation[MonoidDef.this.type,MonoidDef.this.Free]]", "kind" : "abstract def"}, {"label" : "quotient", "tail" : "(poly: Poly[Free, Free]): Poly[MonoidDef.this.type, Free]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#quotient(poly:net.alasc.symdpoly.freebased.Poly[MonoidDef.this.Free,MonoidDef.this.Free]):net.alasc.symdpoly.freebased.Poly[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "abstract def"}, {"label" : "quotient", "tail" : "(word: Mono[Free, Free]): MonoType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#quotient(word:net.alasc.symdpoly.freebased.Mono[MonoidDef.this.Free,MonoidDef.this.Free]):MonoidDef.this.MonoType", "kind" : "abstract def"}, {"label" : "inPlaceNormalForm", "tail" : "(word: MutableWord[Free], start: Int): Boolean", "member" : "net.alasc.symdpoly.freebased.MonoidDef.inPlaceNormalForm", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#inPlaceNormalForm(word:net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free],start:Int):Boolean", "kind" : "abstract def"}, {"label" : "Free", "tail" : "(): Free", "member" : "net.alasc.symdpoly.freebased.MonoidDef.Free", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#Free:MonoidDef.this.Free", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.freebased.MonoidDef.Free", "error" : "unsupported entity"}, {"label" : "cyclotomicOrder", "tail" : "(): Int", "member" : "net.alasc.symdpoly.generic.MonoidDef.cyclotomicOrder", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#cyclotomicOrder:Int", "kind" : "abstract def"}], "members_object" : [{"label" : "Aux", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.Aux", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#Aux[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]=net.alasc.symdpoly.freebased.MonoidDef{typeFree=F}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.freebased.Permutation", "shortDescription" : "Permutation of the operator variables compatible with the structure of a monoid structure M.", "object" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html", "members_class" : [{"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.freebased.Permutation.equals", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.freebased.Permutation.hashCode", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#hashCode():Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.freebased.Permutation.toString", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#toString():String", "kind" : "def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.freebased.Permutation.F", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#F:F", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.freebased.Permutation.M", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#M:M", "kind" : "def"}, {"member" : "net.alasc.symdpoly.freebased.Permutation#<init>", "error" : "unsupported entity"}, {"label" : "genPerm", "tail" : ": GenPerm", "member" : "net.alasc.symdpoly.freebased.Permutation.genPerm", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#genPerm:net.alasc.symdpoly.math.GenPerm", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "monoAction", "tail" : "(arg0: Aux[M]): Action[Mono[M, F], Permutation[M, F]]", "member" : "net.alasc.symdpoly.freebased.Permutation.monoAction", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#monoAction[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitevidence$6:shapeless.Witness.Aux[M]):spire.algebra.Action[net.alasc.symdpoly.freebased.Mono[M,F],net.alasc.symdpoly.freebased.Permutation[M,F]]", "kind" : "implicit def"}, {"label" : "faithfulPermutationActionBuilder", "tail" : "(arg0: Aux[M]): FaithfulPermutationActionBuilder[Permutation[M, F]]", "member" : "net.alasc.symdpoly.freebased.Permutation.faithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#faithfulPermutationActionBuilder[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitevidence$5:shapeless.Witness.Aux[M]):net.alasc.finite.FaithfulPermutationActionBuilder[net.alasc.symdpoly.freebased.Permutation[M,F]]", "kind" : "implicit def"}, {"label" : "group", "tail" : "(arg0: Aux[M]): Group[Permutation[M, F]]", "member" : "net.alasc.symdpoly.freebased.Permutation.group", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#group[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitevidence$4:shapeless.Witness.Aux[M]):spire.algebra.Group[net.alasc.symdpoly.freebased.Permutation[M,F]]", "kind" : "implicit def"}, {"label" : "equ", "tail" : "(arg0: Aux[M]): Eq[Permutation[M, F]]", "member" : "net.alasc.symdpoly.freebased.Permutation.equ", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#equ[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitevidence$3:shapeless.Witness.Aux[M]):spire.algebra.Eq[net.alasc.symdpoly.freebased.Permutation[M,F]]", "kind" : "implicit def"}, {"label" : "prettyPrintGenPerm", "tail" : "(opAction: GenPerm, F: free.MonoidDef): String", "member" : "net.alasc.symdpoly.freebased.Permutation.prettyPrintGenPerm", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#prettyPrintGenPerm(opAction:net.alasc.symdpoly.math.GenPerm,F:net.alasc.symdpoly.free.MonoidDef):String", "kind" : "def"}, {"label" : "applyNC", "tail" : "(genPerm: GenPerm)(arg0: Aux[M]): Permutation[M, F]", "member" : "net.alasc.symdpoly.freebased.Permutation.applyNC", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#applyNC[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](genPerm:net.alasc.symdpoly.math.GenPerm)(implicitevidence$2:shapeless.Witness.Aux[M]):net.alasc.symdpoly.freebased.Permutation[M,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Permutation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/freebased\/Permutation.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.freebased.PermutationMonoAction", "shortDescription" : "", "members_class" : [{"label" : "actr", "tail" : "(mono: Mono[M, F], g: Permutation[M, F]): Mono[M, F]", "member" : "net.alasc.symdpoly.freebased.PermutationMonoAction.actr", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#actr(mono:net.alasc.symdpoly.freebased.Mono[M,F],g:net.alasc.symdpoly.freebased.Permutation[M,F]):net.alasc.symdpoly.freebased.Mono[M,F]", "kind" : "def"}, {"label" : "actl", "tail" : "(g: Permutation[M, F], mono: Mono[M, F]): Mono[M, F]", "member" : "net.alasc.symdpoly.freebased.PermutationMonoAction.actl", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#actl(g:net.alasc.symdpoly.freebased.Permutation[M,F],mono:net.alasc.symdpoly.freebased.Mono[M,F]):net.alasc.symdpoly.freebased.Mono[M,F]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.freebased.PermutationMonoAction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/freebased\/PermutationMonoAction.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.freebased.Poly", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/freebased\/Poly$.html", "members_class" : [{"label" : "adjoint", "tail" : "(): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.Poly.adjoint", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#adjoint:net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.freebased.Poly.hashCode", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#hashCode():Int", "kind" : "def"}, {"label" : "hash", "tail" : ": Int", "member" : "net.alasc.symdpoly.freebased.Poly.hash", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#hash:Int", "kind" : "lazy val"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.freebased.Poly.equals", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.freebased.Poly.toString", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#toString():String", "kind" : "def"}, {"label" : "string", "tail" : "(leftBracket: String, rightBracket: String): String", "member" : "net.alasc.symdpoly.freebased.Poly.string", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#string(leftBracket:String,rightBracket:String):String", "kind" : "def"}, {"label" : "mutableCopy", "tail" : "(ev: =:=[M, F]): MutablePoly[F]", "member" : "net.alasc.symdpoly.freebased.Poly.mutableCopy", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#mutableCopy(implicitev:M=:=F):net.alasc.symdpoly.free.MutablePoly[F]", "kind" : "def"}, {"label" : "degree", "tail" : "(): Int", "member" : "net.alasc.symdpoly.freebased.Poly.degree", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#degree:Int", "kind" : "def"}, {"label" : "coeff", "tail" : "(mono: Mono[M, F]): Cyclo", "member" : "net.alasc.symdpoly.freebased.Poly.coeff", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#coeff(mono:net.alasc.symdpoly.freebased.Mono[M,F]):cyclo.Cyclo", "kind" : "def"}, {"label" : "coeff", "tail" : "(i: Int): Cyclo", "member" : "net.alasc.symdpoly.freebased.Poly.coeff", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#coeff(i:Int):cyclo.Cyclo", "kind" : "def"}, {"label" : "monomial", "tail" : "(i: Int): Mono[M, F]", "member" : "net.alasc.symdpoly.freebased.Poly.monomial", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#monomial(i:Int):net.alasc.symdpoly.freebased.Mono[M,F]", "kind" : "def"}, {"label" : "monomialNormalForm", "tail" : "(i: Int): MutableWord[F]", "member" : "net.alasc.symdpoly.freebased.Poly.monomialNormalForm", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#monomialNormalForm(i:Int):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "nTerms", "tail" : "(): Int", "member" : "net.alasc.symdpoly.freebased.Poly.nTerms", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#nTerms:Int", "kind" : "def"}, {"label" : "normalForm", "tail" : "(): Poly[F, F]", "member" : "net.alasc.symdpoly.freebased.Poly.normalForm", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#normalForm:net.alasc.symdpoly.freebased.Poly[F,F]", "kind" : "def"}, {"label" : "wF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.freebased.Poly.wF", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.freebased.Poly.M", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#M:M", "kind" : "def"}, {"member" : "net.alasc.symdpoly.freebased.Poly#<init>", "error" : "unsupported entity"}, {"label" : "values", "tail" : ": Array[Cyclo]", "member" : "net.alasc.symdpoly.freebased.Poly.values", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#values:Array[cyclo.Cyclo]", "kind" : "val"}, {"label" : "keys", "tail" : ": Array[MutableWord[F]]", "member" : "net.alasc.symdpoly.freebased.Poly.keys", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#keys:Array[net.alasc.symdpoly.free.MutableWord[F]]", "kind" : "val"}, {"label" : "\/", "tail" : "(rhs: Phase)(d: DummyImplicit): generic.Poly[M]", "member" : "net.alasc.symdpoly.generic.Poly.\/", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#\/(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):net.alasc.symdpoly.generic.Poly[M]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Phase)(d: DummyImplicit): generic.Poly[M]", "member" : "net.alasc.symdpoly.generic.Poly.*", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#*(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):net.alasc.symdpoly.generic.Poly[M]", "kind" : "def"}, {"label" : "invariantSubgroupOf", "tail" : "(grp: Grp[M.PermutationType]): Grp[M.PermutationType]", "member" : "net.alasc.symdpoly.generic.Poly.invariantSubgroupOf", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#invariantSubgroupOf(grp:net.alasc.finite.Grp[M#PermutationType]):net.alasc.finite.Grp[M#PermutationType]", "kind" : "def"}, {"label" : "toPoly", "tail" : "(): M.PolyType", "member" : "net.alasc.symdpoly.generic.Poly.toPoly", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#toPoly:M#PolyType", "kind" : "def"}, {"label" : "constant", "tail" : "(c: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.constant", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#constant(c:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#\/(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#\/(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#\/(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#*(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#*(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#*(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#-(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#-(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#-(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#-(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#+(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#+(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#+(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#+(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#-(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#+(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: M.PolyType): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#*(rhs:M#PolyType):M#PolyType", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.generic.PolyLike.isZero", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#isZero:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Poly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "PolyGenPermAction", "tail" : "", "member" : "net.alasc.symdpoly.freebased.Poly.PolyGenPermAction", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#PolyGenPermAction[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsAction[net.alasc.symdpoly.freebased.Poly[M,F],net.alasc.symdpoly.math.GenPerm]", "kind" : "final class"}, {"label" : "genPermAction", "tail" : "(wM: Aux[M]): Action[Poly[M, F], GenPerm]", "member" : "net.alasc.symdpoly.freebased.Poly.genPermAction", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#genPermAction[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Action[net.alasc.symdpoly.freebased.Poly[M,F],net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit def"}, {"label" : "equ", "tail" : "(wM: Aux[M]): Eq[Poly[M, F]]", "member" : "net.alasc.symdpoly.freebased.Poly.equ", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#equ[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Eq[net.alasc.symdpoly.freebased.Poly[M,F]]", "kind" : "implicit def"}, {"label" : "involution", "tail" : "(wM: Aux[M]): Involution[Poly[M, F]]", "member" : "net.alasc.symdpoly.freebased.Poly.involution", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#involution[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.Involution[net.alasc.symdpoly.freebased.Poly[M,F]]", "kind" : "implicit def"}, {"label" : "associativeAlgebra", "tail" : "(wM: Aux[M]): FieldAssociativeAlgebra[Poly[M, F], Cyclo]", "member" : "net.alasc.symdpoly.freebased.Poly.associativeAlgebra", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#associativeAlgebra[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):spire.algebra.FieldAssociativeAlgebra[net.alasc.symdpoly.freebased.Poly[M,F],cyclo.Cyclo]", "kind" : "implicit def"}, {"label" : "predicate", "tail" : "(): Predicate[Poly[M, F]]", "member" : "net.alasc.symdpoly.freebased.Poly.predicate", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#predicate[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]:org.typelevel.discipline.Predicate[net.alasc.symdpoly.freebased.Poly[M,F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(terms: (Mono[M, F], Cyclo)*)(wM: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.Poly.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#apply[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](terms:(net.alasc.symdpoly.freebased.Mono[M,F],cyclo.Cyclo)*)(implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: Mono[M, F])(arg0: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.Poly.apply", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#apply[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](mono:net.alasc.symdpoly.freebased.Mono[M,F])(implicitevidence$4:shapeless.Witness.Aux[M]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "single", "tail" : "(mono: Mono[M, F], coeff: Cyclo)(arg0: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.Poly.single", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#single[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](mono:net.alasc.symdpoly.freebased.Mono[M,F],coeff:cyclo.Cyclo)(implicitevidence$3:shapeless.Witness.Aux[M]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "constant", "tail" : "(cyclo: Cyclo)(wM: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.Poly.constant", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#constant[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](cyclo:cyclo.Cyclo)(implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "constant", "tail" : "(rational: Rational)(wM: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.Poly.constant", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#constant[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](rational:spire.math.Rational)(implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "constant", "tail" : "(phase: Phase)(d: DummyImplicit, wM: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.Poly.constant", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#constant[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](phase:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit,implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "constant", "tail" : "(int: Int)(wM: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.Poly.constant", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#constant[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](int:Int)(implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "one", "tail" : "(wM: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.Poly.one", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#one[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "zero", "tail" : "(arg0: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.Poly.zero", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#zero[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitevidence$2:shapeless.Witness.Aux[M]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/Poly$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/freebased\/Poly.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.freebased.PolyInstances", "shortDescription" : "", "members_class" : [{"label" : "timesl", "tail" : "(c: Cyclo, poly: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.PolyInstances.timesl", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#timesl(c:cyclo.Cyclo,poly:net.alasc.symdpoly.freebased.Poly[M,F]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "eqv", "tail" : "(lhs: Poly[M, F], rhs: Poly[M, F]): Boolean", "member" : "net.alasc.symdpoly.freebased.PolyInstances.eqv", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#eqv(lhs:net.alasc.symdpoly.freebased.Poly[M,F],rhs:net.alasc.symdpoly.freebased.Poly[M,F]):Boolean", "kind" : "def"}, {"label" : "times", "tail" : "(lhs: Poly[M, F], rhs: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.PolyInstances.times", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#times(lhs:net.alasc.symdpoly.freebased.Poly[M,F],rhs:net.alasc.symdpoly.freebased.Poly[M,F]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "one", "tail" : "(): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.PolyInstances.one", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#one:net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "plus", "tail" : "(lhs: Poly[M, F], rhs: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.PolyInstances.plus", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#plus(lhs:net.alasc.symdpoly.freebased.Poly[M,F],rhs:net.alasc.symdpoly.freebased.Poly[M,F]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "zero", "tail" : "(): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.PolyInstances.zero", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#zero:net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "negate", "tail" : "(lhs: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.PolyInstances.negate", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#negate(lhs:net.alasc.symdpoly.freebased.Poly[M,F]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "minus", "tail" : "(lhs: Poly[M, F], rhs: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.PolyInstances.minus", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#minus(lhs:net.alasc.symdpoly.freebased.Poly[M,F],rhs:net.alasc.symdpoly.freebased.Poly[M,F]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "adjoint", "tail" : "(lhs: Poly[M, F]): Poly[M, F]", "member" : "net.alasc.symdpoly.freebased.PolyInstances.adjoint", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#adjoint(lhs:net.alasc.symdpoly.freebased.Poly[M,F]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "witnessF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.freebased.PolyInstances.witnessF", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#witnessF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.freebased.PolyInstances.M", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#M:M", "kind" : "def"}, {"label" : "scalar", "tail" : "(): Field[Cyclo]", "member" : "net.alasc.symdpoly.freebased.PolyInstances.scalar", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#scalar:spire.algebra.Field[cyclo.Cyclo]", "kind" : "implicit def"}, {"member" : "net.alasc.symdpoly.freebased.PolyInstances#<init>", "error" : "unsupported entity"}, {"label" : "neqv", "tail" : "(x: Poly[M, F], y: Poly[M, F]): Boolean", "member" : "cats.kernel.Eq.neqv", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#neqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "divr", "tail" : "(v: Poly[M, F], f: Cyclo): Poly[M, F]", "member" : "spire.algebra.VectorSpace.divr", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#divr(v:V,f:F):V", "kind" : "def"}, {"label" : "fromBigInt", "tail" : "(n: BigInt): Poly[M, F]", "member" : "algebra.ring.Ring.fromBigInt", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#fromBigInt(n:BigInt):A", "kind" : "def"}, {"label" : "fromInt", "tail" : "(n: Int): Poly[M, F]", "member" : "algebra.ring.Ring.fromInt", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#fromInt(n:Int):A", "kind" : "def"}, {"label" : "tryProduct", "tail" : "(as: TraversableOnce[Poly[M, F]]): Option[Poly[M, F]]", "member" : "algebra.ring.MultiplicativeMonoid.tryProduct", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#tryProduct(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(as: TraversableOnce[Poly[M, F]]): Poly[M, F]", "member" : "algebra.ring.MultiplicativeMonoid.product", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#product(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "pow", "tail" : "(a: Poly[M, F], n: Int): Poly[M, F]", "member" : "algebra.ring.MultiplicativeMonoid.pow", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#pow(a:A,n:Int):A", "kind" : "def"}, {"label" : "isOne", "tail" : "(a: Poly[M, F])(ev: Eq[Poly[M, F]]): Boolean", "member" : "algebra.ring.MultiplicativeMonoid.isOne", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#isOne(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "multiplicative", "tail" : "(): Monoid[Poly[M, F]]", "member" : "algebra.ring.MultiplicativeMonoid.multiplicative", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#multiplicative:algebra.Monoid[A]", "kind" : "def"}, {"label" : "positivePow", "tail" : "(a: Poly[M, F], n: Int): Poly[M, F]", "member" : "algebra.ring.MultiplicativeSemigroup.positivePow", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#positivePow(a:A,n:Int):A", "kind" : "def"}, {"label" : "timesr", "tail" : "(v: Poly[M, F], r: Cyclo): Poly[M, F]", "member" : "spire.algebra.CModule.timesr", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#timesr(v:V,r:R):V", "kind" : "def"}, {"label" : "additive", "tail" : "(): CommutativeGroup[Poly[M, F]]", "member" : "algebra.ring.AdditiveCommutativeGroup.additive", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#additive:algebra.CommutativeGroup[A]", "kind" : "def"}, {"label" : "sumN", "tail" : "(a: Poly[M, F], n: Int): Poly[M, F]", "member" : "algebra.ring.AdditiveGroup.sumN", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#sumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "trySum", "tail" : "(as: TraversableOnce[Poly[M, F]]): Option[Poly[M, F]]", "member" : "algebra.ring.AdditiveMonoid.trySum", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#trySum(as:TraversableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(as: TraversableOnce[Poly[M, F]]): Poly[M, F]", "member" : "algebra.ring.AdditiveMonoid.sum", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#sum(as:TraversableOnce[A]):A", "kind" : "def"}, {"label" : "isZero", "tail" : "(a: Poly[M, F])(ev: Eq[Poly[M, F]]): Boolean", "member" : "algebra.ring.AdditiveMonoid.isZero", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#isZero(a:A)(implicitev:algebra.Eq[A]):Boolean", "kind" : "def"}, {"label" : "positiveSumN", "tail" : "(a: Poly[M, F], n: Int): Poly[M, F]", "member" : "algebra.ring.AdditiveSemigroup.positiveSumN", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#positiveSumN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/freebased\/PolyInstances.html", "kind" : "class"}], "net.alasc.symdpoly.quotient" : [{"name" : "net.alasc.symdpoly.quotient.MonoidDef", "shortDescription" : "Base class for quotient monoids.", "object" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html", "members_class" : [{"label" : "Permutation", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.Permutation", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#Permutation", "kind" : "object"}, {"label" : "inPlaceNormalForm", "tail" : "(word: MutableWord[Free], start: Int): Boolean", "member" : "net.alasc.symdpoly.quotient.MonoidDef.inPlaceNormalForm", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#inPlaceNormalForm(word:net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free],start:Int):Boolean", "kind" : "def"}, {"label" : "quotient", "tail" : "(poly: Poly[Free, Free]): Poly[MonoidDef.this.type, Free]", "member" : "net.alasc.symdpoly.quotient.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#quotient(poly:net.alasc.symdpoly.freebased.Poly[MonoidDef.this.Free,MonoidDef.this.Free]):net.alasc.symdpoly.freebased.Poly[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "def"}, {"label" : "quotient", "tail" : "(word: Mono[Free, Free]): MonoType", "member" : "net.alasc.symdpoly.quotient.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#quotient(word:net.alasc.symdpoly.freebased.Mono[MonoidDef.this.Free,MonoidDef.this.Free]):MonoidDef.this.MonoType", "kind" : "def"}, {"label" : "quotient", "tail" : "(permutation: freebased.MonoidDef.Free.PermutationType): Option[Permutation[MonoidDef.this.type, Free]]", "member" : "net.alasc.symdpoly.quotient.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#quotient(permutation:MonoidDef.this.Free#PermutationType):Option[net.alasc.symdpoly.freebased.Permutation[MonoidDef.this.type,MonoidDef.this.Free]]", "kind" : "def"}, {"label" : "quotientNC", "tail" : "(permutation: freebased.MonoidDef.Free.PermutationType): Permutation[MonoidDef.this.type, Free]", "member" : "net.alasc.symdpoly.quotient.MonoidDef.quotientNC", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#quotientNC(permutation:MonoidDef.this.Free#PermutationType):net.alasc.symdpoly.freebased.Permutation[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "def"}, {"label" : "symmetryGroup", "tail" : ": Grp[PermutationType]", "member" : "net.alasc.symdpoly.quotient.MonoidDef.symmetryGroup", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#symmetryGroup:net.alasc.finite.Grp[MonoidDef.this.PermutationType]", "kind" : "lazy val"}, {"label" : "groupInQuotientNC", "tail" : "(grp: Grp[Permutation[Free, Free]]): Grp[PermutationType]", "member" : "net.alasc.symdpoly.quotient.MonoidDef.groupInQuotientNC", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#groupInQuotientNC(grp:net.alasc.finite.Grp[net.alasc.symdpoly.freebased.Permutation[MonoidDef.this.Free,MonoidDef.this.Free]]):net.alasc.finite.Grp[MonoidDef.this.PermutationType]", "kind" : "def"}, {"label" : "groupInQuotient", "tail" : "(grp: Grp[Permutation[Free, Free]]): Grp[PermutationType]", "member" : "net.alasc.symdpoly.quotient.MonoidDef.groupInQuotient", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#groupInQuotient(grp:net.alasc.finite.Grp[net.alasc.symdpoly.freebased.Permutation[MonoidDef.this.Free,MonoidDef.this.Free]]):net.alasc.finite.Grp[MonoidDef.this.PermutationType]", "kind" : "def"}, {"label" : "cyclotomicOrder", "tail" : "(): Int", "member" : "net.alasc.symdpoly.quotient.MonoidDef.cyclotomicOrder", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#cyclotomicOrder:Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.quotient.MonoidDef#<init>", "error" : "unsupported entity"}, {"label" : "permutationClassTag", "tail" : ": ClassTag[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationClassTag", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#permutationClassTag:scala.reflect.ClassTag[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationMonoAction", "tail" : ": Action[MonoType, PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationMonoAction", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#permutationMonoAction:spire.algebra.Action[MonoidDef.this.MonoType,MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationFaithfulPermutationActionBuilder", "tail" : ": FaithfulPermutationActionBuilder[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationFaithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#permutationFaithfulPermutationActionBuilder:net.alasc.finite.FaithfulPermutationActionBuilder[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationGroup", "tail" : ": Group[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationGroup", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#permutationGroup:spire.algebra.Group[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationEq", "tail" : ": Eq[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationEq", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#permutationEq:spire.algebra.Eq[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "PermutationType", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.PermutationType", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#PermutationType=net.alasc.symdpoly.freebased.Permutation[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "type"}, {"label" : "constant", "tail" : "(c: Cyclo): PolyType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#constant(c:cyclo.Cyclo):MonoidDef.this.PolyType", "kind" : "def"}, {"label" : "constant", "tail" : "(r: Rational): PolyType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#constant(r:spire.math.Rational):MonoidDef.this.PolyType", "kind" : "def"}, {"label" : "constant", "tail" : "(i: Int): PolyType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#constant(i:Int):MonoidDef.this.PolyType", "kind" : "def"}, {"label" : "polyClassTag", "tail" : ": ClassTag[PolyType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyClassTag", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#polyClassTag:scala.reflect.ClassTag[MonoidDef.this.PolyType]", "kind" : "val"}, {"label" : "polyGenPermAction", "tail" : ": Action[Poly[MonoidDef.this.type, Free], GenPerm]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyGenPermAction", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#polyGenPermAction:spire.algebra.Action[net.alasc.symdpoly.freebased.Poly[MonoidDef.this.type,MonoidDef.this.Free],net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "polyEq", "tail" : "(): Eq[PolyType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyEq", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#polyEq:spire.algebra.Eq[MonoidDef.this.PolyType]", "kind" : "def"}, {"label" : "polyInvolution", "tail" : "(): Involution[PolyType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyInvolution", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#polyInvolution:spire.algebra.Involution[MonoidDef.this.PolyType]", "kind" : "def"}, {"label" : "polyAssociativeAlgebra", "tail" : "(): FieldAssociativeAlgebra[PolyType, Cyclo]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyAssociativeAlgebra", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#polyAssociativeAlgebra:spire.algebra.FieldAssociativeAlgebra[MonoidDef.this.PolyType,cyclo.Cyclo]", "kind" : "def"}, {"label" : "monomialToPolynomial", "tail" : "(m: Mono[MonoidDef.this.type, Free]): Poly[MonoidDef.this.type, Free]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monomialToPolynomial", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monomialToPolynomial(m:net.alasc.symdpoly.freebased.Mono[MonoidDef.this.type,MonoidDef.this.Free]):net.alasc.symdpoly.freebased.Poly[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "def"}, {"label" : "PolyType", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.PolyType", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#PolyType=net.alasc.symdpoly.freebased.Poly[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "type"}, {"label" : "one", "tail" : ": MonoType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.one", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#one:MonoidDef.this.MonoType", "kind" : "val"}, {"label" : "zero", "tail" : ": MonoType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.zero", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#zero:MonoidDef.this.MonoType", "kind" : "val"}, {"label" : "monoClassTag", "tail" : ": ClassTag[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoClassTag", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoClassTag:scala.reflect.ClassTag[MonoidDef.this.MonoType]", "kind" : "val"}, {"label" : "monoGenPermAction", "tail" : ": Action[MonoType, GenPerm]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoGenPermAction", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoGenPermAction:spire.algebra.Action[MonoidDef.this.MonoType,net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "monoPhased", "tail" : ": Phased[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoPhased", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoPhased:net.alasc.symdpoly.algebra.Phased[MonoidDef.this.MonoType]", "kind" : "val"}, {"label" : "monoOrder", "tail" : "(): Order[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoOrder", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoOrder:spire.algebra.Order[MonoidDef.this.MonoType]", "kind" : "def"}, {"label" : "monoInvolution", "tail" : "(): Involution[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoInvolution", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoInvolution:spire.algebra.Involution[MonoidDef.this.MonoType]", "kind" : "def"}, {"label" : "monoMultiplicativeBinoid", "tail" : "(): MultiplicativeBinoid[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoMultiplicativeBinoid", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#monoMultiplicativeBinoid:net.alasc.symdpoly.algebra.MultiplicativeBinoid[MonoidDef.this.MonoType]", "kind" : "def"}, {"label" : "quotient", "tail" : "(gset: GSet[Free]): GSet[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#quotient(gset:net.alasc.symdpoly.GSet[MonoidDef.this.Free]):net.alasc.symdpoly.GSet[MonoidDef.this.type]", "kind" : "def"}, {"label" : "MonoType", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.MonoType", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#MonoType=net.alasc.symdpoly.freebased.Mono[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "type"}, {"label" : "witnessFree", "tail" : "(): Aux[Free]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.witnessFree", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#witnessFree:shapeless.Witness.Aux[MonoidDef.this.Free]", "kind" : "implicit def"}, {"label" : "symmetricEvaluator", "tail" : "(symmetryGroup0: Grp[PermutationType], equivalence0: Equivalence[MonoidDef.this.type]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.symmetricEvaluator", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#symmetricEvaluator(symmetryGroup0:net.alasc.finite.Grp[MonoidDef.this.PermutationType],equivalence0:net.alasc.symdpoly.evaluation.Equivalence[MonoidDef.this.type]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "symmetricEvaluator", "tail" : "(symmetryGroup: Grp[PermutationType]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.symmetricEvaluator", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#symmetricEvaluator(symmetryGroup:net.alasc.finite.Grp[MonoidDef.this.PermutationType]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "evaluator", "tail" : "(): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.evaluator", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#evaluator():net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "evaluator", "tail" : "(equivalence: Equivalence[MonoidDef.this.type]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.evaluator", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#evaluator(equivalence:net.alasc.symdpoly.evaluation.Equivalence[MonoidDef.this.type]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "impWitness", "tail" : "(): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.impWitness", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#impWitness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "implicit def"}, {"label" : "witness", "tail" : ": Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.witness", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#witness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "maximalLhsLength", "tail" : "(): Int", "member" : "net.alasc.symdpoly.quotient.MonoidDef.maximalLhsLength", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#maximalLhsLength:Int", "kind" : "abstract def"}, {"label" : "rewritingRules", "tail" : "(): SparseTrie[MutableWord[Free], MutableWord[Free]]", "member" : "net.alasc.symdpoly.quotient.MonoidDef.rewritingRules", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#rewritingRules:net.alasc.symdpoly.util.SparseTrie[net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free],net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free]]", "kind" : "abstract def"}, {"label" : "Free", "tail" : "(): Free", "member" : "net.alasc.symdpoly.freebased.MonoidDef.Free", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html#Free:MonoidDef.this.Free", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.freebased.MonoidDef.Free", "error" : "unsupported entity"}], "members_object" : [{"label" : "Aux", "tail" : "", "member" : "net.alasc.symdpoly.quotient.MonoidDef.Aux", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#Aux[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton]=net.alasc.symdpoly.quotient.MonoidDef{typeFree=F}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/MonoidDef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/quotient\/MonoidDef.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.quotient.PairRules", "shortDescription" : "Not used at the moment.", "object" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html", "members_class" : [{"label" : "applyRules", "tail" : "(op1: F.Op, op2: F.Op): Mono[F, F]", "member" : "net.alasc.symdpoly.quotient.PairRules.applyRules", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#applyRules(op1:F#Op,op2:F#Op):net.alasc.symdpoly.freebased.Mono[F,F]", "kind" : "def"}, {"label" : "rule", "tail" : "(i: Int, j: Int): Int", "member" : "net.alasc.symdpoly.quotient.PairRules.rule", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#rule(i:Int,j:Int):Int", "kind" : "def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.quotient.PairRules.F", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#F:F", "kind" : "def"}, {"member" : "net.alasc.symdpoly.quotient.PairRules#<init>", "error" : "unsupported entity"}, {"label" : "custom", "tail" : ": Map[(F.Op, F.Op), Mono[F, F]]", "member" : "net.alasc.symdpoly.quotient.PairRules.custom", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#custom:Map[(F#Op,F#Op),net.alasc.symdpoly.freebased.Mono[F,F]]", "kind" : "val"}, {"label" : "lookup", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.quotient.PairRules.lookup", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#lookup:Array[Int]", "kind" : "val"}, {"label" : "width", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.width", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#width:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(f: PairSubstitutions[F])(wF: Aux[F]): PairRules[F]", "member" : "net.alasc.symdpoly.quotient.PairRules.apply", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](f:net.alasc.symdpoly.quotient.PairSubstitutions[F])(implicitwF:shapeless.Witness.Aux[F]):net.alasc.symdpoly.quotient.PairRules[F]", "kind" : "def"}, {"label" : "setMaskIndex", "tail" : "(j: Int, cellValue: Int, rule: Int): Int", "member" : "net.alasc.symdpoly.quotient.PairRules.setMaskIndex", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#setMaskIndex(j:Int,cellValue:Int,rule:Int):Int", "kind" : "def"}, {"label" : "getMaskIndex", "tail" : "(j: Int, cellValue: Int): Int", "member" : "net.alasc.symdpoly.quotient.PairRules.getMaskIndex", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#getMaskIndex(j:Int,cellValue:Int):Int", "kind" : "def"}, {"label" : "cellIndex", "tail" : "(i: Int, j: Int, width: Int): Int", "member" : "net.alasc.symdpoly.quotient.PairRules.cellIndex", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#cellIndex(i:Int,j:Int,width:Int):Int", "kind" : "def"}, {"label" : "Custom", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.Custom", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#Custom:Int", "kind" : "val"}, {"label" : "KeepFirst", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.KeepFirst", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#KeepFirst:Int", "kind" : "val"}, {"label" : "Swap", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.Swap", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#Swap:Int", "kind" : "val"}, {"label" : "RemoveBoth", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.RemoveBoth", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#RemoveBoth:Int", "kind" : "val"}, {"label" : "Preserve", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.Preserve", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#Preserve:Int", "kind" : "val"}, {"label" : "SetToZero", "tail" : ": Int", "member" : "net.alasc.symdpoly.quotient.PairRules.SetToZero", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#SetToZero:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairRules$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/quotient\/PairRules.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.quotient.PairSubstitutions", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(op1: F.Op, op2: F.Op): F.MonoType", "member" : "net.alasc.symdpoly.quotient.PairSubstitutions.apply", "link" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html#apply(op1:F#Op,op2:F#Op):F#MonoType", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/quotient\/PairSubstitutions.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.quotient.Symmetries", "shortDescription" : "", "members_class" : [{"label" : "compatibleSubgroup", "tail" : "(grp: Grp[F.PermutationType]): Grp[M.PermutationType]", "member" : "net.alasc.symdpoly.quotient.Symmetries.compatibleSubgroup", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#compatibleSubgroup(grp:net.alasc.finite.Grp[F#PermutationType]):net.alasc.finite.Grp[M#PermutationType]", "kind" : "def"}, {"label" : "isGroupCompatible", "tail" : "(grp: Grp[F.PermutationType]): Boolean", "member" : "net.alasc.symdpoly.quotient.Symmetries.isGroupCompatible", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#isGroupCompatible(grp:net.alasc.finite.Grp[F#PermutationType]):Boolean", "kind" : "def"}, {"label" : "action", "tail" : ": PermutationAction[Permutation[F, F]]", "member" : "net.alasc.symdpoly.quotient.Symmetries.action", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#action:net.alasc.algebra.PermutationAction[net.alasc.symdpoly.freebased.Permutation[F,F]]", "kind" : "val"}, {"label" : "partition", "tail" : ": Partition", "member" : "net.alasc.symdpoly.quotient.Symmetries.partition", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#partition:net.alasc.partitions.Partition", "kind" : "val"}, {"label" : "normalForms", "tail" : ": IndexedSeq[M.MonoType]", "member" : "net.alasc.symdpoly.quotient.Symmetries.normalForms", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#normalForms:IndexedSeq[M#MonoType]", "kind" : "val"}, {"label" : "orderedSet", "tail" : ": OrderedSet[F.MonoType]", "member" : "net.alasc.symdpoly.quotient.Symmetries.orderedSet", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#orderedSet:net.alasc.symdpoly.util.OrderedSet[F#MonoType]", "kind" : "val"}, {"label" : "lhs", "tail" : ": Seq[Mono[F.Free, F.Free]]", "member" : "net.alasc.symdpoly.quotient.Symmetries.lhs", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#lhs:Seq[net.alasc.symdpoly.freebased.Mono[F#Free,F#Free]]", "kind" : "val"}, {"label" : "witnessF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.quotient.Symmetries.witnessF", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#witnessF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.quotient.Symmetries.F", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#F:F", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.quotient.Symmetries.M", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#M:M", "kind" : "def"}, {"member" : "net.alasc.symdpoly.quotient.Symmetries#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/quotient\/Symmetries.html", "kind" : "class"}], "net.alasc.symdpoly" : [{"name" : "net.alasc.symdpoly.ComparisonOp", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/ComparisonOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Comparison operators used to express constraints.", "object" : "net\/alasc\/symdpoly\/ComparisonOp$.html", "members_object" : [{"label" : "EQ", "tail" : "", "member" : "net.alasc.symdpoly.ComparisonOp.EQ", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#EQ", "kind" : "object"}, {"label" : "GE", "tail" : "", "member" : "net.alasc.symdpoly.ComparisonOp.GE", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#GE", "kind" : "object"}, {"label" : "LE", "tail" : "", "member" : "net.alasc.symdpoly.ComparisonOp.LE", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#LE", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/ComparisonOp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/ComparisonOp.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.Constraint", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Constraint.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Constraint.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Constraint.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Constraint.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Constraint.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Constraint.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Constraint.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Constraint.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Constraint.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Constraint.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Constraint.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Constraint.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/Constraint.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Constraint.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Constraint.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Constraint.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Constraint.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Constraint.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Constraint.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/Constraint.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.defaults", "shortDescription" : "A set of default imports, syntax extensions and instances to work easily with SymDPoly.", "object" : "net\/alasc\/symdpoly\/defaults$.html", "members_object" : [{"label" : "PRGB", "tail" : "", "member" : "net.alasc.perms.Algorithms.PRGB", "link" : "net\/alasc\/symdpoly\/defaults$.html#PRGB[G<:<?>]extendsGrpChainPermutationAction[G]", "kind" : "class"}, {"label" : "e", "tail" : "(n: Int): Cyclo", "member" : "net.alasc.symdpoly.defaults.e", "link" : "net\/alasc\/symdpoly\/defaults$.html#e(n:Int):net.alasc.symdpoly.defaults.Cyclo", "kind" : "def"}, {"label" : "sqrt", "tail" : "(r: Rational): Cyclo", "member" : "net.alasc.symdpoly.defaults.sqrt", "link" : "net\/alasc\/symdpoly\/defaults$.html#sqrt(r:net.alasc.symdpoly.defaults.Rational):net.alasc.symdpoly.defaults.Cyclo", "kind" : "def"}, {"label" : "sqrt", "tail" : "(n: Int): Cyclo", "member" : "net.alasc.symdpoly.defaults.sqrt", "link" : "net\/alasc\/symdpoly\/defaults$.html#sqrt(n:Int):net.alasc.symdpoly.defaults.Cyclo", "kind" : "def"}, {"label" : "sinRev", "tail" : "(n: Int, d: Int): Cyclo", "member" : "net.alasc.symdpoly.defaults.sinRev", "link" : "net\/alasc\/symdpoly\/defaults$.html#sinRev(n:Int,d:Int):net.alasc.symdpoly.defaults.Cyclo", "kind" : "def"}, {"label" : "cosRev", "tail" : "(n: Int, d: Int): Cyclo", "member" : "net.alasc.symdpoly.defaults.cosRev", "link" : "net\/alasc\/symdpoly\/defaults$.html#cosRev(n:Int,d:Int):net.alasc.symdpoly.defaults.Cyclo", "kind" : "def"}, {"label" : "Cyclo", "tail" : ": cyclo.Cyclo.type", "member" : "net.alasc.symdpoly.defaults.Cyclo", "link" : "net\/alasc\/symdpoly\/defaults$.html#Cyclo:cyclo.Cyclo.type", "kind" : "val"}, {"label" : "Cyclo", "tail" : "", "member" : "net.alasc.symdpoly.defaults.Cyclo", "link" : "net\/alasc\/symdpoly\/defaults$.html#Cyclo=cyclo.Cyclo", "kind" : "type"}, {"label" : "Perm", "tail" : ": perms.Perm.type", "member" : "net.alasc.symdpoly.defaults.Perm", "link" : "net\/alasc\/symdpoly\/defaults$.html#Perm:net.alasc.perms.Perm.type", "kind" : "val"}, {"label" : "Perm", "tail" : "", "member" : "net.alasc.symdpoly.defaults.Perm", "link" : "net\/alasc\/symdpoly\/defaults$.html#Perm=net.alasc.perms.Perm", "kind" : "type"}, {"label" : "Grp", "tail" : ": finite.Grp.type", "member" : "net.alasc.symdpoly.defaults.Grp", "link" : "net\/alasc\/symdpoly\/defaults$.html#Grp:net.alasc.finite.Grp.type", "kind" : "val"}, {"label" : "Grp", "tail" : "", "member" : "net.alasc.symdpoly.defaults.Grp", "link" : "net\/alasc\/symdpoly\/defaults$.html#Grp[G]=net.alasc.finite.Grp[G]", "kind" : "type"}, {"label" : "SafeLong", "tail" : ": spire.math.SafeLong.type", "member" : "net.alasc.symdpoly.defaults.SafeLong", "link" : "net\/alasc\/symdpoly\/defaults$.html#SafeLong:spire.math.SafeLong.type", "kind" : "val"}, {"label" : "SafeLong", "tail" : "", "member" : "net.alasc.symdpoly.defaults.SafeLong", "link" : "net\/alasc\/symdpoly\/defaults$.html#SafeLong=spire.math.SafeLong", "kind" : "type"}, {"label" : "Rational", "tail" : ": spire.math.Rational.type", "member" : "net.alasc.symdpoly.defaults.Rational", "link" : "net\/alasc\/symdpoly\/defaults$.html#Rational:spire.math.Rational.type", "kind" : "val"}, {"label" : "Rational", "tail" : "", "member" : "net.alasc.symdpoly.defaults.Rational", "link" : "net\/alasc\/symdpoly\/defaults$.html#Rational=spire.math.Rational", "kind" : "type"}, {"label" : "Mat", "tail" : ": scalin.immutable.Mat.type", "member" : "net.alasc.symdpoly.defaults.Mat", "link" : "net\/alasc\/symdpoly\/defaults$.html#Mat:scalin.immutable.Mat.type", "kind" : "val"}, {"label" : "Mat", "tail" : "", "member" : "net.alasc.symdpoly.defaults.Mat", "link" : "net\/alasc\/symdpoly\/defaults$.html#Mat[A]=scalin.immutable.Mat[A]", "kind" : "type"}, {"label" : "Vec", "tail" : ": scalin.immutable.Vec.type", "member" : "net.alasc.symdpoly.defaults.Vec", "link" : "net\/alasc\/symdpoly\/defaults$.html#Vec:scalin.immutable.Vec.type", "kind" : "val"}, {"label" : "Vec", "tail" : "", "member" : "net.alasc.symdpoly.defaults.Vec", "link" : "net\/alasc\/symdpoly\/defaults$.html#Vec[A]=scalin.immutable.Vec[A]", "kind" : "type"}, {"label" : "matEngine", "tail" : "(): MatEngine[A, DenseMat[A]]", "member" : "net.alasc.symdpoly.defaults.matEngine", "link" : "net\/alasc\/symdpoly\/defaults$.html#matEngine[A]:scalin.MatEngine[A,scalin.immutable.DenseMat[A]]", "kind" : "implicit def"}, {"label" : "vecEngine", "tail" : "(): VecEngine[A, DenseVec[A]]", "member" : "net.alasc.symdpoly.defaults.vecEngine", "link" : "net\/alasc\/symdpoly\/defaults$.html#vecEngine[A]:scalin.VecEngine[A,scalin.immutable.DenseVec[A]]", "kind" : "implicit def"}, {"label" : "phasedOps", "tail" : "(a: A)(arg0: Phased[A]): PhasedOps[A]", "member" : "net.alasc.symdpoly.syntax.PhasedSyntax.phasedOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#phasedOps[A](a:A)(implicitevidence$1:net.alasc.symdpoly.algebra.Phased[A]):net.alasc.symdpoly.syntax.PhasedOps[A]", "kind" : "implicit def"}, {"label" : "symdpolyContravariantForFaithfulPermutationActionBuilder", "tail" : ": Contravariant[FaithfulPermutationActionBuilder]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForFaithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/defaults$.html#symdpolyContravariantForFaithfulPermutationActionBuilder:cats.Contravariant[net.alasc.finite.FaithfulPermutationActionBuilder]", "kind" : "implicit val"}, {"label" : "symdpolyInvariantForVectorSpace", "tail" : "(): Invariant[[V]VectorSpace[V, F]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForVectorSpace", "link" : "net\/alasc\/symdpoly\/defaults$.html#symdpolyInvariantForVectorSpace[F]:cats.Invariant[[V]spire.algebra.VectorSpace[V,F]]", "kind" : "implicit def"}, {"label" : "symdpolyInvariantForAction", "tail" : "(): Invariant[[P]Action[P, G]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForAction", "link" : "net\/alasc\/symdpoly\/defaults$.html#symdpolyInvariantForAction[G]:cats.Invariant[[P]spire.algebra.Action[P,G]]", "kind" : "implicit def"}, {"label" : "symdpolyContravariantForAction", "tail" : "(): Contravariant[[G]Action[P, G]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForAction", "link" : "net\/alasc\/symdpoly\/defaults$.html#symdpolyContravariantForAction[P]:cats.Contravariant[[G]spire.algebra.Action[P,G]]", "kind" : "implicit def"}, {"label" : "symdpolyContravariantForPermutationAction", "tail" : ": Contravariant[PermutationAction]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForPermutationAction", "link" : "net\/alasc\/symdpoly\/defaults$.html#symdpolyContravariantForPermutationAction:cats.Contravariant[net.alasc.algebra.PermutationAction]", "kind" : "implicit val"}, {"label" : "ContravariantForFaithfulPermutationAction", "tail" : ": Contravariant[PermutationAction]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.ContravariantForFaithfulPermutationAction", "link" : "net\/alasc\/symdpoly\/defaults$.html#ContravariantForFaithfulPermutationAction:cats.Contravariant[net.alasc.algebra.PermutationAction]", "kind" : "val"}, {"label" : "symdpolyInvariantForInvolution", "tail" : ": Invariant[Involution]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForInvolution", "link" : "net\/alasc\/symdpoly\/defaults$.html#symdpolyInvariantForInvolution:cats.Invariant[spire.algebra.Involution]", "kind" : "implicit val"}, {"label" : "assignOps", "tail" : "(lhs: A): AssignOps[A]", "member" : "scalin.syntax.AssignSyntax.assignOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#assignOps[A](lhs:A):scalin.syntax.AssignOps[A]", "kind" : "implicit def"}, {"label" : "unitPermutationAction", "tail" : ": UnitPermutationAction", "member" : "net.alasc.std.UnitInstances.unitPermutationAction", "link" : "net\/alasc\/symdpoly\/defaults$.html#unitPermutationAction:net.alasc.std.UnitPermutationAction", "kind" : "implicit final val"}, {"label" : "product2FaithfulPermutationActionBuilder", "tail" : "(arg0: FaithfulPermutationActionBuilder[A], arg1: FaithfulPermutationActionBuilder[B]): FaithfulPermutationActionBuilder[(A, B)]", "member" : "net.alasc.std.ProductInstances.product2FaithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/defaults$.html#product2FaithfulPermutationActionBuilder[A,B](implicitevidence$1:net.alasc.finite.FaithfulPermutationActionBuilder[A],implicitevidence$2:net.alasc.finite.FaithfulPermutationActionBuilder[B]):net.alasc.finite.FaithfulPermutationActionBuilder[(A,B)]", "kind" : "implicit def"}, {"label" : "IndexedSeqPermutationAction", "tail" : "(arg0: PermutationAction[G]): Action[Seq[A], G]", "member" : "net.alasc.std.SeqInstances0.IndexedSeqPermutationAction", "link" : "net\/alasc\/symdpoly\/defaults$.html#IndexedSeqPermutationAction[A,G](implicitevidence$2:net.alasc.algebra.PermutationAction[G]):spire.algebra.Action[Seq[A],G]", "kind" : "implicit def"}, {"label" : "SetIntPermutationAction", "tail" : "(arg0: Group[P], arg1: PermutationAction[P], cbf: CanBuildFrom[Nothing, Int, S]): Action[S, P]", "member" : "net.alasc.std.SetInstances0.SetIntPermutationAction", "link" : "net\/alasc\/symdpoly\/defaults$.html#SetIntPermutationAction[S<:scala.collection.SetLike[Int,S]withscala.collection.Set[Int],P](implicitevidence$4:spire.algebra.Group[P],implicitevidence$5:net.alasc.algebra.PermutationAction[P],implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,Int,S]):spire.algebra.Action[S,P]", "kind" : "implicit def"}, {"label" : "ArrayPermutationAction", "tail" : "(arg0: ClassTag[A], arg1: PermutationAction[G]): Action[Array[A], G]", "member" : "net.alasc.std.ArrayInstances0.ArrayPermutationAction", "link" : "net\/alasc\/symdpoly\/defaults$.html#ArrayPermutationAction[A,G](implicitevidence$3:scala.reflect.ClassTag[A],implicitevidence$4:net.alasc.algebra.PermutationAction[G]):spire.algebra.Action[Array[A],G]", "kind" : "implicit def"}, {"label" : "permutationActionSyntax", "tail" : "(a: A)(arg0: PermutationAction[A]): PermutationActionOps[A]", "member" : "net.alasc.syntax.PermutationActionSyntax.permutationActionSyntax", "link" : "net\/alasc\/symdpoly\/defaults$.html#permutationActionSyntax[A](a:A)(implicitevidence$2:net.alasc.algebra.PermutationAction[A]):net.alasc.syntax.PermutationActionOps[A]", "kind" : "implicit def"}, {"label" : "richGroupSyntax", "tail" : "(ev: Group[A]): RichGroupOps[A]", "member" : "net.alasc.syntax.GroupSyntax.richGroupSyntax", "link" : "net\/alasc\/symdpoly\/defaults$.html#richGroupSyntax[A](ev:spire.algebra.Group[A]):net.alasc.syntax.RichGroupOps[A]", "kind" : "implicit def"}, {"label" : "groupSyntax", "tail" : "(a: A)(arg0: Group[A]): GroupOps[A]", "member" : "net.alasc.syntax.GroupSyntax.groupSyntax", "link" : "net\/alasc\/symdpoly\/defaults$.html#groupSyntax[A](a:A)(implicitevidence$3:spire.algebra.Group[A]):net.alasc.syntax.GroupOps[A]", "kind" : "implicit def"}, {"label" : "checkSyntax", "tail" : "(a: A)(arg0: Check[A]): CheckOps[A]", "member" : "net.alasc.syntax.CheckSyntax.checkSyntax", "link" : "net\/alasc\/symdpoly\/defaults$.html#checkSyntax[A](a:A)(implicitevidence$1:net.alasc.algebra.Check[A]):net.alasc.syntax.CheckOps[A]", "kind" : "implicit def"}, {"label" : "UnitAlgebra", "tail" : ": UnitAlgebra", "member" : "spire.std.UnitInstances.UnitAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#UnitAlgebra:spire.std.UnitAlgebra", "kind" : "implicit final val"}, {"label" : "OptionOrder", "tail" : "(arg0: Order[A]): OptionOrder[A]", "member" : "spire.std.OptionInstances.OptionOrder", "link" : "net\/alasc\/symdpoly\/defaults$.html#OptionOrder[A](implicitevidence$12:spire.algebra.Order[A]):spire.std.OptionOrder[A]", "kind" : "implicit def"}, {"label" : "OptionMultiplicativeMonoid", "tail" : "(arg0: MultiplicativeSemigroup[A]): OptionMultiplicativeMonoid[A]", "member" : "spire.std.OptionInstances.OptionMultiplicativeMonoid", "link" : "net\/alasc\/symdpoly\/defaults$.html#OptionMultiplicativeMonoid[A](implicitevidence$11:spire.algebra.MultiplicativeSemigroup[A]):spire.std.OptionMultiplicativeMonoid[A]", "kind" : "implicit def"}, {"label" : "OptionAdditiveMonoid", "tail" : "(arg0: AdditiveSemigroup[A]): OptionAdditiveMonoid[A]", "member" : "spire.std.OptionInstances.OptionAdditiveMonoid", "link" : "net\/alasc\/symdpoly\/defaults$.html#OptionAdditiveMonoid[A](implicitevidence$10:spire.algebra.AdditiveSemigroup[A]):spire.std.OptionAdditiveMonoid[A]", "kind" : "implicit def"}, {"label" : "OptionCMonoid", "tail" : "(arg0: CSemigroup[A]): OptionCMonoid[A]", "member" : "spire.std.OptionInstances.OptionCMonoid", "link" : "net\/alasc\/symdpoly\/defaults$.html#OptionCMonoid[A](implicitevidence$9:spire.algebra.CSemigroup[A]):spire.std.OptionCMonoid[A]", "kind" : "implicit def"}, {"label" : "OptionMonoid", "tail" : "(arg0: Semigroup[A]): OptionMonoid[A]", "member" : "spire.std.OptionInstances0.OptionMonoid", "link" : "net\/alasc\/symdpoly\/defaults$.html#OptionMonoid[A](implicitevidence$8:spire.algebra.Semigroup[A]):spire.std.OptionMonoid[A]", "kind" : "implicit def"}, {"label" : "OptionEq", "tail" : "(arg0: Eq[A]): OptionEq[A]", "member" : "spire.std.OptionInstances0.OptionEq", "link" : "net\/alasc\/symdpoly\/defaults$.html#OptionEq[A](implicitevidence$7:spire.algebra.Eq[A]):spire.std.OptionEq[A]", "kind" : "implicit def"}, {"label" : "OrderProduct22", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q], _structure18: Order[R], _structure19: Order[S], _structure20: Order[T], _structure21: Order[U], _structure22: Order[V]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "spire.std.OrderProductInstances.OrderProduct22", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K],implicit_structure12:spire.algebra.Order[L],implicit_structure13:spire.algebra.Order[M],implicit_structure14:spire.algebra.Order[N],implicit_structure15:spire.algebra.Order[O],implicit_structure16:spire.algebra.Order[P],implicit_structure17:spire.algebra.Order[Q],implicit_structure18:spire.algebra.Order[R],implicit_structure19:spire.algebra.Order[S],implicit_structure20:spire.algebra.Order[T],implicit_structure21:spire.algebra.Order[U],implicit_structure22:spire.algebra.Order[V]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "OrderProduct21", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q], _structure18: Order[R], _structure19: Order[S], _structure20: Order[T], _structure21: Order[U]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "spire.std.OrderProductInstances.OrderProduct21", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K],implicit_structure12:spire.algebra.Order[L],implicit_structure13:spire.algebra.Order[M],implicit_structure14:spire.algebra.Order[N],implicit_structure15:spire.algebra.Order[O],implicit_structure16:spire.algebra.Order[P],implicit_structure17:spire.algebra.Order[Q],implicit_structure18:spire.algebra.Order[R],implicit_structure19:spire.algebra.Order[S],implicit_structure20:spire.algebra.Order[T],implicit_structure21:spire.algebra.Order[U]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "OrderProduct20", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q], _structure18: Order[R], _structure19: Order[S], _structure20: Order[T]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "spire.std.OrderProductInstances.OrderProduct20", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K],implicit_structure12:spire.algebra.Order[L],implicit_structure13:spire.algebra.Order[M],implicit_structure14:spire.algebra.Order[N],implicit_structure15:spire.algebra.Order[O],implicit_structure16:spire.algebra.Order[P],implicit_structure17:spire.algebra.Order[Q],implicit_structure18:spire.algebra.Order[R],implicit_structure19:spire.algebra.Order[S],implicit_structure20:spire.algebra.Order[T]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "OrderProduct19", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q], _structure18: Order[R], _structure19: Order[S]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "spire.std.OrderProductInstances.OrderProduct19", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K],implicit_structure12:spire.algebra.Order[L],implicit_structure13:spire.algebra.Order[M],implicit_structure14:spire.algebra.Order[N],implicit_structure15:spire.algebra.Order[O],implicit_structure16:spire.algebra.Order[P],implicit_structure17:spire.algebra.Order[Q],implicit_structure18:spire.algebra.Order[R],implicit_structure19:spire.algebra.Order[S]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "OrderProduct18", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q], _structure18: Order[R]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "spire.std.OrderProductInstances.OrderProduct18", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K],implicit_structure12:spire.algebra.Order[L],implicit_structure13:spire.algebra.Order[M],implicit_structure14:spire.algebra.Order[N],implicit_structure15:spire.algebra.Order[O],implicit_structure16:spire.algebra.Order[P],implicit_structure17:spire.algebra.Order[Q],implicit_structure18:spire.algebra.Order[R]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "OrderProduct17", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "spire.std.OrderProductInstances.OrderProduct17", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K],implicit_structure12:spire.algebra.Order[L],implicit_structure13:spire.algebra.Order[M],implicit_structure14:spire.algebra.Order[N],implicit_structure15:spire.algebra.Order[O],implicit_structure16:spire.algebra.Order[P],implicit_structure17:spire.algebra.Order[Q]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "OrderProduct16", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "spire.std.OrderProductInstances.OrderProduct16", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K],implicit_structure12:spire.algebra.Order[L],implicit_structure13:spire.algebra.Order[M],implicit_structure14:spire.algebra.Order[N],implicit_structure15:spire.algebra.Order[O],implicit_structure16:spire.algebra.Order[P]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "OrderProduct15", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "spire.std.OrderProductInstances.OrderProduct15", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K],implicit_structure12:spire.algebra.Order[L],implicit_structure13:spire.algebra.Order[M],implicit_structure14:spire.algebra.Order[N],implicit_structure15:spire.algebra.Order[O]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "OrderProduct14", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "spire.std.OrderProductInstances.OrderProduct14", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct14[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K],implicit_structure12:spire.algebra.Order[L],implicit_structure13:spire.algebra.Order[M],implicit_structure14:spire.algebra.Order[N]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "OrderProduct13", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "spire.std.OrderProductInstances.OrderProduct13", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct13[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K],implicit_structure12:spire.algebra.Order[L],implicit_structure13:spire.algebra.Order[M]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "OrderProduct12", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L]): Order[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "spire.std.OrderProductInstances.OrderProduct12", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct12[A,B,C,D,E,F,G,H,I,J,K,L](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K],implicit_structure12:spire.algebra.Order[L]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "OrderProduct11", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K]): Order[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "spire.std.OrderProductInstances.OrderProduct11", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct11[A,B,C,D,E,F,G,H,I,J,K](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J],implicit_structure11:spire.algebra.Order[K]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "OrderProduct10", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J]): Order[(A, B, C, D, E, F, G, H, I, J)]", "member" : "spire.std.OrderProductInstances.OrderProduct10", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct10[A,B,C,D,E,F,G,H,I,J](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I],implicit_structure10:spire.algebra.Order[J]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "OrderProduct9", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I]): Order[(A, B, C, D, E, F, G, H, I)]", "member" : "spire.std.OrderProductInstances.OrderProduct9", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct9[A,B,C,D,E,F,G,H,I](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H],implicit_structure9:spire.algebra.Order[I]):spire.algebra.Order[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "OrderProduct8", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H]): Order[(A, B, C, D, E, F, G, H)]", "member" : "spire.std.OrderProductInstances.OrderProduct8", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct8[A,B,C,D,E,F,G,H](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G],implicit_structure8:spire.algebra.Order[H]):spire.algebra.Order[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "OrderProduct7", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G]): Order[(A, B, C, D, E, F, G)]", "member" : "spire.std.OrderProductInstances.OrderProduct7", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct7[A,B,C,D,E,F,G](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F],implicit_structure7:spire.algebra.Order[G]):spire.algebra.Order[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "OrderProduct6", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F]): Order[(A, B, C, D, E, F)]", "member" : "spire.std.OrderProductInstances.OrderProduct6", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct6[A,B,C,D,E,F](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E],implicit_structure6:spire.algebra.Order[F]):spire.algebra.Order[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "OrderProduct5", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E]): Order[(A, B, C, D, E)]", "member" : "spire.std.OrderProductInstances.OrderProduct5", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct5[A,B,C,D,E](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D],implicit_structure5:spire.algebra.Order[E]):spire.algebra.Order[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "OrderProduct4", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D]): Order[(A, B, C, D)]", "member" : "spire.std.OrderProductInstances.OrderProduct4", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct4[A,B,C,D](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C],implicit_structure4:spire.algebra.Order[D]):spire.algebra.Order[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "OrderProduct3", "tail" : "(_structure1: Order[A], _structure2: Order[B], _structure3: Order[C]): Order[(A, B, C)]", "member" : "spire.std.OrderProductInstances.OrderProduct3", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct3[A,B,C](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B],implicit_structure3:spire.algebra.Order[C]):spire.algebra.Order[(A,B,C)]", "kind" : "implicit def"}, {"label" : "OrderProduct2", "tail" : "(_structure1: Order[A], _structure2: Order[B]): Order[(A, B)]", "member" : "spire.std.OrderProductInstances.OrderProduct2", "link" : "net\/alasc\/symdpoly\/defaults$.html#OrderProduct2[A,B](implicit_structure1:spire.algebra.Order[A],implicit_structure2:spire.algebra.Order[B]):spire.algebra.Order[(A,B)]", "kind" : "implicit def"}, {"label" : "EqProduct22", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q], _structure18: Eq[R], _structure19: Eq[S], _structure20: Eq[T], _structure21: Eq[U], _structure22: Eq[V]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "spire.std.EqProductInstances.EqProduct22", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K],implicit_structure12:spire.algebra.Eq[L],implicit_structure13:spire.algebra.Eq[M],implicit_structure14:spire.algebra.Eq[N],implicit_structure15:spire.algebra.Eq[O],implicit_structure16:spire.algebra.Eq[P],implicit_structure17:spire.algebra.Eq[Q],implicit_structure18:spire.algebra.Eq[R],implicit_structure19:spire.algebra.Eq[S],implicit_structure20:spire.algebra.Eq[T],implicit_structure21:spire.algebra.Eq[U],implicit_structure22:spire.algebra.Eq[V]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "EqProduct21", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q], _structure18: Eq[R], _structure19: Eq[S], _structure20: Eq[T], _structure21: Eq[U]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "spire.std.EqProductInstances.EqProduct21", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K],implicit_structure12:spire.algebra.Eq[L],implicit_structure13:spire.algebra.Eq[M],implicit_structure14:spire.algebra.Eq[N],implicit_structure15:spire.algebra.Eq[O],implicit_structure16:spire.algebra.Eq[P],implicit_structure17:spire.algebra.Eq[Q],implicit_structure18:spire.algebra.Eq[R],implicit_structure19:spire.algebra.Eq[S],implicit_structure20:spire.algebra.Eq[T],implicit_structure21:spire.algebra.Eq[U]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "EqProduct20", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q], _structure18: Eq[R], _structure19: Eq[S], _structure20: Eq[T]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "spire.std.EqProductInstances.EqProduct20", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K],implicit_structure12:spire.algebra.Eq[L],implicit_structure13:spire.algebra.Eq[M],implicit_structure14:spire.algebra.Eq[N],implicit_structure15:spire.algebra.Eq[O],implicit_structure16:spire.algebra.Eq[P],implicit_structure17:spire.algebra.Eq[Q],implicit_structure18:spire.algebra.Eq[R],implicit_structure19:spire.algebra.Eq[S],implicit_structure20:spire.algebra.Eq[T]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "EqProduct19", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q], _structure18: Eq[R], _structure19: Eq[S]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "spire.std.EqProductInstances.EqProduct19", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K],implicit_structure12:spire.algebra.Eq[L],implicit_structure13:spire.algebra.Eq[M],implicit_structure14:spire.algebra.Eq[N],implicit_structure15:spire.algebra.Eq[O],implicit_structure16:spire.algebra.Eq[P],implicit_structure17:spire.algebra.Eq[Q],implicit_structure18:spire.algebra.Eq[R],implicit_structure19:spire.algebra.Eq[S]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "EqProduct18", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q], _structure18: Eq[R]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "spire.std.EqProductInstances.EqProduct18", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K],implicit_structure12:spire.algebra.Eq[L],implicit_structure13:spire.algebra.Eq[M],implicit_structure14:spire.algebra.Eq[N],implicit_structure15:spire.algebra.Eq[O],implicit_structure16:spire.algebra.Eq[P],implicit_structure17:spire.algebra.Eq[Q],implicit_structure18:spire.algebra.Eq[R]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "EqProduct17", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "spire.std.EqProductInstances.EqProduct17", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K],implicit_structure12:spire.algebra.Eq[L],implicit_structure13:spire.algebra.Eq[M],implicit_structure14:spire.algebra.Eq[N],implicit_structure15:spire.algebra.Eq[O],implicit_structure16:spire.algebra.Eq[P],implicit_structure17:spire.algebra.Eq[Q]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "EqProduct16", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "spire.std.EqProductInstances.EqProduct16", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K],implicit_structure12:spire.algebra.Eq[L],implicit_structure13:spire.algebra.Eq[M],implicit_structure14:spire.algebra.Eq[N],implicit_structure15:spire.algebra.Eq[O],implicit_structure16:spire.algebra.Eq[P]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "EqProduct15", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "spire.std.EqProductInstances.EqProduct15", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K],implicit_structure12:spire.algebra.Eq[L],implicit_structure13:spire.algebra.Eq[M],implicit_structure14:spire.algebra.Eq[N],implicit_structure15:spire.algebra.Eq[O]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "EqProduct14", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "spire.std.EqProductInstances.EqProduct14", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct14[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K],implicit_structure12:spire.algebra.Eq[L],implicit_structure13:spire.algebra.Eq[M],implicit_structure14:spire.algebra.Eq[N]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "EqProduct13", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "spire.std.EqProductInstances.EqProduct13", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct13[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K],implicit_structure12:spire.algebra.Eq[L],implicit_structure13:spire.algebra.Eq[M]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "EqProduct12", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "spire.std.EqProductInstances.EqProduct12", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct12[A,B,C,D,E,F,G,H,I,J,K,L](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K],implicit_structure12:spire.algebra.Eq[L]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "EqProduct11", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K]): Eq[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "spire.std.EqProductInstances.EqProduct11", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct11[A,B,C,D,E,F,G,H,I,J,K](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J],implicit_structure11:spire.algebra.Eq[K]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "EqProduct10", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J]): Eq[(A, B, C, D, E, F, G, H, I, J)]", "member" : "spire.std.EqProductInstances.EqProduct10", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct10[A,B,C,D,E,F,G,H,I,J](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I],implicit_structure10:spire.algebra.Eq[J]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "EqProduct9", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I]): Eq[(A, B, C, D, E, F, G, H, I)]", "member" : "spire.std.EqProductInstances.EqProduct9", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct9[A,B,C,D,E,F,G,H,I](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H],implicit_structure9:spire.algebra.Eq[I]):spire.algebra.Eq[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "EqProduct8", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H]): Eq[(A, B, C, D, E, F, G, H)]", "member" : "spire.std.EqProductInstances.EqProduct8", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct8[A,B,C,D,E,F,G,H](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G],implicit_structure8:spire.algebra.Eq[H]):spire.algebra.Eq[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "EqProduct7", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G]): Eq[(A, B, C, D, E, F, G)]", "member" : "spire.std.EqProductInstances.EqProduct7", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct7[A,B,C,D,E,F,G](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F],implicit_structure7:spire.algebra.Eq[G]):spire.algebra.Eq[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "EqProduct6", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F]): Eq[(A, B, C, D, E, F)]", "member" : "spire.std.EqProductInstances.EqProduct6", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct6[A,B,C,D,E,F](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E],implicit_structure6:spire.algebra.Eq[F]):spire.algebra.Eq[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "EqProduct5", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E]): Eq[(A, B, C, D, E)]", "member" : "spire.std.EqProductInstances.EqProduct5", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct5[A,B,C,D,E](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D],implicit_structure5:spire.algebra.Eq[E]):spire.algebra.Eq[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "EqProduct4", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D]): Eq[(A, B, C, D)]", "member" : "spire.std.EqProductInstances.EqProduct4", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct4[A,B,C,D](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C],implicit_structure4:spire.algebra.Eq[D]):spire.algebra.Eq[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "EqProduct3", "tail" : "(_structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C]): Eq[(A, B, C)]", "member" : "spire.std.EqProductInstances.EqProduct3", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct3[A,B,C](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B],implicit_structure3:spire.algebra.Eq[C]):spire.algebra.Eq[(A,B,C)]", "kind" : "implicit def"}, {"label" : "EqProduct2", "tail" : "(_structure1: Eq[A], _structure2: Eq[B]): Eq[(A, B)]", "member" : "spire.std.EqProductInstances.EqProduct2", "link" : "net\/alasc\/symdpoly\/defaults$.html#EqProduct2[A,B](implicit_structure1:spire.algebra.Eq[A],implicit_structure2:spire.algebra.Eq[B]):spire.algebra.Eq[(A,B)]", "kind" : "implicit def"}, {"label" : "RingProduct22", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q], _structure18: Ring[R], _structure19: Ring[S], _structure20: Ring[T], _structure21: Ring[U], _structure22: Ring[V]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "spire.std.RingProductInstances.RingProduct22", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K],implicit_structure12:spire.algebra.Ring[L],implicit_structure13:spire.algebra.Ring[M],implicit_structure14:spire.algebra.Ring[N],implicit_structure15:spire.algebra.Ring[O],implicit_structure16:spire.algebra.Ring[P],implicit_structure17:spire.algebra.Ring[Q],implicit_structure18:spire.algebra.Ring[R],implicit_structure19:spire.algebra.Ring[S],implicit_structure20:spire.algebra.Ring[T],implicit_structure21:spire.algebra.Ring[U],implicit_structure22:spire.algebra.Ring[V]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "RingProduct21", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q], _structure18: Ring[R], _structure19: Ring[S], _structure20: Ring[T], _structure21: Ring[U]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "spire.std.RingProductInstances.RingProduct21", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K],implicit_structure12:spire.algebra.Ring[L],implicit_structure13:spire.algebra.Ring[M],implicit_structure14:spire.algebra.Ring[N],implicit_structure15:spire.algebra.Ring[O],implicit_structure16:spire.algebra.Ring[P],implicit_structure17:spire.algebra.Ring[Q],implicit_structure18:spire.algebra.Ring[R],implicit_structure19:spire.algebra.Ring[S],implicit_structure20:spire.algebra.Ring[T],implicit_structure21:spire.algebra.Ring[U]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "RingProduct20", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q], _structure18: Ring[R], _structure19: Ring[S], _structure20: Ring[T]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "spire.std.RingProductInstances.RingProduct20", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K],implicit_structure12:spire.algebra.Ring[L],implicit_structure13:spire.algebra.Ring[M],implicit_structure14:spire.algebra.Ring[N],implicit_structure15:spire.algebra.Ring[O],implicit_structure16:spire.algebra.Ring[P],implicit_structure17:spire.algebra.Ring[Q],implicit_structure18:spire.algebra.Ring[R],implicit_structure19:spire.algebra.Ring[S],implicit_structure20:spire.algebra.Ring[T]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "RingProduct19", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q], _structure18: Ring[R], _structure19: Ring[S]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "spire.std.RingProductInstances.RingProduct19", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K],implicit_structure12:spire.algebra.Ring[L],implicit_structure13:spire.algebra.Ring[M],implicit_structure14:spire.algebra.Ring[N],implicit_structure15:spire.algebra.Ring[O],implicit_structure16:spire.algebra.Ring[P],implicit_structure17:spire.algebra.Ring[Q],implicit_structure18:spire.algebra.Ring[R],implicit_structure19:spire.algebra.Ring[S]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "RingProduct18", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q], _structure18: Ring[R]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "spire.std.RingProductInstances.RingProduct18", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K],implicit_structure12:spire.algebra.Ring[L],implicit_structure13:spire.algebra.Ring[M],implicit_structure14:spire.algebra.Ring[N],implicit_structure15:spire.algebra.Ring[O],implicit_structure16:spire.algebra.Ring[P],implicit_structure17:spire.algebra.Ring[Q],implicit_structure18:spire.algebra.Ring[R]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "RingProduct17", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "spire.std.RingProductInstances.RingProduct17", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K],implicit_structure12:spire.algebra.Ring[L],implicit_structure13:spire.algebra.Ring[M],implicit_structure14:spire.algebra.Ring[N],implicit_structure15:spire.algebra.Ring[O],implicit_structure16:spire.algebra.Ring[P],implicit_structure17:spire.algebra.Ring[Q]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "RingProduct16", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "spire.std.RingProductInstances.RingProduct16", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K],implicit_structure12:spire.algebra.Ring[L],implicit_structure13:spire.algebra.Ring[M],implicit_structure14:spire.algebra.Ring[N],implicit_structure15:spire.algebra.Ring[O],implicit_structure16:spire.algebra.Ring[P]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "RingProduct15", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "spire.std.RingProductInstances.RingProduct15", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K],implicit_structure12:spire.algebra.Ring[L],implicit_structure13:spire.algebra.Ring[M],implicit_structure14:spire.algebra.Ring[N],implicit_structure15:spire.algebra.Ring[O]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "RingProduct14", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "spire.std.RingProductInstances.RingProduct14", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct14[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K],implicit_structure12:spire.algebra.Ring[L],implicit_structure13:spire.algebra.Ring[M],implicit_structure14:spire.algebra.Ring[N]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "RingProduct13", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "spire.std.RingProductInstances.RingProduct13", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct13[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K],implicit_structure12:spire.algebra.Ring[L],implicit_structure13:spire.algebra.Ring[M]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "RingProduct12", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "spire.std.RingProductInstances.RingProduct12", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct12[A,B,C,D,E,F,G,H,I,J,K,L](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K],implicit_structure12:spire.algebra.Ring[L]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "RingProduct11", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K]): Ring[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "spire.std.RingProductInstances.RingProduct11", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct11[A,B,C,D,E,F,G,H,I,J,K](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J],implicit_structure11:spire.algebra.Ring[K]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "RingProduct10", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J]): Ring[(A, B, C, D, E, F, G, H, I, J)]", "member" : "spire.std.RingProductInstances.RingProduct10", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct10[A,B,C,D,E,F,G,H,I,J](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I],implicit_structure10:spire.algebra.Ring[J]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "RingProduct9", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I]): Ring[(A, B, C, D, E, F, G, H, I)]", "member" : "spire.std.RingProductInstances.RingProduct9", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct9[A,B,C,D,E,F,G,H,I](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H],implicit_structure9:spire.algebra.Ring[I]):spire.algebra.Ring[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "RingProduct8", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H]): Ring[(A, B, C, D, E, F, G, H)]", "member" : "spire.std.RingProductInstances.RingProduct8", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct8[A,B,C,D,E,F,G,H](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G],implicit_structure8:spire.algebra.Ring[H]):spire.algebra.Ring[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "RingProduct7", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G]): Ring[(A, B, C, D, E, F, G)]", "member" : "spire.std.RingProductInstances.RingProduct7", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct7[A,B,C,D,E,F,G](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F],implicit_structure7:spire.algebra.Ring[G]):spire.algebra.Ring[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "RingProduct6", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F]): Ring[(A, B, C, D, E, F)]", "member" : "spire.std.RingProductInstances.RingProduct6", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct6[A,B,C,D,E,F](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E],implicit_structure6:spire.algebra.Ring[F]):spire.algebra.Ring[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "RingProduct5", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E]): Ring[(A, B, C, D, E)]", "member" : "spire.std.RingProductInstances.RingProduct5", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct5[A,B,C,D,E](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D],implicit_structure5:spire.algebra.Ring[E]):spire.algebra.Ring[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "RingProduct4", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D]): Ring[(A, B, C, D)]", "member" : "spire.std.RingProductInstances.RingProduct4", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct4[A,B,C,D](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C],implicit_structure4:spire.algebra.Ring[D]):spire.algebra.Ring[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "RingProduct3", "tail" : "(_structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C]): Ring[(A, B, C)]", "member" : "spire.std.RingProductInstances.RingProduct3", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct3[A,B,C](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B],implicit_structure3:spire.algebra.Ring[C]):spire.algebra.Ring[(A,B,C)]", "kind" : "implicit def"}, {"label" : "RingProduct2", "tail" : "(_structure1: Ring[A], _structure2: Ring[B]): Ring[(A, B)]", "member" : "spire.std.RingProductInstances.RingProduct2", "link" : "net\/alasc\/symdpoly\/defaults$.html#RingProduct2[A,B](implicit_structure1:spire.algebra.Ring[A],implicit_structure2:spire.algebra.Ring[B]):spire.algebra.Ring[(A,B)]", "kind" : "implicit def"}, {"label" : "RigProduct22", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q], _structure18: Rig[R], _structure19: Rig[S], _structure20: Rig[T], _structure21: Rig[U], _structure22: Rig[V]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "spire.std.RigProductInstances.RigProduct22", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K],implicit_structure12:spire.algebra.Rig[L],implicit_structure13:spire.algebra.Rig[M],implicit_structure14:spire.algebra.Rig[N],implicit_structure15:spire.algebra.Rig[O],implicit_structure16:spire.algebra.Rig[P],implicit_structure17:spire.algebra.Rig[Q],implicit_structure18:spire.algebra.Rig[R],implicit_structure19:spire.algebra.Rig[S],implicit_structure20:spire.algebra.Rig[T],implicit_structure21:spire.algebra.Rig[U],implicit_structure22:spire.algebra.Rig[V]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "RigProduct21", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q], _structure18: Rig[R], _structure19: Rig[S], _structure20: Rig[T], _structure21: Rig[U]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "spire.std.RigProductInstances.RigProduct21", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K],implicit_structure12:spire.algebra.Rig[L],implicit_structure13:spire.algebra.Rig[M],implicit_structure14:spire.algebra.Rig[N],implicit_structure15:spire.algebra.Rig[O],implicit_structure16:spire.algebra.Rig[P],implicit_structure17:spire.algebra.Rig[Q],implicit_structure18:spire.algebra.Rig[R],implicit_structure19:spire.algebra.Rig[S],implicit_structure20:spire.algebra.Rig[T],implicit_structure21:spire.algebra.Rig[U]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "RigProduct20", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q], _structure18: Rig[R], _structure19: Rig[S], _structure20: Rig[T]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "spire.std.RigProductInstances.RigProduct20", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K],implicit_structure12:spire.algebra.Rig[L],implicit_structure13:spire.algebra.Rig[M],implicit_structure14:spire.algebra.Rig[N],implicit_structure15:spire.algebra.Rig[O],implicit_structure16:spire.algebra.Rig[P],implicit_structure17:spire.algebra.Rig[Q],implicit_structure18:spire.algebra.Rig[R],implicit_structure19:spire.algebra.Rig[S],implicit_structure20:spire.algebra.Rig[T]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "RigProduct19", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q], _structure18: Rig[R], _structure19: Rig[S]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "spire.std.RigProductInstances.RigProduct19", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K],implicit_structure12:spire.algebra.Rig[L],implicit_structure13:spire.algebra.Rig[M],implicit_structure14:spire.algebra.Rig[N],implicit_structure15:spire.algebra.Rig[O],implicit_structure16:spire.algebra.Rig[P],implicit_structure17:spire.algebra.Rig[Q],implicit_structure18:spire.algebra.Rig[R],implicit_structure19:spire.algebra.Rig[S]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "RigProduct18", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q], _structure18: Rig[R]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "spire.std.RigProductInstances.RigProduct18", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K],implicit_structure12:spire.algebra.Rig[L],implicit_structure13:spire.algebra.Rig[M],implicit_structure14:spire.algebra.Rig[N],implicit_structure15:spire.algebra.Rig[O],implicit_structure16:spire.algebra.Rig[P],implicit_structure17:spire.algebra.Rig[Q],implicit_structure18:spire.algebra.Rig[R]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "RigProduct17", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "spire.std.RigProductInstances.RigProduct17", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K],implicit_structure12:spire.algebra.Rig[L],implicit_structure13:spire.algebra.Rig[M],implicit_structure14:spire.algebra.Rig[N],implicit_structure15:spire.algebra.Rig[O],implicit_structure16:spire.algebra.Rig[P],implicit_structure17:spire.algebra.Rig[Q]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "RigProduct16", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "spire.std.RigProductInstances.RigProduct16", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K],implicit_structure12:spire.algebra.Rig[L],implicit_structure13:spire.algebra.Rig[M],implicit_structure14:spire.algebra.Rig[N],implicit_structure15:spire.algebra.Rig[O],implicit_structure16:spire.algebra.Rig[P]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "RigProduct15", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "spire.std.RigProductInstances.RigProduct15", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K],implicit_structure12:spire.algebra.Rig[L],implicit_structure13:spire.algebra.Rig[M],implicit_structure14:spire.algebra.Rig[N],implicit_structure15:spire.algebra.Rig[O]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "RigProduct14", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "spire.std.RigProductInstances.RigProduct14", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct14[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K],implicit_structure12:spire.algebra.Rig[L],implicit_structure13:spire.algebra.Rig[M],implicit_structure14:spire.algebra.Rig[N]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "RigProduct13", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "spire.std.RigProductInstances.RigProduct13", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct13[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K],implicit_structure12:spire.algebra.Rig[L],implicit_structure13:spire.algebra.Rig[M]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "RigProduct12", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "spire.std.RigProductInstances.RigProduct12", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct12[A,B,C,D,E,F,G,H,I,J,K,L](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K],implicit_structure12:spire.algebra.Rig[L]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "RigProduct11", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K]): Rig[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "spire.std.RigProductInstances.RigProduct11", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct11[A,B,C,D,E,F,G,H,I,J,K](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J],implicit_structure11:spire.algebra.Rig[K]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "RigProduct10", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J]): Rig[(A, B, C, D, E, F, G, H, I, J)]", "member" : "spire.std.RigProductInstances.RigProduct10", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct10[A,B,C,D,E,F,G,H,I,J](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I],implicit_structure10:spire.algebra.Rig[J]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "RigProduct9", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I]): Rig[(A, B, C, D, E, F, G, H, I)]", "member" : "spire.std.RigProductInstances.RigProduct9", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct9[A,B,C,D,E,F,G,H,I](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H],implicit_structure9:spire.algebra.Rig[I]):spire.algebra.Rig[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "RigProduct8", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H]): Rig[(A, B, C, D, E, F, G, H)]", "member" : "spire.std.RigProductInstances.RigProduct8", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct8[A,B,C,D,E,F,G,H](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G],implicit_structure8:spire.algebra.Rig[H]):spire.algebra.Rig[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "RigProduct7", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G]): Rig[(A, B, C, D, E, F, G)]", "member" : "spire.std.RigProductInstances.RigProduct7", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct7[A,B,C,D,E,F,G](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F],implicit_structure7:spire.algebra.Rig[G]):spire.algebra.Rig[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "RigProduct6", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F]): Rig[(A, B, C, D, E, F)]", "member" : "spire.std.RigProductInstances.RigProduct6", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct6[A,B,C,D,E,F](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E],implicit_structure6:spire.algebra.Rig[F]):spire.algebra.Rig[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "RigProduct5", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E]): Rig[(A, B, C, D, E)]", "member" : "spire.std.RigProductInstances.RigProduct5", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct5[A,B,C,D,E](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D],implicit_structure5:spire.algebra.Rig[E]):spire.algebra.Rig[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "RigProduct4", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D]): Rig[(A, B, C, D)]", "member" : "spire.std.RigProductInstances.RigProduct4", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct4[A,B,C,D](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C],implicit_structure4:spire.algebra.Rig[D]):spire.algebra.Rig[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "RigProduct3", "tail" : "(_structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C]): Rig[(A, B, C)]", "member" : "spire.std.RigProductInstances.RigProduct3", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct3[A,B,C](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B],implicit_structure3:spire.algebra.Rig[C]):spire.algebra.Rig[(A,B,C)]", "kind" : "implicit def"}, {"label" : "RigProduct2", "tail" : "(_structure1: Rig[A], _structure2: Rig[B]): Rig[(A, B)]", "member" : "spire.std.RigProductInstances.RigProduct2", "link" : "net\/alasc\/symdpoly\/defaults$.html#RigProduct2[A,B](implicit_structure1:spire.algebra.Rig[A],implicit_structure2:spire.algebra.Rig[B]):spire.algebra.Rig[(A,B)]", "kind" : "implicit def"}, {"label" : "RngProduct22", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q], _structure18: Rng[R], _structure19: Rng[S], _structure20: Rng[T], _structure21: Rng[U], _structure22: Rng[V]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "spire.std.RngProductInstances.RngProduct22", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K],implicit_structure12:spire.algebra.Rng[L],implicit_structure13:spire.algebra.Rng[M],implicit_structure14:spire.algebra.Rng[N],implicit_structure15:spire.algebra.Rng[O],implicit_structure16:spire.algebra.Rng[P],implicit_structure17:spire.algebra.Rng[Q],implicit_structure18:spire.algebra.Rng[R],implicit_structure19:spire.algebra.Rng[S],implicit_structure20:spire.algebra.Rng[T],implicit_structure21:spire.algebra.Rng[U],implicit_structure22:spire.algebra.Rng[V]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "RngProduct21", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q], _structure18: Rng[R], _structure19: Rng[S], _structure20: Rng[T], _structure21: Rng[U]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "spire.std.RngProductInstances.RngProduct21", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K],implicit_structure12:spire.algebra.Rng[L],implicit_structure13:spire.algebra.Rng[M],implicit_structure14:spire.algebra.Rng[N],implicit_structure15:spire.algebra.Rng[O],implicit_structure16:spire.algebra.Rng[P],implicit_structure17:spire.algebra.Rng[Q],implicit_structure18:spire.algebra.Rng[R],implicit_structure19:spire.algebra.Rng[S],implicit_structure20:spire.algebra.Rng[T],implicit_structure21:spire.algebra.Rng[U]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "RngProduct20", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q], _structure18: Rng[R], _structure19: Rng[S], _structure20: Rng[T]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "spire.std.RngProductInstances.RngProduct20", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K],implicit_structure12:spire.algebra.Rng[L],implicit_structure13:spire.algebra.Rng[M],implicit_structure14:spire.algebra.Rng[N],implicit_structure15:spire.algebra.Rng[O],implicit_structure16:spire.algebra.Rng[P],implicit_structure17:spire.algebra.Rng[Q],implicit_structure18:spire.algebra.Rng[R],implicit_structure19:spire.algebra.Rng[S],implicit_structure20:spire.algebra.Rng[T]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "RngProduct19", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q], _structure18: Rng[R], _structure19: Rng[S]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "spire.std.RngProductInstances.RngProduct19", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K],implicit_structure12:spire.algebra.Rng[L],implicit_structure13:spire.algebra.Rng[M],implicit_structure14:spire.algebra.Rng[N],implicit_structure15:spire.algebra.Rng[O],implicit_structure16:spire.algebra.Rng[P],implicit_structure17:spire.algebra.Rng[Q],implicit_structure18:spire.algebra.Rng[R],implicit_structure19:spire.algebra.Rng[S]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "RngProduct18", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q], _structure18: Rng[R]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "spire.std.RngProductInstances.RngProduct18", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K],implicit_structure12:spire.algebra.Rng[L],implicit_structure13:spire.algebra.Rng[M],implicit_structure14:spire.algebra.Rng[N],implicit_structure15:spire.algebra.Rng[O],implicit_structure16:spire.algebra.Rng[P],implicit_structure17:spire.algebra.Rng[Q],implicit_structure18:spire.algebra.Rng[R]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "RngProduct17", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "spire.std.RngProductInstances.RngProduct17", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K],implicit_structure12:spire.algebra.Rng[L],implicit_structure13:spire.algebra.Rng[M],implicit_structure14:spire.algebra.Rng[N],implicit_structure15:spire.algebra.Rng[O],implicit_structure16:spire.algebra.Rng[P],implicit_structure17:spire.algebra.Rng[Q]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "RngProduct16", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "spire.std.RngProductInstances.RngProduct16", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K],implicit_structure12:spire.algebra.Rng[L],implicit_structure13:spire.algebra.Rng[M],implicit_structure14:spire.algebra.Rng[N],implicit_structure15:spire.algebra.Rng[O],implicit_structure16:spire.algebra.Rng[P]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "RngProduct15", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "spire.std.RngProductInstances.RngProduct15", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K],implicit_structure12:spire.algebra.Rng[L],implicit_structure13:spire.algebra.Rng[M],implicit_structure14:spire.algebra.Rng[N],implicit_structure15:spire.algebra.Rng[O]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "RngProduct14", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "spire.std.RngProductInstances.RngProduct14", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct14[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K],implicit_structure12:spire.algebra.Rng[L],implicit_structure13:spire.algebra.Rng[M],implicit_structure14:spire.algebra.Rng[N]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "RngProduct13", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "spire.std.RngProductInstances.RngProduct13", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct13[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K],implicit_structure12:spire.algebra.Rng[L],implicit_structure13:spire.algebra.Rng[M]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "RngProduct12", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "spire.std.RngProductInstances.RngProduct12", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct12[A,B,C,D,E,F,G,H,I,J,K,L](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K],implicit_structure12:spire.algebra.Rng[L]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "RngProduct11", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K]): Rng[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "spire.std.RngProductInstances.RngProduct11", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct11[A,B,C,D,E,F,G,H,I,J,K](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J],implicit_structure11:spire.algebra.Rng[K]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "RngProduct10", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J]): Rng[(A, B, C, D, E, F, G, H, I, J)]", "member" : "spire.std.RngProductInstances.RngProduct10", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct10[A,B,C,D,E,F,G,H,I,J](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I],implicit_structure10:spire.algebra.Rng[J]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "RngProduct9", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I]): Rng[(A, B, C, D, E, F, G, H, I)]", "member" : "spire.std.RngProductInstances.RngProduct9", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct9[A,B,C,D,E,F,G,H,I](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H],implicit_structure9:spire.algebra.Rng[I]):spire.algebra.Rng[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "RngProduct8", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H]): Rng[(A, B, C, D, E, F, G, H)]", "member" : "spire.std.RngProductInstances.RngProduct8", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct8[A,B,C,D,E,F,G,H](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G],implicit_structure8:spire.algebra.Rng[H]):spire.algebra.Rng[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "RngProduct7", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G]): Rng[(A, B, C, D, E, F, G)]", "member" : "spire.std.RngProductInstances.RngProduct7", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct7[A,B,C,D,E,F,G](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F],implicit_structure7:spire.algebra.Rng[G]):spire.algebra.Rng[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "RngProduct6", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F]): Rng[(A, B, C, D, E, F)]", "member" : "spire.std.RngProductInstances.RngProduct6", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct6[A,B,C,D,E,F](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E],implicit_structure6:spire.algebra.Rng[F]):spire.algebra.Rng[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "RngProduct5", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E]): Rng[(A, B, C, D, E)]", "member" : "spire.std.RngProductInstances.RngProduct5", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct5[A,B,C,D,E](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D],implicit_structure5:spire.algebra.Rng[E]):spire.algebra.Rng[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "RngProduct4", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D]): Rng[(A, B, C, D)]", "member" : "spire.std.RngProductInstances.RngProduct4", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct4[A,B,C,D](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C],implicit_structure4:spire.algebra.Rng[D]):spire.algebra.Rng[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "RngProduct3", "tail" : "(_structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C]): Rng[(A, B, C)]", "member" : "spire.std.RngProductInstances.RngProduct3", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct3[A,B,C](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B],implicit_structure3:spire.algebra.Rng[C]):spire.algebra.Rng[(A,B,C)]", "kind" : "implicit def"}, {"label" : "RngProduct2", "tail" : "(_structure1: Rng[A], _structure2: Rng[B]): Rng[(A, B)]", "member" : "spire.std.RngProductInstances.RngProduct2", "link" : "net\/alasc\/symdpoly\/defaults$.html#RngProduct2[A,B](implicit_structure1:spire.algebra.Rng[A],implicit_structure2:spire.algebra.Rng[B]):spire.algebra.Rng[(A,B)]", "kind" : "implicit def"}, {"label" : "SemiringProduct22", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q], _structure18: Semiring[R], _structure19: Semiring[S], _structure20: Semiring[T], _structure21: Semiring[U], _structure22: Semiring[V]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct22", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K],implicit_structure12:spire.algebra.Semiring[L],implicit_structure13:spire.algebra.Semiring[M],implicit_structure14:spire.algebra.Semiring[N],implicit_structure15:spire.algebra.Semiring[O],implicit_structure16:spire.algebra.Semiring[P],implicit_structure17:spire.algebra.Semiring[Q],implicit_structure18:spire.algebra.Semiring[R],implicit_structure19:spire.algebra.Semiring[S],implicit_structure20:spire.algebra.Semiring[T],implicit_structure21:spire.algebra.Semiring[U],implicit_structure22:spire.algebra.Semiring[V]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "SemiringProduct21", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q], _structure18: Semiring[R], _structure19: Semiring[S], _structure20: Semiring[T], _structure21: Semiring[U]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct21", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K],implicit_structure12:spire.algebra.Semiring[L],implicit_structure13:spire.algebra.Semiring[M],implicit_structure14:spire.algebra.Semiring[N],implicit_structure15:spire.algebra.Semiring[O],implicit_structure16:spire.algebra.Semiring[P],implicit_structure17:spire.algebra.Semiring[Q],implicit_structure18:spire.algebra.Semiring[R],implicit_structure19:spire.algebra.Semiring[S],implicit_structure20:spire.algebra.Semiring[T],implicit_structure21:spire.algebra.Semiring[U]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "SemiringProduct20", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q], _structure18: Semiring[R], _structure19: Semiring[S], _structure20: Semiring[T]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct20", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K],implicit_structure12:spire.algebra.Semiring[L],implicit_structure13:spire.algebra.Semiring[M],implicit_structure14:spire.algebra.Semiring[N],implicit_structure15:spire.algebra.Semiring[O],implicit_structure16:spire.algebra.Semiring[P],implicit_structure17:spire.algebra.Semiring[Q],implicit_structure18:spire.algebra.Semiring[R],implicit_structure19:spire.algebra.Semiring[S],implicit_structure20:spire.algebra.Semiring[T]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "SemiringProduct19", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q], _structure18: Semiring[R], _structure19: Semiring[S]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct19", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K],implicit_structure12:spire.algebra.Semiring[L],implicit_structure13:spire.algebra.Semiring[M],implicit_structure14:spire.algebra.Semiring[N],implicit_structure15:spire.algebra.Semiring[O],implicit_structure16:spire.algebra.Semiring[P],implicit_structure17:spire.algebra.Semiring[Q],implicit_structure18:spire.algebra.Semiring[R],implicit_structure19:spire.algebra.Semiring[S]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "SemiringProduct18", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q], _structure18: Semiring[R]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct18", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K],implicit_structure12:spire.algebra.Semiring[L],implicit_structure13:spire.algebra.Semiring[M],implicit_structure14:spire.algebra.Semiring[N],implicit_structure15:spire.algebra.Semiring[O],implicit_structure16:spire.algebra.Semiring[P],implicit_structure17:spire.algebra.Semiring[Q],implicit_structure18:spire.algebra.Semiring[R]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "SemiringProduct17", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct17", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K],implicit_structure12:spire.algebra.Semiring[L],implicit_structure13:spire.algebra.Semiring[M],implicit_structure14:spire.algebra.Semiring[N],implicit_structure15:spire.algebra.Semiring[O],implicit_structure16:spire.algebra.Semiring[P],implicit_structure17:spire.algebra.Semiring[Q]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "SemiringProduct16", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct16", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K],implicit_structure12:spire.algebra.Semiring[L],implicit_structure13:spire.algebra.Semiring[M],implicit_structure14:spire.algebra.Semiring[N],implicit_structure15:spire.algebra.Semiring[O],implicit_structure16:spire.algebra.Semiring[P]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "SemiringProduct15", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct15", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K],implicit_structure12:spire.algebra.Semiring[L],implicit_structure13:spire.algebra.Semiring[M],implicit_structure14:spire.algebra.Semiring[N],implicit_structure15:spire.algebra.Semiring[O]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "SemiringProduct14", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct14", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct14[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K],implicit_structure12:spire.algebra.Semiring[L],implicit_structure13:spire.algebra.Semiring[M],implicit_structure14:spire.algebra.Semiring[N]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "SemiringProduct13", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct13", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct13[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K],implicit_structure12:spire.algebra.Semiring[L],implicit_structure13:spire.algebra.Semiring[M]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "SemiringProduct12", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct12", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct12[A,B,C,D,E,F,G,H,I,J,K,L](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K],implicit_structure12:spire.algebra.Semiring[L]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "SemiringProduct11", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K]): Semiring[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct11", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct11[A,B,C,D,E,F,G,H,I,J,K](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J],implicit_structure11:spire.algebra.Semiring[K]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "SemiringProduct10", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J]): Semiring[(A, B, C, D, E, F, G, H, I, J)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct10", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct10[A,B,C,D,E,F,G,H,I,J](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I],implicit_structure10:spire.algebra.Semiring[J]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "SemiringProduct9", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I]): Semiring[(A, B, C, D, E, F, G, H, I)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct9", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct9[A,B,C,D,E,F,G,H,I](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H],implicit_structure9:spire.algebra.Semiring[I]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "SemiringProduct8", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H]): Semiring[(A, B, C, D, E, F, G, H)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct8", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct8[A,B,C,D,E,F,G,H](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G],implicit_structure8:spire.algebra.Semiring[H]):spire.algebra.Semiring[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "SemiringProduct7", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G]): Semiring[(A, B, C, D, E, F, G)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct7", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct7[A,B,C,D,E,F,G](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F],implicit_structure7:spire.algebra.Semiring[G]):spire.algebra.Semiring[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "SemiringProduct6", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F]): Semiring[(A, B, C, D, E, F)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct6", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct6[A,B,C,D,E,F](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E],implicit_structure6:spire.algebra.Semiring[F]):spire.algebra.Semiring[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "SemiringProduct5", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E]): Semiring[(A, B, C, D, E)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct5", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct5[A,B,C,D,E](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D],implicit_structure5:spire.algebra.Semiring[E]):spire.algebra.Semiring[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "SemiringProduct4", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D]): Semiring[(A, B, C, D)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct4", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct4[A,B,C,D](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C],implicit_structure4:spire.algebra.Semiring[D]):spire.algebra.Semiring[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "SemiringProduct3", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C]): Semiring[(A, B, C)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct3", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct3[A,B,C](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B],implicit_structure3:spire.algebra.Semiring[C]):spire.algebra.Semiring[(A,B,C)]", "kind" : "implicit def"}, {"label" : "SemiringProduct2", "tail" : "(_structure1: Semiring[A], _structure2: Semiring[B]): Semiring[(A, B)]", "member" : "spire.std.SemiringProductInstances.SemiringProduct2", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemiringProduct2[A,B](implicit_structure1:spire.algebra.Semiring[A],implicit_structure2:spire.algebra.Semiring[B]):spire.algebra.Semiring[(A,B)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct22", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K], _structure12: AbGroup[L], _structure13: AbGroup[M], _structure14: AbGroup[N], _structure15: AbGroup[O], _structure16: AbGroup[P], _structure17: AbGroup[Q], _structure18: AbGroup[R], _structure19: AbGroup[S], _structure20: AbGroup[T], _structure21: AbGroup[U], _structure22: AbGroup[V]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct22", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K],implicit_structure12:spire.algebra.AbGroup[L],implicit_structure13:spire.algebra.AbGroup[M],implicit_structure14:spire.algebra.AbGroup[N],implicit_structure15:spire.algebra.AbGroup[O],implicit_structure16:spire.algebra.AbGroup[P],implicit_structure17:spire.algebra.AbGroup[Q],implicit_structure18:spire.algebra.AbGroup[R],implicit_structure19:spire.algebra.AbGroup[S],implicit_structure20:spire.algebra.AbGroup[T],implicit_structure21:spire.algebra.AbGroup[U],implicit_structure22:spire.algebra.AbGroup[V]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct21", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K], _structure12: AbGroup[L], _structure13: AbGroup[M], _structure14: AbGroup[N], _structure15: AbGroup[O], _structure16: AbGroup[P], _structure17: AbGroup[Q], _structure18: AbGroup[R], _structure19: AbGroup[S], _structure20: AbGroup[T], _structure21: AbGroup[U]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct21", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K],implicit_structure12:spire.algebra.AbGroup[L],implicit_structure13:spire.algebra.AbGroup[M],implicit_structure14:spire.algebra.AbGroup[N],implicit_structure15:spire.algebra.AbGroup[O],implicit_structure16:spire.algebra.AbGroup[P],implicit_structure17:spire.algebra.AbGroup[Q],implicit_structure18:spire.algebra.AbGroup[R],implicit_structure19:spire.algebra.AbGroup[S],implicit_structure20:spire.algebra.AbGroup[T],implicit_structure21:spire.algebra.AbGroup[U]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct20", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K], _structure12: AbGroup[L], _structure13: AbGroup[M], _structure14: AbGroup[N], _structure15: AbGroup[O], _structure16: AbGroup[P], _structure17: AbGroup[Q], _structure18: AbGroup[R], _structure19: AbGroup[S], _structure20: AbGroup[T]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct20", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K],implicit_structure12:spire.algebra.AbGroup[L],implicit_structure13:spire.algebra.AbGroup[M],implicit_structure14:spire.algebra.AbGroup[N],implicit_structure15:spire.algebra.AbGroup[O],implicit_structure16:spire.algebra.AbGroup[P],implicit_structure17:spire.algebra.AbGroup[Q],implicit_structure18:spire.algebra.AbGroup[R],implicit_structure19:spire.algebra.AbGroup[S],implicit_structure20:spire.algebra.AbGroup[T]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct19", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K], _structure12: AbGroup[L], _structure13: AbGroup[M], _structure14: AbGroup[N], _structure15: AbGroup[O], _structure16: AbGroup[P], _structure17: AbGroup[Q], _structure18: AbGroup[R], _structure19: AbGroup[S]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct19", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K],implicit_structure12:spire.algebra.AbGroup[L],implicit_structure13:spire.algebra.AbGroup[M],implicit_structure14:spire.algebra.AbGroup[N],implicit_structure15:spire.algebra.AbGroup[O],implicit_structure16:spire.algebra.AbGroup[P],implicit_structure17:spire.algebra.AbGroup[Q],implicit_structure18:spire.algebra.AbGroup[R],implicit_structure19:spire.algebra.AbGroup[S]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct18", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K], _structure12: AbGroup[L], _structure13: AbGroup[M], _structure14: AbGroup[N], _structure15: AbGroup[O], _structure16: AbGroup[P], _structure17: AbGroup[Q], _structure18: AbGroup[R]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct18", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K],implicit_structure12:spire.algebra.AbGroup[L],implicit_structure13:spire.algebra.AbGroup[M],implicit_structure14:spire.algebra.AbGroup[N],implicit_structure15:spire.algebra.AbGroup[O],implicit_structure16:spire.algebra.AbGroup[P],implicit_structure17:spire.algebra.AbGroup[Q],implicit_structure18:spire.algebra.AbGroup[R]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct17", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K], _structure12: AbGroup[L], _structure13: AbGroup[M], _structure14: AbGroup[N], _structure15: AbGroup[O], _structure16: AbGroup[P], _structure17: AbGroup[Q]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct17", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K],implicit_structure12:spire.algebra.AbGroup[L],implicit_structure13:spire.algebra.AbGroup[M],implicit_structure14:spire.algebra.AbGroup[N],implicit_structure15:spire.algebra.AbGroup[O],implicit_structure16:spire.algebra.AbGroup[P],implicit_structure17:spire.algebra.AbGroup[Q]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct16", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K], _structure12: AbGroup[L], _structure13: AbGroup[M], _structure14: AbGroup[N], _structure15: AbGroup[O], _structure16: AbGroup[P]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct16", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K],implicit_structure12:spire.algebra.AbGroup[L],implicit_structure13:spire.algebra.AbGroup[M],implicit_structure14:spire.algebra.AbGroup[N],implicit_structure15:spire.algebra.AbGroup[O],implicit_structure16:spire.algebra.AbGroup[P]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct15", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K], _structure12: AbGroup[L], _structure13: AbGroup[M], _structure14: AbGroup[N], _structure15: AbGroup[O]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct15", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K],implicit_structure12:spire.algebra.AbGroup[L],implicit_structure13:spire.algebra.AbGroup[M],implicit_structure14:spire.algebra.AbGroup[N],implicit_structure15:spire.algebra.AbGroup[O]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct14", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K], _structure12: AbGroup[L], _structure13: AbGroup[M], _structure14: AbGroup[N]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct14", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct14[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K],implicit_structure12:spire.algebra.AbGroup[L],implicit_structure13:spire.algebra.AbGroup[M],implicit_structure14:spire.algebra.AbGroup[N]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct13", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K], _structure12: AbGroup[L], _structure13: AbGroup[M]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct13", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct13[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K],implicit_structure12:spire.algebra.AbGroup[L],implicit_structure13:spire.algebra.AbGroup[M]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct12", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K], _structure12: AbGroup[L]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct12", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct12[A,B,C,D,E,F,G,H,I,J,K,L](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K],implicit_structure12:spire.algebra.AbGroup[L]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct11", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J], _structure11: AbGroup[K]): AbGroup[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct11", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct11[A,B,C,D,E,F,G,H,I,J,K](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J],implicit_structure11:spire.algebra.AbGroup[K]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct10", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I], _structure10: AbGroup[J]): AbGroup[(A, B, C, D, E, F, G, H, I, J)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct10", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct10[A,B,C,D,E,F,G,H,I,J](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I],implicit_structure10:spire.algebra.AbGroup[J]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct9", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H], _structure9: AbGroup[I]): AbGroup[(A, B, C, D, E, F, G, H, I)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct9", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct9[A,B,C,D,E,F,G,H,I](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H],implicit_structure9:spire.algebra.AbGroup[I]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct8", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G], _structure8: AbGroup[H]): AbGroup[(A, B, C, D, E, F, G, H)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct8", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct8[A,B,C,D,E,F,G,H](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G],implicit_structure8:spire.algebra.AbGroup[H]):spire.algebra.AbGroup[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct7", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F], _structure7: AbGroup[G]): AbGroup[(A, B, C, D, E, F, G)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct7", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct7[A,B,C,D,E,F,G](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F],implicit_structure7:spire.algebra.AbGroup[G]):spire.algebra.AbGroup[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct6", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E], _structure6: AbGroup[F]): AbGroup[(A, B, C, D, E, F)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct6", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct6[A,B,C,D,E,F](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E],implicit_structure6:spire.algebra.AbGroup[F]):spire.algebra.AbGroup[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct5", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D], _structure5: AbGroup[E]): AbGroup[(A, B, C, D, E)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct5", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct5[A,B,C,D,E](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D],implicit_structure5:spire.algebra.AbGroup[E]):spire.algebra.AbGroup[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct4", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C], _structure4: AbGroup[D]): AbGroup[(A, B, C, D)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct4", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct4[A,B,C,D](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C],implicit_structure4:spire.algebra.AbGroup[D]):spire.algebra.AbGroup[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct3", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B], _structure3: AbGroup[C]): AbGroup[(A, B, C)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct3", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct3[A,B,C](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B],implicit_structure3:spire.algebra.AbGroup[C]):spire.algebra.AbGroup[(A,B,C)]", "kind" : "implicit def"}, {"label" : "AbGroupProduct2", "tail" : "(_structure1: AbGroup[A], _structure2: AbGroup[B]): AbGroup[(A, B)]", "member" : "spire.std.AbGroupProductInstances.AbGroupProduct2", "link" : "net\/alasc\/symdpoly\/defaults$.html#AbGroupProduct2[A,B](implicit_structure1:spire.algebra.AbGroup[A],implicit_structure2:spire.algebra.AbGroup[B]):spire.algebra.AbGroup[(A,B)]", "kind" : "implicit def"}, {"label" : "GroupProduct22", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q], _structure18: Group[R], _structure19: Group[S], _structure20: Group[T], _structure21: Group[U], _structure22: Group[V]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "spire.std.GroupProductInstances.GroupProduct22", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K],implicit_structure12:spire.algebra.Group[L],implicit_structure13:spire.algebra.Group[M],implicit_structure14:spire.algebra.Group[N],implicit_structure15:spire.algebra.Group[O],implicit_structure16:spire.algebra.Group[P],implicit_structure17:spire.algebra.Group[Q],implicit_structure18:spire.algebra.Group[R],implicit_structure19:spire.algebra.Group[S],implicit_structure20:spire.algebra.Group[T],implicit_structure21:spire.algebra.Group[U],implicit_structure22:spire.algebra.Group[V]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "GroupProduct21", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q], _structure18: Group[R], _structure19: Group[S], _structure20: Group[T], _structure21: Group[U]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "spire.std.GroupProductInstances.GroupProduct21", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K],implicit_structure12:spire.algebra.Group[L],implicit_structure13:spire.algebra.Group[M],implicit_structure14:spire.algebra.Group[N],implicit_structure15:spire.algebra.Group[O],implicit_structure16:spire.algebra.Group[P],implicit_structure17:spire.algebra.Group[Q],implicit_structure18:spire.algebra.Group[R],implicit_structure19:spire.algebra.Group[S],implicit_structure20:spire.algebra.Group[T],implicit_structure21:spire.algebra.Group[U]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "GroupProduct20", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q], _structure18: Group[R], _structure19: Group[S], _structure20: Group[T]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "spire.std.GroupProductInstances.GroupProduct20", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K],implicit_structure12:spire.algebra.Group[L],implicit_structure13:spire.algebra.Group[M],implicit_structure14:spire.algebra.Group[N],implicit_structure15:spire.algebra.Group[O],implicit_structure16:spire.algebra.Group[P],implicit_structure17:spire.algebra.Group[Q],implicit_structure18:spire.algebra.Group[R],implicit_structure19:spire.algebra.Group[S],implicit_structure20:spire.algebra.Group[T]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "GroupProduct19", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q], _structure18: Group[R], _structure19: Group[S]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "spire.std.GroupProductInstances.GroupProduct19", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K],implicit_structure12:spire.algebra.Group[L],implicit_structure13:spire.algebra.Group[M],implicit_structure14:spire.algebra.Group[N],implicit_structure15:spire.algebra.Group[O],implicit_structure16:spire.algebra.Group[P],implicit_structure17:spire.algebra.Group[Q],implicit_structure18:spire.algebra.Group[R],implicit_structure19:spire.algebra.Group[S]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "GroupProduct18", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q], _structure18: Group[R]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "spire.std.GroupProductInstances.GroupProduct18", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K],implicit_structure12:spire.algebra.Group[L],implicit_structure13:spire.algebra.Group[M],implicit_structure14:spire.algebra.Group[N],implicit_structure15:spire.algebra.Group[O],implicit_structure16:spire.algebra.Group[P],implicit_structure17:spire.algebra.Group[Q],implicit_structure18:spire.algebra.Group[R]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "GroupProduct17", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "spire.std.GroupProductInstances.GroupProduct17", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K],implicit_structure12:spire.algebra.Group[L],implicit_structure13:spire.algebra.Group[M],implicit_structure14:spire.algebra.Group[N],implicit_structure15:spire.algebra.Group[O],implicit_structure16:spire.algebra.Group[P],implicit_structure17:spire.algebra.Group[Q]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "GroupProduct16", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "spire.std.GroupProductInstances.GroupProduct16", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K],implicit_structure12:spire.algebra.Group[L],implicit_structure13:spire.algebra.Group[M],implicit_structure14:spire.algebra.Group[N],implicit_structure15:spire.algebra.Group[O],implicit_structure16:spire.algebra.Group[P]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "GroupProduct15", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "spire.std.GroupProductInstances.GroupProduct15", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K],implicit_structure12:spire.algebra.Group[L],implicit_structure13:spire.algebra.Group[M],implicit_structure14:spire.algebra.Group[N],implicit_structure15:spire.algebra.Group[O]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "GroupProduct14", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "spire.std.GroupProductInstances.GroupProduct14", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct14[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K],implicit_structure12:spire.algebra.Group[L],implicit_structure13:spire.algebra.Group[M],implicit_structure14:spire.algebra.Group[N]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "GroupProduct13", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "spire.std.GroupProductInstances.GroupProduct13", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct13[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K],implicit_structure12:spire.algebra.Group[L],implicit_structure13:spire.algebra.Group[M]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "GroupProduct12", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L]): Group[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "spire.std.GroupProductInstances.GroupProduct12", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct12[A,B,C,D,E,F,G,H,I,J,K,L](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K],implicit_structure12:spire.algebra.Group[L]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "GroupProduct11", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K]): Group[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "spire.std.GroupProductInstances.GroupProduct11", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct11[A,B,C,D,E,F,G,H,I,J,K](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J],implicit_structure11:spire.algebra.Group[K]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "GroupProduct10", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J]): Group[(A, B, C, D, E, F, G, H, I, J)]", "member" : "spire.std.GroupProductInstances.GroupProduct10", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct10[A,B,C,D,E,F,G,H,I,J](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I],implicit_structure10:spire.algebra.Group[J]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "GroupProduct9", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I]): Group[(A, B, C, D, E, F, G, H, I)]", "member" : "spire.std.GroupProductInstances.GroupProduct9", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct9[A,B,C,D,E,F,G,H,I](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H],implicit_structure9:spire.algebra.Group[I]):spire.algebra.Group[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "GroupProduct8", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H]): Group[(A, B, C, D, E, F, G, H)]", "member" : "spire.std.GroupProductInstances.GroupProduct8", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct8[A,B,C,D,E,F,G,H](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G],implicit_structure8:spire.algebra.Group[H]):spire.algebra.Group[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "GroupProduct7", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G]): Group[(A, B, C, D, E, F, G)]", "member" : "spire.std.GroupProductInstances.GroupProduct7", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct7[A,B,C,D,E,F,G](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F],implicit_structure7:spire.algebra.Group[G]):spire.algebra.Group[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "GroupProduct6", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F]): Group[(A, B, C, D, E, F)]", "member" : "spire.std.GroupProductInstances.GroupProduct6", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct6[A,B,C,D,E,F](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E],implicit_structure6:spire.algebra.Group[F]):spire.algebra.Group[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "GroupProduct5", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E]): Group[(A, B, C, D, E)]", "member" : "spire.std.GroupProductInstances.GroupProduct5", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct5[A,B,C,D,E](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D],implicit_structure5:spire.algebra.Group[E]):spire.algebra.Group[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "GroupProduct4", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D]): Group[(A, B, C, D)]", "member" : "spire.std.GroupProductInstances.GroupProduct4", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct4[A,B,C,D](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C],implicit_structure4:spire.algebra.Group[D]):spire.algebra.Group[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "GroupProduct3", "tail" : "(_structure1: Group[A], _structure2: Group[B], _structure3: Group[C]): Group[(A, B, C)]", "member" : "spire.std.GroupProductInstances.GroupProduct3", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct3[A,B,C](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B],implicit_structure3:spire.algebra.Group[C]):spire.algebra.Group[(A,B,C)]", "kind" : "implicit def"}, {"label" : "GroupProduct2", "tail" : "(_structure1: Group[A], _structure2: Group[B]): Group[(A, B)]", "member" : "spire.std.GroupProductInstances.GroupProduct2", "link" : "net\/alasc\/symdpoly\/defaults$.html#GroupProduct2[A,B](implicit_structure1:spire.algebra.Group[A],implicit_structure2:spire.algebra.Group[B]):spire.algebra.Group[(A,B)]", "kind" : "implicit def"}, {"label" : "MonoidProduct22", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q], _structure18: Monoid[R], _structure19: Monoid[S], _structure20: Monoid[T], _structure21: Monoid[U], _structure22: Monoid[V]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct22", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K],implicit_structure12:spire.algebra.Monoid[L],implicit_structure13:spire.algebra.Monoid[M],implicit_structure14:spire.algebra.Monoid[N],implicit_structure15:spire.algebra.Monoid[O],implicit_structure16:spire.algebra.Monoid[P],implicit_structure17:spire.algebra.Monoid[Q],implicit_structure18:spire.algebra.Monoid[R],implicit_structure19:spire.algebra.Monoid[S],implicit_structure20:spire.algebra.Monoid[T],implicit_structure21:spire.algebra.Monoid[U],implicit_structure22:spire.algebra.Monoid[V]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "MonoidProduct21", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q], _structure18: Monoid[R], _structure19: Monoid[S], _structure20: Monoid[T], _structure21: Monoid[U]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct21", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K],implicit_structure12:spire.algebra.Monoid[L],implicit_structure13:spire.algebra.Monoid[M],implicit_structure14:spire.algebra.Monoid[N],implicit_structure15:spire.algebra.Monoid[O],implicit_structure16:spire.algebra.Monoid[P],implicit_structure17:spire.algebra.Monoid[Q],implicit_structure18:spire.algebra.Monoid[R],implicit_structure19:spire.algebra.Monoid[S],implicit_structure20:spire.algebra.Monoid[T],implicit_structure21:spire.algebra.Monoid[U]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "MonoidProduct20", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q], _structure18: Monoid[R], _structure19: Monoid[S], _structure20: Monoid[T]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct20", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K],implicit_structure12:spire.algebra.Monoid[L],implicit_structure13:spire.algebra.Monoid[M],implicit_structure14:spire.algebra.Monoid[N],implicit_structure15:spire.algebra.Monoid[O],implicit_structure16:spire.algebra.Monoid[P],implicit_structure17:spire.algebra.Monoid[Q],implicit_structure18:spire.algebra.Monoid[R],implicit_structure19:spire.algebra.Monoid[S],implicit_structure20:spire.algebra.Monoid[T]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "MonoidProduct19", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q], _structure18: Monoid[R], _structure19: Monoid[S]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct19", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K],implicit_structure12:spire.algebra.Monoid[L],implicit_structure13:spire.algebra.Monoid[M],implicit_structure14:spire.algebra.Monoid[N],implicit_structure15:spire.algebra.Monoid[O],implicit_structure16:spire.algebra.Monoid[P],implicit_structure17:spire.algebra.Monoid[Q],implicit_structure18:spire.algebra.Monoid[R],implicit_structure19:spire.algebra.Monoid[S]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "MonoidProduct18", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q], _structure18: Monoid[R]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct18", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K],implicit_structure12:spire.algebra.Monoid[L],implicit_structure13:spire.algebra.Monoid[M],implicit_structure14:spire.algebra.Monoid[N],implicit_structure15:spire.algebra.Monoid[O],implicit_structure16:spire.algebra.Monoid[P],implicit_structure17:spire.algebra.Monoid[Q],implicit_structure18:spire.algebra.Monoid[R]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "MonoidProduct17", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct17", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K],implicit_structure12:spire.algebra.Monoid[L],implicit_structure13:spire.algebra.Monoid[M],implicit_structure14:spire.algebra.Monoid[N],implicit_structure15:spire.algebra.Monoid[O],implicit_structure16:spire.algebra.Monoid[P],implicit_structure17:spire.algebra.Monoid[Q]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "MonoidProduct16", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct16", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K],implicit_structure12:spire.algebra.Monoid[L],implicit_structure13:spire.algebra.Monoid[M],implicit_structure14:spire.algebra.Monoid[N],implicit_structure15:spire.algebra.Monoid[O],implicit_structure16:spire.algebra.Monoid[P]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "MonoidProduct15", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct15", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K],implicit_structure12:spire.algebra.Monoid[L],implicit_structure13:spire.algebra.Monoid[M],implicit_structure14:spire.algebra.Monoid[N],implicit_structure15:spire.algebra.Monoid[O]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "MonoidProduct14", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct14", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct14[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K],implicit_structure12:spire.algebra.Monoid[L],implicit_structure13:spire.algebra.Monoid[M],implicit_structure14:spire.algebra.Monoid[N]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "MonoidProduct13", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct13", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct13[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K],implicit_structure12:spire.algebra.Monoid[L],implicit_structure13:spire.algebra.Monoid[M]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "MonoidProduct12", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct12", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct12[A,B,C,D,E,F,G,H,I,J,K,L](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K],implicit_structure12:spire.algebra.Monoid[L]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "MonoidProduct11", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K]): Monoid[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct11", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct11[A,B,C,D,E,F,G,H,I,J,K](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J],implicit_structure11:spire.algebra.Monoid[K]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "MonoidProduct10", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J]): Monoid[(A, B, C, D, E, F, G, H, I, J)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct10", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct10[A,B,C,D,E,F,G,H,I,J](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I],implicit_structure10:spire.algebra.Monoid[J]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "MonoidProduct9", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I]): Monoid[(A, B, C, D, E, F, G, H, I)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct9", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct9[A,B,C,D,E,F,G,H,I](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H],implicit_structure9:spire.algebra.Monoid[I]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "MonoidProduct8", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H]): Monoid[(A, B, C, D, E, F, G, H)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct8", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct8[A,B,C,D,E,F,G,H](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G],implicit_structure8:spire.algebra.Monoid[H]):spire.algebra.Monoid[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "MonoidProduct7", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G]): Monoid[(A, B, C, D, E, F, G)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct7", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct7[A,B,C,D,E,F,G](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F],implicit_structure7:spire.algebra.Monoid[G]):spire.algebra.Monoid[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "MonoidProduct6", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F]): Monoid[(A, B, C, D, E, F)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct6", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct6[A,B,C,D,E,F](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E],implicit_structure6:spire.algebra.Monoid[F]):spire.algebra.Monoid[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "MonoidProduct5", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E]): Monoid[(A, B, C, D, E)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct5", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct5[A,B,C,D,E](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D],implicit_structure5:spire.algebra.Monoid[E]):spire.algebra.Monoid[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "MonoidProduct4", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D]): Monoid[(A, B, C, D)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct4", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct4[A,B,C,D](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C],implicit_structure4:spire.algebra.Monoid[D]):spire.algebra.Monoid[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "MonoidProduct3", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C]): Monoid[(A, B, C)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct3", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct3[A,B,C](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B],implicit_structure3:spire.algebra.Monoid[C]):spire.algebra.Monoid[(A,B,C)]", "kind" : "implicit def"}, {"label" : "MonoidProduct2", "tail" : "(_structure1: Monoid[A], _structure2: Monoid[B]): Monoid[(A, B)]", "member" : "spire.std.MonoidProductInstances.MonoidProduct2", "link" : "net\/alasc\/symdpoly\/defaults$.html#MonoidProduct2[A,B](implicit_structure1:spire.algebra.Monoid[A],implicit_structure2:spire.algebra.Monoid[B]):spire.algebra.Monoid[(A,B)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct22", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q], _structure18: Semigroup[R], _structure19: Semigroup[S], _structure20: Semigroup[T], _structure21: Semigroup[U], _structure22: Semigroup[V]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct22", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct22[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K],implicit_structure12:spire.algebra.Semigroup[L],implicit_structure13:spire.algebra.Semigroup[M],implicit_structure14:spire.algebra.Semigroup[N],implicit_structure15:spire.algebra.Semigroup[O],implicit_structure16:spire.algebra.Semigroup[P],implicit_structure17:spire.algebra.Semigroup[Q],implicit_structure18:spire.algebra.Semigroup[R],implicit_structure19:spire.algebra.Semigroup[S],implicit_structure20:spire.algebra.Semigroup[T],implicit_structure21:spire.algebra.Semigroup[U],implicit_structure22:spire.algebra.Semigroup[V]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct21", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q], _structure18: Semigroup[R], _structure19: Semigroup[S], _structure20: Semigroup[T], _structure21: Semigroup[U]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct21", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct21[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K],implicit_structure12:spire.algebra.Semigroup[L],implicit_structure13:spire.algebra.Semigroup[M],implicit_structure14:spire.algebra.Semigroup[N],implicit_structure15:spire.algebra.Semigroup[O],implicit_structure16:spire.algebra.Semigroup[P],implicit_structure17:spire.algebra.Semigroup[Q],implicit_structure18:spire.algebra.Semigroup[R],implicit_structure19:spire.algebra.Semigroup[S],implicit_structure20:spire.algebra.Semigroup[T],implicit_structure21:spire.algebra.Semigroup[U]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct20", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q], _structure18: Semigroup[R], _structure19: Semigroup[S], _structure20: Semigroup[T]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct20", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct20[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K],implicit_structure12:spire.algebra.Semigroup[L],implicit_structure13:spire.algebra.Semigroup[M],implicit_structure14:spire.algebra.Semigroup[N],implicit_structure15:spire.algebra.Semigroup[O],implicit_structure16:spire.algebra.Semigroup[P],implicit_structure17:spire.algebra.Semigroup[Q],implicit_structure18:spire.algebra.Semigroup[R],implicit_structure19:spire.algebra.Semigroup[S],implicit_structure20:spire.algebra.Semigroup[T]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct19", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q], _structure18: Semigroup[R], _structure19: Semigroup[S]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct19", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct19[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K],implicit_structure12:spire.algebra.Semigroup[L],implicit_structure13:spire.algebra.Semigroup[M],implicit_structure14:spire.algebra.Semigroup[N],implicit_structure15:spire.algebra.Semigroup[O],implicit_structure16:spire.algebra.Semigroup[P],implicit_structure17:spire.algebra.Semigroup[Q],implicit_structure18:spire.algebra.Semigroup[R],implicit_structure19:spire.algebra.Semigroup[S]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct18", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q], _structure18: Semigroup[R]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct18", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct18[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K],implicit_structure12:spire.algebra.Semigroup[L],implicit_structure13:spire.algebra.Semigroup[M],implicit_structure14:spire.algebra.Semigroup[N],implicit_structure15:spire.algebra.Semigroup[O],implicit_structure16:spire.algebra.Semigroup[P],implicit_structure17:spire.algebra.Semigroup[Q],implicit_structure18:spire.algebra.Semigroup[R]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct17", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct17", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct17[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K],implicit_structure12:spire.algebra.Semigroup[L],implicit_structure13:spire.algebra.Semigroup[M],implicit_structure14:spire.algebra.Semigroup[N],implicit_structure15:spire.algebra.Semigroup[O],implicit_structure16:spire.algebra.Semigroup[P],implicit_structure17:spire.algebra.Semigroup[Q]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct16", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct16", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct16[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K],implicit_structure12:spire.algebra.Semigroup[L],implicit_structure13:spire.algebra.Semigroup[M],implicit_structure14:spire.algebra.Semigroup[N],implicit_structure15:spire.algebra.Semigroup[O],implicit_structure16:spire.algebra.Semigroup[P]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct15", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct15", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct15[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K],implicit_structure12:spire.algebra.Semigroup[L],implicit_structure13:spire.algebra.Semigroup[M],implicit_structure14:spire.algebra.Semigroup[N],implicit_structure15:spire.algebra.Semigroup[O]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct14", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct14", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct14[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K],implicit_structure12:spire.algebra.Semigroup[L],implicit_structure13:spire.algebra.Semigroup[M],implicit_structure14:spire.algebra.Semigroup[N]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct13", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct13", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct13[A,B,C,D,E,F,G,H,I,J,K,L,M](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K],implicit_structure12:spire.algebra.Semigroup[L],implicit_structure13:spire.algebra.Semigroup[M]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct12", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct12", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct12[A,B,C,D,E,F,G,H,I,J,K,L](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K],implicit_structure12:spire.algebra.Semigroup[L]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct11", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct11", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct11[A,B,C,D,E,F,G,H,I,J,K](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J],implicit_structure11:spire.algebra.Semigroup[K]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct10", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J]): Semigroup[(A, B, C, D, E, F, G, H, I, J)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct10", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct10[A,B,C,D,E,F,G,H,I,J](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I],implicit_structure10:spire.algebra.Semigroup[J]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct9", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I]): Semigroup[(A, B, C, D, E, F, G, H, I)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct9", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct9[A,B,C,D,E,F,G,H,I](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H],implicit_structure9:spire.algebra.Semigroup[I]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct8", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H]): Semigroup[(A, B, C, D, E, F, G, H)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct8", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct8[A,B,C,D,E,F,G,H](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G],implicit_structure8:spire.algebra.Semigroup[H]):spire.algebra.Semigroup[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct7", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G]): Semigroup[(A, B, C, D, E, F, G)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct7", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct7[A,B,C,D,E,F,G](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F],implicit_structure7:spire.algebra.Semigroup[G]):spire.algebra.Semigroup[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct6", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F]): Semigroup[(A, B, C, D, E, F)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct6", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct6[A,B,C,D,E,F](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E],implicit_structure6:spire.algebra.Semigroup[F]):spire.algebra.Semigroup[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct5", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E]): Semigroup[(A, B, C, D, E)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct5", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct5[A,B,C,D,E](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D],implicit_structure5:spire.algebra.Semigroup[E]):spire.algebra.Semigroup[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct4", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D]): Semigroup[(A, B, C, D)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct4", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct4[A,B,C,D](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C],implicit_structure4:spire.algebra.Semigroup[D]):spire.algebra.Semigroup[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct3", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C]): Semigroup[(A, B, C)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct3", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct3[A,B,C](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B],implicit_structure3:spire.algebra.Semigroup[C]):spire.algebra.Semigroup[(A,B,C)]", "kind" : "implicit def"}, {"label" : "SemigroupProduct2", "tail" : "(_structure1: Semigroup[A], _structure2: Semigroup[B]): Semigroup[(A, B)]", "member" : "spire.std.SemigroupProductInstances.SemigroupProduct2", "link" : "net\/alasc\/symdpoly\/defaults$.html#SemigroupProduct2[A,B](implicit_structure1:spire.algebra.Semigroup[A],implicit_structure2:spire.algebra.Semigroup[B]):spire.algebra.Semigroup[(A,B)]", "kind" : "implicit def"}, {"label" : "MapEq", "tail" : "(V0: Eq[V]): MapEq[K, V]", "member" : "spire.std.MapInstances3.MapEq", "link" : "net\/alasc\/symdpoly\/defaults$.html#MapEq[K,V](implicitV0:spire.algebra.Eq[V]):spire.std.MapEq[K,V]", "kind" : "implicit def"}, {"label" : "MapInnerProductSpace", "tail" : "(arg0: Field[V]): MapInnerProductSpace[K, V]", "member" : "spire.std.MapInstances3.MapInnerProductSpace", "link" : "net\/alasc\/symdpoly\/defaults$.html#MapInnerProductSpace[K,V](implicitevidence$7:spire.algebra.Field[V]):spire.std.MapInnerProductSpace[K,V]", "kind" : "implicit def"}, {"label" : "MapVectorSpace", "tail" : "(arg0: Field[V]): MapVectorSpace[K, V]", "member" : "spire.std.MapInstances2.MapVectorSpace", "link" : "net\/alasc\/symdpoly\/defaults$.html#MapVectorSpace[K,V](implicitevidence$6:spire.algebra.Field[V]):spire.std.MapVectorSpace[K,V]", "kind" : "implicit def"}, {"label" : "MapGroup", "tail" : "(arg0: Group[V]): MapGroup[K, V]", "member" : "spire.std.MapInstances2.MapGroup", "link" : "net\/alasc\/symdpoly\/defaults$.html#MapGroup[K,V](implicitevidence$5:spire.algebra.Group[V]):spire.std.MapGroup[K,V]", "kind" : "implicit def"}, {"label" : "MapCRng", "tail" : "(arg0: CRing[V]): MapCRng[K, V]", "member" : "spire.std.MapInstances1.MapCRng", "link" : "net\/alasc\/symdpoly\/defaults$.html#MapCRng[K,V](implicitevidence$4:spire.algebra.CRing[V]):spire.std.MapCRng[K,V]", "kind" : "implicit def"}, {"label" : "MapCSemiring", "tail" : "(arg0: CSemiring[V]): MapCSemiring[K, V]", "member" : "spire.std.MapInstances0.MapCSemiring", "link" : "net\/alasc\/symdpoly\/defaults$.html#MapCSemiring[K,V](implicitevidence$3:spire.algebra.CSemiring[V]):spire.std.MapCSemiring[K,V]", "kind" : "implicit def"}, {"label" : "MapMonoid", "tail" : "(arg0: Semigroup[V]): MapMonoid[K, V]", "member" : "spire.std.MapInstances0.MapMonoid", "link" : "net\/alasc\/symdpoly\/defaults$.html#MapMonoid[K,V](implicitevidence$2:spire.algebra.Semigroup[V]):spire.std.MapMonoid[K,V]", "kind" : "implicit def"}, {"label" : "SeqNormedVectorSpace", "tail" : "(field0: Field[A], nroot0: NRoot[A], cbf0: CanBuildFrom[CC[A], A, CC[A]]): NormedVectorSpace[CC[A], A]", "member" : "spire.std.SeqInstances3.SeqNormedVectorSpace", "link" : "net\/alasc\/symdpoly\/defaults$.html#SeqNormedVectorSpace[A,CC[A]<:scala.collection.SeqLike[A,CC[A]]](implicitfield0:spire.algebra.Field[A],implicitnroot0:spire.algebra.NRoot[A],implicitcbf0:scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]]):spire.algebra.NormedVectorSpace[CC[A],A]", "kind" : "implicit def"}, {"label" : "SeqOrder", "tail" : "(A0: Order[A]): SeqOrder[A, CC[A]]", "member" : "spire.std.SeqInstances2.SeqOrder", "link" : "net\/alasc\/symdpoly\/defaults$.html#SeqOrder[A,CC[A]<:scala.collection.SeqLike[A,CC[A]]](implicitA0:spire.algebra.Order[A]):spire.std.SeqOrder[A,CC[A]]", "kind" : "implicit def"}, {"label" : "SeqInnerProductSpace", "tail" : "(field0: Field[A], cbf0: CanBuildFrom[CC[A], A, CC[A]]): SeqInnerProductSpace[A, CC[A]]", "member" : "spire.std.SeqInstances2.SeqInnerProductSpace", "link" : "net\/alasc\/symdpoly\/defaults$.html#SeqInnerProductSpace[A,CC[A]<:scala.collection.SeqLike[A,CC[A]]](implicitfield0:spire.algebra.Field[A],implicitcbf0:scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]]):spire.std.SeqInnerProductSpace[A,CC[A]]", "kind" : "implicit def"}, {"label" : "SeqEq", "tail" : "(A0: Eq[A]): SeqEq[A, CC[A]]", "member" : "spire.std.SeqInstances1.SeqEq", "link" : "net\/alasc\/symdpoly\/defaults$.html#SeqEq[A,CC[A]<:scala.collection.SeqLike[A,CC[A]]](implicitA0:spire.algebra.Eq[A]):spire.std.SeqEq[A,CC[A]]", "kind" : "implicit def"}, {"label" : "SeqVectorSpace", "tail" : "(field0: Field[A], cbf0: CanBuildFrom[CC[A], A, CC[A]], ev: NoImplicit[NormedVectorSpace[CC[A], A]]): SeqVectorSpace[A, CC[A]]", "member" : "spire.std.SeqInstances1.SeqVectorSpace", "link" : "net\/alasc\/symdpoly\/defaults$.html#SeqVectorSpace[A,CC[A]<:scala.collection.SeqLike[A,CC[A]]](implicitfield0:spire.algebra.Field[A],implicitcbf0:scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]],implicitev:spire.NoImplicit[spire.algebra.NormedVectorSpace[CC[A],A]]):spire.std.SeqVectorSpace[A,CC[A]]", "kind" : "implicit def"}, {"label" : "SeqCModule", "tail" : "(ring0: CRing[A], cbf0: CanBuildFrom[CC[A], A, CC[A]], ev: NoImplicit[VectorSpace[CC[A], A]]): SeqCModule[A, CC[A]]", "member" : "spire.std.SeqInstances0.SeqCModule", "link" : "net\/alasc\/symdpoly\/defaults$.html#SeqCModule[A,CC[A]<:scala.collection.SeqLike[A,CC[A]]](implicitring0:spire.algebra.CRing[A],implicitcbf0:scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]],implicitev:spire.NoImplicit[spire.algebra.VectorSpace[CC[A],A]]):spire.std.SeqCModule[A,CC[A]]", "kind" : "implicit def"}, {"label" : "ArrayMonoid", "tail" : "(arg0: ClassTag[A]): Monoid[Array[A]]", "member" : "spire.std.ArrayInstances.ArrayMonoid", "link" : "net\/alasc\/symdpoly\/defaults$.html#ArrayMonoid[A](implicitevidence$25:spire.ClassTag[A]):spire.algebra.Monoid[Array[A]]", "kind" : "implicit def"}, {"label" : "ArrayNormedVectorSpace", "tail" : "(arg0: Field[A], arg1: NRoot[A], arg2: ClassTag[A]): NormedVectorSpace[Array[A], A]", "member" : "spire.std.ArrayInstances3.ArrayNormedVectorSpace", "link" : "net\/alasc\/symdpoly\/defaults$.html#ArrayNormedVectorSpace[A](implicitevidence$22:spire.algebra.Field[A],implicitevidence$23:spire.algebra.NRoot[A],implicitevidence$24:spire.ClassTag[A]):spire.algebra.NormedVectorSpace[Array[A],A]", "kind" : "implicit def"}, {"label" : "ArrayOrder", "tail" : "(arg0: Order[A]): Order[Array[A]]", "member" : "spire.std.ArrayInstances2.ArrayOrder", "link" : "net\/alasc\/symdpoly\/defaults$.html#ArrayOrder[A](implicitevidence$21:spire.algebra.Order[A]):spire.algebra.Order[Array[A]]", "kind" : "implicit def"}, {"label" : "ArrayInnerProductSpace", "tail" : "(arg0: Field[A], arg1: ClassTag[A]): InnerProductSpace[Array[A], A]", "member" : "spire.std.ArrayInstances2.ArrayInnerProductSpace", "link" : "net\/alasc\/symdpoly\/defaults$.html#ArrayInnerProductSpace[A](implicitevidence$19:spire.algebra.Field[A],implicitevidence$20:spire.ClassTag[A]):spire.algebra.InnerProductSpace[Array[A],A]", "kind" : "implicit def"}, {"label" : "ArrayEq", "tail" : "(arg0: Eq[A]): Eq[Array[A]]", "member" : "spire.std.ArrayInstances1.ArrayEq", "link" : "net\/alasc\/symdpoly\/defaults$.html#ArrayEq[A](implicitevidence$18:spire.algebra.Eq[A]):spire.algebra.Eq[Array[A]]", "kind" : "implicit def"}, {"label" : "ArrayVectorSpace", "tail" : "(arg0: NI1[A], arg1: ClassTag[A], arg2: Field[A]): VectorSpace[Array[A], A]", "member" : "spire.std.ArrayInstances1.ArrayVectorSpace", "link" : "net\/alasc\/symdpoly\/defaults$.html#ArrayVectorSpace[A](implicitevidence$15:ArrayInstances1.this.NI1[A],implicitevidence$16:spire.ClassTag[A],implicitevidence$17:spire.algebra.Field[A]):spire.algebra.VectorSpace[Array[A],A]", "kind" : "implicit def"}, {"label" : "NI1", "tail" : "", "member" : "spire.std.ArrayInstances1.NI1", "link" : "net\/alasc\/symdpoly\/defaults$.html#NI1[A<:<?>]=spire.NoImplicit[spire.algebra.NormedVectorSpace[Array[A],A]]", "kind" : "type"}, {"label" : "ArrayCModule", "tail" : "(arg0: NI0[A], arg1: ClassTag[A], arg2: CRing[A]): CModule[Array[A], A]", "member" : "spire.std.ArrayInstances0.ArrayCModule", "link" : "net\/alasc\/symdpoly\/defaults$.html#ArrayCModule[A](implicitevidence$12:ArrayInstances0.this.NI0[A],implicitevidence$13:spire.ClassTag[A],implicitevidence$14:spire.algebra.CRing[A]):spire.algebra.CModule[Array[A],A]", "kind" : "implicit def"}, {"label" : "NI0", "tail" : "", "member" : "spire.std.ArrayInstances0.NI0", "link" : "net\/alasc\/symdpoly\/defaults$.html#NI0[A<:<?>]=spire.NoImplicit[spire.algebra.VectorSpace[Array[A],A]]", "kind" : "type"}, {"label" : "IterableMonoid", "tail" : "(cbf: CanBuildFrom[CC[A], A, CC[A]]): Monoid[CC[A]]", "member" : "spire.std.IterableInstances.IterableMonoid", "link" : "net\/alasc\/symdpoly\/defaults$.html#IterableMonoid[A,CC[A]<:scala.collection.TraversableLike[A,CC[A]]](implicitcbf:scala.collection.generic.CanBuildFrom[CC[A],A,CC[A]]):spire.algebra.Monoid[CC[A]]", "kind" : "implicit def"}, {"label" : "StringOrder", "tail" : ": StringOrder", "member" : "spire.std.StringInstances.StringOrder", "link" : "net\/alasc\/symdpoly\/defaults$.html#StringOrder:spire.std.StringOrder", "kind" : "implicit final val"}, {"label" : "StringAlgebra", "tail" : ": StringMonoid", "member" : "spire.std.StringInstances.StringAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#StringAlgebra:spire.std.StringMonoid", "kind" : "implicit final val"}, {"label" : "levenshteinDistance", "tail" : "(): MetricSpace[String, Int]", "member" : "spire.std.StringInstances0.levenshteinDistance", "link" : "net\/alasc\/symdpoly\/defaults$.html#levenshteinDistance:spire.algebra.MetricSpace[String,Int]", "kind" : "implicit def"}, {"label" : "BigDecimalTag", "tail" : ": LargeTag[BigDecimal]", "member" : "spire.std.BigDecimalInstances.BigDecimalTag", "link" : "net\/alasc\/symdpoly\/defaults$.html#BigDecimalTag:spire.math.NumberTag.LargeTag[BigDecimal]", "kind" : "implicit final val"}, {"label" : "BigDecimalIsTrig", "tail" : "(mc: MathContext): BigDecimalIsTrig", "member" : "spire.std.BigDecimalInstances.BigDecimalIsTrig", "link" : "net\/alasc\/symdpoly\/defaults$.html#BigDecimalIsTrig(implicitmc:java.math.MathContext):spire.std.BigDecimalIsTrig", "kind" : "implicit def"}, {"label" : "BigDecimalAlgebra", "tail" : ": BigDecimalAlgebra", "member" : "spire.std.BigDecimalInstances.BigDecimalAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#BigDecimalAlgebra:spire.std.BigDecimalAlgebra", "kind" : "implicit final val"}, {"label" : "BigIntegerTag", "tail" : ": LargeTag[BigInteger]", "member" : "spire.std.BigIntegerInstances.BigIntegerTag", "link" : "net\/alasc\/symdpoly\/defaults$.html#BigIntegerTag:spire.math.NumberTag.LargeTag[java.math.BigInteger]", "kind" : "implicit final val"}, {"label" : "BigIntegerAlgebra", "tail" : ": BigIntegerAlgebra", "member" : "spire.std.BigIntegerInstances.BigIntegerAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#BigIntegerAlgebra:spire.std.BigIntegerAlgebra", "kind" : "implicit final val"}, {"label" : "BigIntTag", "tail" : ": LargeTag[BigInt]", "member" : "spire.std.BigIntInstances.BigIntTag", "link" : "net\/alasc\/symdpoly\/defaults$.html#BigIntTag:spire.math.NumberTag.LargeTag[BigInt]", "kind" : "implicit final val"}, {"label" : "BigIntAlgebra", "tail" : ": BigIntAlgebra", "member" : "spire.std.BigIntInstances.BigIntAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#BigIntAlgebra:spire.std.BigIntAlgebra", "kind" : "implicit final val"}, {"label" : "DoubleTag", "tail" : ": BuiltinFloatTag[Double]", "member" : "spire.std.DoubleInstances.DoubleTag", "link" : "net\/alasc\/symdpoly\/defaults$.html#DoubleTag:spire.math.NumberTag.BuiltinFloatTag[Double]", "kind" : "implicit final val"}, {"label" : "DoubleAlgebra", "tail" : ": DoubleAlgebra", "member" : "spire.std.DoubleInstances.DoubleAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#DoubleAlgebra:spire.std.DoubleAlgebra", "kind" : "implicit final val"}, {"label" : "FloatTag", "tail" : ": BuiltinFloatTag[Float]", "member" : "spire.std.FloatInstances.FloatTag", "link" : "net\/alasc\/symdpoly\/defaults$.html#FloatTag:spire.math.NumberTag.BuiltinFloatTag[Float]", "kind" : "implicit final val"}, {"label" : "FloatAlgebra", "tail" : ": FloatAlgebra", "member" : "spire.std.FloatInstances.FloatAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#FloatAlgebra:spire.std.FloatAlgebra", "kind" : "implicit final val"}, {"label" : "LongTag", "tail" : ": BuiltinIntTag[Long]", "member" : "spire.std.LongInstances.LongTag", "link" : "net\/alasc\/symdpoly\/defaults$.html#LongTag:spire.math.NumberTag.BuiltinIntTag[Long]", "kind" : "implicit final val"}, {"label" : "LongAlgebra", "tail" : ": LongAlgebra", "member" : "spire.std.LongInstances.LongAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#LongAlgebra:spire.std.LongAlgebra", "kind" : "implicit final val"}, {"label" : "LongBitString", "tail" : ": LongIsBitString", "member" : "spire.std.LongInstances.LongBitString", "link" : "net\/alasc\/symdpoly\/defaults$.html#LongBitString:spire.std.LongIsBitString", "kind" : "implicit final val"}, {"label" : "IntTag", "tail" : ": BuiltinIntTag[Int]", "member" : "spire.std.IntInstances.IntTag", "link" : "net\/alasc\/symdpoly\/defaults$.html#IntTag:spire.math.NumberTag.BuiltinIntTag[Int]", "kind" : "implicit final val"}, {"label" : "IntAlgebra", "tail" : ": IntAlgebra", "member" : "spire.std.IntInstances.IntAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#IntAlgebra:spire.std.IntAlgebra", "kind" : "implicit final val"}, {"label" : "IntBitString", "tail" : ": IntIsBitString", "member" : "spire.std.IntInstances.IntBitString", "link" : "net\/alasc\/symdpoly\/defaults$.html#IntBitString:spire.std.IntIsBitString", "kind" : "implicit final val"}, {"label" : "ShortTag", "tail" : ": BuiltinIntTag[Short]", "member" : "spire.std.ShortInstances.ShortTag", "link" : "net\/alasc\/symdpoly\/defaults$.html#ShortTag:spire.math.NumberTag.BuiltinIntTag[Short]", "kind" : "implicit final val"}, {"label" : "ShortAlgebra", "tail" : ": ShortAlgebra", "member" : "spire.std.ShortInstances.ShortAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#ShortAlgebra:spire.std.ShortAlgebra", "kind" : "implicit final val"}, {"label" : "ShortBitString", "tail" : ": ShortIsBitString", "member" : "spire.std.ShortInstances.ShortBitString", "link" : "net\/alasc\/symdpoly\/defaults$.html#ShortBitString:spire.std.ShortIsBitString", "kind" : "implicit final val"}, {"label" : "ByteTag", "tail" : ": BuiltinIntTag[Byte]", "member" : "spire.std.ByteInstances.ByteTag", "link" : "net\/alasc\/symdpoly\/defaults$.html#ByteTag:spire.math.NumberTag.BuiltinIntTag[Byte]", "kind" : "implicit final val"}, {"label" : "ByteAlgebra", "tail" : ": ByteAlgebra", "member" : "spire.std.ByteInstances.ByteAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#ByteAlgebra:spire.std.ByteAlgebra", "kind" : "implicit final val"}, {"label" : "ByteBitString", "tail" : ": ByteIsBitString", "member" : "spire.std.ByteInstances.ByteBitString", "link" : "net\/alasc\/symdpoly\/defaults$.html#ByteBitString:spire.std.ByteIsBitString", "kind" : "implicit final val"}, {"label" : "CharAlgebra", "tail" : ": CharAlgebra", "member" : "spire.std.CharInstances.CharAlgebra", "link" : "net\/alasc\/symdpoly\/defaults$.html#CharAlgebra:spire.std.CharAlgebra", "kind" : "implicit final val"}, {"label" : "BooleanStructure", "tail" : ": BooleanStructure", "member" : "spire.std.BooleanInstances.BooleanStructure", "link" : "net\/alasc\/symdpoly\/defaults$.html#BooleanStructure:spire.std.BooleanStructure", "kind" : "implicit final val"}, {"label" : "indexedSeqOps", "tail" : "(lhs: CC[A]): IndexedSeqOps[A, CC]", "member" : "spire.syntax.std.SeqSyntax.indexedSeqOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#indexedSeqOps[A,CC[A]<:IndexedSeq[A]](lhs:CC[A]):spire.syntax.std.IndexedSeqOps[A,CC]", "kind" : "implicit def"}, {"label" : "seqOps", "tail" : "(lhs: CC[A]): SeqOps[A, CC]", "member" : "spire.syntax.std.SeqSyntax.seqOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#seqOps[A,CC[A]<:Iterable[A]](lhs:CC[A]):spire.syntax.std.SeqOps[A,CC]", "kind" : "implicit def"}, {"label" : "arrayOps", "tail" : "(lhs: Array[A]): ArrayOps[A]", "member" : "spire.syntax.std.ArraySyntax.arrayOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#arrayOps[A](lhs:Array[A]):spire.syntax.std.ArrayOps[A]", "kind" : "implicit def"}, {"label" : "literalBigIntOps", "tail" : "(b: BigInt): LiteralBigIntOps", "member" : "spire.syntax.std.BigIntSyntax.literalBigIntOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalBigIntOps(b:BigInt):spire.syntax.std.LiteralBigIntOps", "kind" : "implicit def"}, {"label" : "literalDoubleOps", "tail" : "(n: Double): LiteralDoubleOps", "member" : "spire.syntax.std.DoubleSyntax.literalDoubleOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalDoubleOps(n:Double):spire.syntax.std.LiteralDoubleOps", "kind" : "implicit def"}, {"label" : "literalLongOps", "tail" : "(n: Long): LiteralLongOps", "member" : "spire.syntax.std.LongSyntax.literalLongOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalLongOps(n:Long):spire.syntax.std.LiteralLongOps", "kind" : "implicit def"}, {"label" : "intToA", "tail" : "(n: Int)(c: ConvertableTo[A]): A", "member" : "spire.syntax.std.IntSyntax.intToA", "link" : "net\/alasc\/symdpoly\/defaults$.html#intToA[A](n:Int)(implicitc:spire.math.ConvertableTo[A]):A", "kind" : "implicit def"}, {"label" : "literalIntOps", "tail" : "(n: Int): LiteralIntOps", "member" : "spire.syntax.std.IntSyntax.literalIntOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalIntOps(n:Int):spire.syntax.std.LiteralIntOps", "kind" : "implicit def"}, {"label" : "integralOps", "tail" : "(a: A)(arg0: Integral[A]): IntegralOps[A]", "member" : "spire.syntax.IntegralSyntax.integralOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#integralOps[A](a:A)(implicitevidence$27:spire.math.Integral[A]):spire.math.IntegralOps[A]", "kind" : "implicit def"}, {"label" : "torsorPointOps", "tail" : "(p: P): TorsorPointOps[P]", "member" : "spire.syntax.TorsorSyntax.torsorPointOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#torsorPointOps[P](p:P):spire.syntax.TorsorPointOps[P]", "kind" : "implicit def"}, {"label" : "rightActionOps", "tail" : "(p: P): RightActionOps[P]", "member" : "spire.syntax.ActionSyntax.rightActionOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#rightActionOps[P](p:P):spire.syntax.RightActionOps[P]", "kind" : "implicit def"}, {"label" : "leftActionOps", "tail" : "(g: G): LeftActionOps[G]", "member" : "spire.syntax.ActionSyntax.leftActionOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#leftActionOps[G](g:G):spire.syntax.LeftActionOps[G]", "kind" : "implicit def"}, {"label" : "rightPartialActionOps", "tail" : "(p: P): RightPartialActionOps[P]", "member" : "spire.syntax.PartialActionSyntax.rightPartialActionOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#rightPartialActionOps[P](p:P):spire.syntax.RightPartialActionOps[P]", "kind" : "implicit def"}, {"label" : "leftPartialActionOps", "tail" : "(g: G): LeftPartialActionOps[G]", "member" : "spire.syntax.PartialActionSyntax.leftPartialActionOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#leftPartialActionOps[G](g:G):spire.syntax.LeftPartialActionOps[G]", "kind" : "implicit def"}, {"label" : "bitStringOps", "tail" : "(a: A)(arg0: BitString[A]): BitStringOps[A]", "member" : "spire.syntax.BitStringSyntax.bitStringOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#bitStringOps[A](a:A)(implicitevidence$24:spire.math.BitString[A]):spire.syntax.BitStringOps[A]", "kind" : "implicit def"}, {"label" : "boolOps", "tail" : "(a: A)(arg0: Bool[A]): BoolOps[A]", "member" : "spire.syntax.BoolSyntax.boolOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#boolOps[A](a:A)(implicitevidence$23:spire.algebra.Bool[A]):spire.syntax.BoolOps[A]", "kind" : "implicit def"}, {"label" : "heytingOps", "tail" : "(a: A)(arg0: Heyting[A]): HeytingOps[A]", "member" : "spire.syntax.HeytingSyntax.heytingOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#heytingOps[A](a:A)(implicitevidence$22:spire.algebra.lattice.Heyting[A]):spire.syntax.HeytingOps[A]", "kind" : "implicit def"}, {"label" : "joinOps", "tail" : "(a: A)(arg0: JoinSemilattice[A]): JoinOps[A]", "member" : "spire.syntax.LatticeSyntax.joinOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#joinOps[A](a:A)(implicitevidence$21:spire.algebra.lattice.JoinSemilattice[A]):spire.syntax.JoinOps[A]", "kind" : "implicit def"}, {"label" : "meetOps", "tail" : "(a: A)(arg0: MeetSemilattice[A]): MeetOps[A]", "member" : "spire.syntax.LatticeSyntax.meetOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#meetOps[A](a:A)(implicitevidence$20:spire.algebra.lattice.MeetSemilattice[A]):spire.syntax.MeetOps[A]", "kind" : "implicit def"}, {"label" : "coordianteSpaceOps", "tail" : "(v: V): CoordinateSpaceOps[V]", "member" : "spire.syntax.CoordinateSpaceSyntax.coordianteSpaceOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#coordianteSpaceOps[V](v:V):spire.syntax.CoordinateSpaceOps[V]", "kind" : "implicit def"}, {"label" : "innerProductSpaceOps", "tail" : "(v: V): InnerProductSpaceOps[V]", "member" : "spire.syntax.InnerProductSpaceSyntax.innerProductSpaceOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#innerProductSpaceOps[V](v:V):spire.syntax.InnerProductSpaceOps[V]", "kind" : "implicit def"}, {"label" : "normedVectorSpaceOps", "tail" : "(v: V): NormedVectorSpaceOps[V]", "member" : "spire.syntax.NormedVectorSpaceSyntax.normedVectorSpaceOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#normedVectorSpaceOps[V](v:V):spire.syntax.NormedVectorSpaceOps[V]", "kind" : "implicit def"}, {"label" : "metricSpaceOps", "tail" : "(v: V): MetricSpaceOps[V]", "member" : "spire.syntax.MetricSpaceSyntax.metricSpaceOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#metricSpaceOps[V](v:V):spire.syntax.MetricSpaceOps[V]", "kind" : "implicit def"}, {"label" : "vectorSpaceOps", "tail" : "(v: V): VectorSpaceOps[V]", "member" : "spire.syntax.VectorSpaceSyntax.vectorSpaceOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#vectorSpaceOps[V](v:V):spire.syntax.VectorSpaceOps[V]", "kind" : "implicit def"}, {"label" : "rightModuleOps", "tail" : "(v: V): RightModuleOps[V]", "member" : "spire.syntax.RightModuleSyntax.rightModuleOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#rightModuleOps[V](v:V):spire.syntax.RightModuleOps[V]", "kind" : "implicit def"}, {"label" : "leftModuleOps", "tail" : "(v: V): LeftModuleOps[V]", "member" : "spire.syntax.LeftModuleSyntax.leftModuleOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#leftModuleOps[V](v:V):spire.syntax.LeftModuleOps[V]", "kind" : "implicit def"}, {"label" : "groupActionGroupOps", "tail" : "(a: A)(arg0: Order[A], arg1: AdditiveGroup[A]): IntervalPointOps[A]", "member" : "spire.syntax.IntervalSyntax.groupActionGroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#groupActionGroupOps[A](a:A)(implicitevidence$25:spire.algebra.Order[A],implicitevidence$26:spire.algebra.AdditiveGroup[A]):spire.syntax.IntervalPointOps[A]", "kind" : "implicit def"}, {"label" : "trigOps", "tail" : "(a: A)(arg0: Trig[A]): TrigOps[A]", "member" : "spire.syntax.TrigSyntax.trigOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#trigOps[A](a:A)(implicitevidence$19:spire.algebra.Trig[A]):spire.syntax.TrigOps[A]", "kind" : "implicit def"}, {"label" : "nrootOps", "tail" : "(a: A)(arg0: NRoot[A]): NRootOps[A]", "member" : "spire.syntax.NRootSyntax.nrootOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#nrootOps[A](a:A)(implicitevidence$18:spire.algebra.NRoot[A]):spire.syntax.NRootOps[A]", "kind" : "implicit def"}, {"label" : "literalDoubleEuclideanRingOps", "tail" : "(lhs: Double): LiteralDoubleEuclideanRingOps", "member" : "spire.syntax.EuclideanRingSyntax.literalDoubleEuclideanRingOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalDoubleEuclideanRingOps(lhs:Double):spire.syntax.LiteralDoubleEuclideanRingOps", "kind" : "implicit def"}, {"label" : "literalLongEuclideanRingOps", "tail" : "(lhs: Long): LiteralLongEuclideanRingOps", "member" : "spire.syntax.EuclideanRingSyntax.literalLongEuclideanRingOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalLongEuclideanRingOps(lhs:Long):spire.syntax.LiteralLongEuclideanRingOps", "kind" : "implicit def"}, {"label" : "literalIntEuclideanRingOps", "tail" : "(lhs: Int): LiteralIntEuclideanRingOps", "member" : "spire.syntax.EuclideanRingSyntax.literalIntEuclideanRingOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalIntEuclideanRingOps(lhs:Int):spire.syntax.LiteralIntEuclideanRingOps", "kind" : "implicit def"}, {"label" : "euclideanRingOps", "tail" : "(a: A)(arg0: EuclideanRing[A]): EuclideanRingOps[A]", "member" : "spire.syntax.EuclideanRingSyntax.euclideanRingOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#euclideanRingOps[A](a:A)(implicitevidence$17:spire.algebra.EuclideanRing[A]):spire.syntax.EuclideanRingOps[A]", "kind" : "implicit def"}, {"label" : "gcdRingOps", "tail" : "(a: A)(arg0: GCDRing[A]): GCDRingOps[A]", "member" : "spire.syntax.GCDRingSyntax.gcdRingOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#gcdRingOps[A](a:A)(implicitevidence$16:spire.algebra.GCDRing[A]):spire.syntax.GCDRingOps[A]", "kind" : "implicit def"}, {"label" : "semiringOps", "tail" : "(a: A)(arg0: Semiring[A]): SemiringOps[A]", "member" : "spire.syntax.SemiringSyntax.semiringOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#semiringOps[A](a:A)(implicitevidence$15:spire.algebra.Semiring[A]):spire.syntax.SemiringOps[A]", "kind" : "implicit def"}, {"label" : "literalDoubleMultiplicativeGroupOps", "tail" : "(lhs: Double): LiteralDoubleMultiplicativeGroupOps", "member" : "spire.syntax.MultiplicativeGroupSyntax.literalDoubleMultiplicativeGroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalDoubleMultiplicativeGroupOps(lhs:Double):spire.syntax.LiteralDoubleMultiplicativeGroupOps", "kind" : "implicit def"}, {"label" : "literalLongMultiplicativeGroupOps", "tail" : "(lhs: Long): LiteralLongMultiplicativeGroupOps", "member" : "spire.syntax.MultiplicativeGroupSyntax.literalLongMultiplicativeGroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalLongMultiplicativeGroupOps(lhs:Long):spire.syntax.LiteralLongMultiplicativeGroupOps", "kind" : "implicit def"}, {"label" : "literalIntMultiplicativeGroupOps", "tail" : "(lhs: Int): LiteralIntMultiplicativeGroupOps", "member" : "spire.syntax.MultiplicativeGroupSyntax.literalIntMultiplicativeGroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalIntMultiplicativeGroupOps(lhs:Int):spire.syntax.LiteralIntMultiplicativeGroupOps", "kind" : "implicit def"}, {"label" : "multiplicativeGroupOps", "tail" : "(a: A)(arg0: MultiplicativeGroup[A]): MultiplicativeGroupOps[A]", "member" : "spire.syntax.MultiplicativeGroupSyntax.multiplicativeGroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#multiplicativeGroupOps[A](a:A)(implicitevidence$14:spire.algebra.MultiplicativeGroup[A]):spire.syntax.MultiplicativeGroupOps[A]", "kind" : "implicit def"}, {"label" : "multiplicativeMonoidOps", "tail" : "(a: A)(ev: MultiplicativeMonoid[A]): MultiplicativeMonoidOps[A]", "member" : "spire.syntax.MultiplicativeMonoidSyntax.multiplicativeMonoidOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#multiplicativeMonoidOps[A](a:A)(implicitev:spire.algebra.MultiplicativeMonoid[A]):spire.syntax.MultiplicativeMonoidOps[A]", "kind" : "implicit def"}, {"label" : "literalDoubleMultiplicativeSemigroupOps", "tail" : "(lhs: Double): LiteralDoubleMultiplicativeSemigroupOps", "member" : "spire.syntax.MultiplicativeSemigroupSyntax.literalDoubleMultiplicativeSemigroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalDoubleMultiplicativeSemigroupOps(lhs:Double):spire.syntax.LiteralDoubleMultiplicativeSemigroupOps", "kind" : "implicit def"}, {"label" : "literalLongMultiplicativeSemigroupOps", "tail" : "(lhs: Long): LiteralLongMultiplicativeSemigroupOps", "member" : "spire.syntax.MultiplicativeSemigroupSyntax.literalLongMultiplicativeSemigroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalLongMultiplicativeSemigroupOps(lhs:Long):spire.syntax.LiteralLongMultiplicativeSemigroupOps", "kind" : "implicit def"}, {"label" : "literalIntMultiplicativeSemigroupOps", "tail" : "(lhs: Int): LiteralIntMultiplicativeSemigroupOps", "member" : "spire.syntax.MultiplicativeSemigroupSyntax.literalIntMultiplicativeSemigroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalIntMultiplicativeSemigroupOps(lhs:Int):spire.syntax.LiteralIntMultiplicativeSemigroupOps", "kind" : "implicit def"}, {"label" : "multiplicativeSemigroupOps", "tail" : "(a: A)(arg0: MultiplicativeSemigroup[A]): MultiplicativeSemigroupOps[A]", "member" : "spire.syntax.MultiplicativeSemigroupSyntax.multiplicativeSemigroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#multiplicativeSemigroupOps[A](a:A)(implicitevidence$13:spire.algebra.MultiplicativeSemigroup[A]):spire.syntax.MultiplicativeSemigroupOps[A]", "kind" : "implicit def"}, {"label" : "literalDoubleAdditiveGroupOps", "tail" : "(lhs: Double): LiteralDoubleAdditiveGroupOps", "member" : "spire.syntax.AdditiveGroupSyntax.literalDoubleAdditiveGroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalDoubleAdditiveGroupOps(lhs:Double):spire.syntax.LiteralDoubleAdditiveGroupOps", "kind" : "implicit def"}, {"label" : "literalLongAdditiveGroupOps", "tail" : "(lhs: Long): LiteralLongAdditiveGroupOps", "member" : "spire.syntax.AdditiveGroupSyntax.literalLongAdditiveGroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalLongAdditiveGroupOps(lhs:Long):spire.syntax.LiteralLongAdditiveGroupOps", "kind" : "implicit def"}, {"label" : "literalIntAdditiveGroupOps", "tail" : "(lhs: Int): LiteralIntAdditiveGroupOps", "member" : "spire.syntax.AdditiveGroupSyntax.literalIntAdditiveGroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalIntAdditiveGroupOps(lhs:Int):spire.syntax.LiteralIntAdditiveGroupOps", "kind" : "implicit def"}, {"label" : "additiveGroupOps", "tail" : "(a: A)(arg0: AdditiveGroup[A]): AdditiveGroupOps[A]", "member" : "spire.syntax.AdditiveGroupSyntax.additiveGroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#additiveGroupOps[A](a:A)(implicitevidence$12:spire.algebra.AdditiveGroup[A]):spire.syntax.AdditiveGroupOps[A]", "kind" : "implicit def"}, {"label" : "additiveMonoidOps", "tail" : "(a: A)(ev: AdditiveMonoid[A]): AdditiveMonoidOps[A]", "member" : "spire.syntax.AdditiveMonoidSyntax.additiveMonoidOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#additiveMonoidOps[A](a:A)(implicitev:spire.algebra.AdditiveMonoid[A]):spire.syntax.AdditiveMonoidOps[A]", "kind" : "implicit def"}, {"label" : "literalDoubleAdditiveSemigroupOps", "tail" : "(lhs: Double): LiteralDoubleAdditiveSemigroupOps", "member" : "spire.syntax.AdditiveSemigroupSyntax.literalDoubleAdditiveSemigroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalDoubleAdditiveSemigroupOps(lhs:Double):spire.syntax.LiteralDoubleAdditiveSemigroupOps", "kind" : "implicit def"}, {"label" : "literalLongAdditiveSemigroupOps", "tail" : "(lhs: Long): LiteralLongAdditiveSemigroupOps", "member" : "spire.syntax.AdditiveSemigroupSyntax.literalLongAdditiveSemigroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalLongAdditiveSemigroupOps(lhs:Long):spire.syntax.LiteralLongAdditiveSemigroupOps", "kind" : "implicit def"}, {"label" : "literalIntAdditiveSemigroupOps", "tail" : "(lhs: Int): LiteralIntAdditiveSemigroupOps", "member" : "spire.syntax.AdditiveSemigroupSyntax.literalIntAdditiveSemigroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalIntAdditiveSemigroupOps(lhs:Int):spire.syntax.LiteralIntAdditiveSemigroupOps", "kind" : "implicit def"}, {"label" : "additiveSemigroupOps", "tail" : "(a: A)(arg0: AdditiveSemigroup[A]): AdditiveSemigroupOps[A]", "member" : "spire.syntax.AdditiveSemigroupSyntax.additiveSemigroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#additiveSemigroupOps[A](a:A)(implicitevidence$11:spire.algebra.AdditiveSemigroup[A]):spire.syntax.AdditiveSemigroupOps[A]", "kind" : "implicit def"}, {"label" : "groupOps", "tail" : "(a: A)(arg0: Group[A]): GroupOps[A]", "member" : "spire.syntax.GroupSyntax.groupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#groupOps[A](a:A)(implicitevidence$10:spire.algebra.Group[A]):spire.syntax.GroupOps[A]", "kind" : "implicit def"}, {"label" : "monoidOps", "tail" : "(a: A)(ev: Monoid[A]): MonoidOps[A]", "member" : "spire.syntax.MonoidSyntax.monoidOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#monoidOps[A](a:A)(implicitev:spire.algebra.Monoid[A]):spire.syntax.MonoidOps[A]", "kind" : "implicit def"}, {"label" : "semigroupOps", "tail" : "(a: A)(arg0: Semigroup[A]): SemigroupOps[A]", "member" : "spire.syntax.SemigroupSyntax.semigroupOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#semigroupOps[A](a:A)(implicitevidence$9:spire.algebra.Semigroup[A]):spire.syntax.SemigroupOps[A]", "kind" : "implicit def"}, {"label" : "groupoidOps", "tail" : "(a: A)(ev: Groupoid[A]): GroupoidOps[A]", "member" : "spire.syntax.GroupoidSyntax.groupoidOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#groupoidOps[A](a:A)(implicitev:spire.algebra.partial.Groupoid[A]):spire.syntax.GroupoidOps[A]", "kind" : "implicit def"}, {"label" : "groupoidCommonOps", "tail" : "(a: A)(ev: Groupoid[A], ni: NoImplicit[Monoid[A]]): GroupoidCommonOps[A]", "member" : "spire.syntax.GroupoidSyntax.groupoidCommonOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#groupoidCommonOps[A](a:A)(implicitev:spire.algebra.partial.Groupoid[A],implicitni:spire.NoImplicit[spire.algebra.Monoid[A]]):spire.syntax.GroupoidCommonOps[A]", "kind" : "implicit def"}, {"label" : "semigroupoidOps", "tail" : "(a: A)(arg0: Semigroupoid[A]): SemigroupoidOps[A]", "member" : "spire.syntax.SemigroupoidSyntax.semigroupoidOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#semigroupoidOps[A](a:A)(implicitevidence$8:spire.algebra.partial.Semigroupoid[A]):spire.syntax.SemigroupoidOps[A]", "kind" : "implicit def"}, {"label" : "convertableOps", "tail" : "(a: A)(arg0: ConvertableFrom[A]): ConvertableFromOps[A]", "member" : "spire.syntax.ConvertableFromSyntax.convertableOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#convertableOps[A](a:A)(implicitevidence$28:spire.math.ConvertableFrom[A]):spire.syntax.ConvertableFromOps[A]", "kind" : "implicit def"}, {"label" : "isRealOps", "tail" : "(a: A)(arg0: IsReal[A]): IsRealOps[A]", "member" : "spire.syntax.IsRealSyntax.isRealOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#isRealOps[A](a:A)(implicitevidence$7:spire.algebra.IsReal[A]):spire.syntax.IsRealOps[A]", "kind" : "implicit def"}, {"label" : "involutionOps", "tail" : "(lhs: A)(arg0: Involution[A]): InvolutionOps[A]", "member" : "spire.syntax.InvolutionSyntax.involutionOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#involutionOps[A](lhs:A)(implicitevidence$6:spire.algebra.Involution[A]):spire.syntax.InvolutionOps[A]", "kind" : "implicit def"}, {"label" : "literalDoubleTruncatedDivisionOps", "tail" : "(lhs: Double): LiteralDoubleTruncatedDivisionOps", "member" : "spire.syntax.TruncatedDivisionSyntax.literalDoubleTruncatedDivisionOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalDoubleTruncatedDivisionOps(lhs:Double):spire.syntax.LiteralDoubleTruncatedDivisionOps", "kind" : "implicit def"}, {"label" : "literalLongTruncatedDivisionOps", "tail" : "(lhs: Long): LiteralLongTruncatedDivisionOps", "member" : "spire.syntax.TruncatedDivisionSyntax.literalLongTruncatedDivisionOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalLongTruncatedDivisionOps(lhs:Long):spire.syntax.LiteralLongTruncatedDivisionOps", "kind" : "implicit def"}, {"label" : "literalIntTruncatedDivisionOps", "tail" : "(lhs: Int): LiteralIntTruncatedDivisionOps", "member" : "spire.syntax.TruncatedDivisionSyntax.literalIntTruncatedDivisionOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalIntTruncatedDivisionOps(lhs:Int):spire.syntax.LiteralIntTruncatedDivisionOps", "kind" : "implicit def"}, {"label" : "truncatedDivisionOps", "tail" : "(a: A)(arg0: TruncatedDivision[A]): TruncatedDivisionOps[A]", "member" : "spire.syntax.TruncatedDivisionSyntax.truncatedDivisionOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#truncatedDivisionOps[A](a:A)(implicitevidence$5:spire.algebra.TruncatedDivision[A]):spire.syntax.TruncatedDivisionOps[A]", "kind" : "implicit def"}, {"label" : "signedOps", "tail" : "(a: A)(arg0: Signed[A]): SignedOps[A]", "member" : "spire.syntax.SignedSyntax.signedOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#signedOps[A](a:A)(implicitevidence$4:spire.algebra.Signed[A]):spire.syntax.SignedOps[A]", "kind" : "implicit def"}, {"label" : "literalDoubleOrderOps", "tail" : "(lhs: Double): LiteralDoubleOrderOps", "member" : "spire.syntax.OrderSyntax.literalDoubleOrderOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalDoubleOrderOps(lhs:Double):spire.syntax.LiteralDoubleOrderOps", "kind" : "implicit def"}, {"label" : "literalLongOrderOps", "tail" : "(lhs: Long): LiteralLongOrderOps", "member" : "spire.syntax.OrderSyntax.literalLongOrderOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalLongOrderOps(lhs:Long):spire.syntax.LiteralLongOrderOps", "kind" : "implicit def"}, {"label" : "literalIntOrderOps", "tail" : "(lhs: Int): LiteralIntOrderOps", "member" : "spire.syntax.OrderSyntax.literalIntOrderOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#literalIntOrderOps(lhs:Int):spire.syntax.LiteralIntOrderOps", "kind" : "implicit def"}, {"label" : "orderOps", "tail" : "(a: A)(arg0: Order[A]): OrderOps[A]", "member" : "spire.syntax.OrderSyntax.orderOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#orderOps[A](a:A)(implicitevidence$3:spire.algebra.Order[A]):spire.syntax.OrderOps[A]", "kind" : "implicit def"}, {"label" : "partialOrderOps", "tail" : "(a: A)(arg0: PartialOrder[A]): PartialOrderOps[A]", "member" : "spire.syntax.PartialOrderSyntax.partialOrderOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#partialOrderOps[A](a:A)(implicitevidence$2:spire.algebra.PartialOrder[A]):spire.syntax.PartialOrderOps[A]", "kind" : "implicit def"}, {"label" : "eqOps", "tail" : "(a: A)(arg0: Eq[A]): EqOps[A]", "member" : "spire.syntax.EqSyntax.eqOps", "link" : "net\/alasc\/symdpoly\/defaults$.html#eqOps[A](a:A)(implicitevidence$1:spire.algebra.Eq[A]):spire.syntax.EqOps[A]", "kind" : "implicit def"}, {"label" : "cforRange2", "tail" : "(r1: Range, r2: Range)(body: (Int, Int) ⇒ Unit): Unit", "member" : "spire.syntax.CforSyntax.cforRange2", "link" : "net\/alasc\/symdpoly\/defaults$.html#cforRange2(r1:Range,r2:Range)(body:(Int,Int)=>Unit):Unit", "kind" : "macro def"}, {"label" : "cforRange", "tail" : "(r: Range)(body: (Int) ⇒ Unit): Unit", "member" : "spire.syntax.CforSyntax.cforRange", "link" : "net\/alasc\/symdpoly\/defaults$.html#cforRange(r:Range)(body:Int=>Unit):Unit", "kind" : "macro def"}, {"label" : "cfor", "tail" : "(init: A)(test: (A) ⇒ Boolean, next: (A) ⇒ A)(body: (A) ⇒ Unit): Unit", "member" : "spire.syntax.CforSyntax.cfor", "link" : "net\/alasc\/symdpoly\/defaults$.html#cfor[A](init:A)(test:A=>Boolean,next:A=>A)(body:A=>Unit):Unit", "kind" : "macro def"}, {"label" : "literals", "tail" : "(s: StringContext): Literals", "member" : "spire.syntax.LiteralsSyntax.literals", "link" : "net\/alasc\/symdpoly\/defaults$.html#literals(s:StringContext):spire.syntax.Literals", "kind" : "implicit def"}, {"label" : "permRepGrpBuilder", "tail" : "(arg0: ClassTag[G], arg1: Eq[G], arg2: Group[G], arg3: FaithfulPermutationActionBuilder[G]): GrpChainPermutationAction[G]", "member" : "net.alasc.perms.Algorithms.permRepGrpBuilder", "link" : "net\/alasc\/symdpoly\/defaults$.html#permRepGrpBuilder[G](implicitevidence$2:scala.reflect.ClassTag[G],implicitevidence$3:spire.algebra.Eq[G],implicitevidence$4:spire.algebra.Group[G],implicitevidence$5:net.alasc.finite.FaithfulPermutationActionBuilder[G]):net.alasc.bsgs.GrpChainPermutationAction[G]", "kind" : "implicit def"}, {"label" : "baseChange", "tail" : ": BaseChange", "member" : "net.alasc.perms.Algorithms.baseChange", "link" : "net\/alasc\/symdpoly\/defaults$.html#baseChange:net.alasc.bsgs.BaseChange", "kind" : "implicit val"}, {"label" : "baseSwap", "tail" : ": BaseSwap", "member" : "net.alasc.perms.Algorithms.baseSwap", "link" : "net\/alasc\/symdpoly\/defaults$.html#baseSwap:net.alasc.bsgs.BaseSwap", "kind" : "implicit val"}, {"label" : "schreierSims", "tail" : ": SchreierSims", "member" : "net.alasc.perms.Algorithms.schreierSims", "link" : "net\/alasc\/symdpoly\/defaults$.html#schreierSims:net.alasc.bsgs.SchreierSims", "kind" : "implicit val"}, {"label" : "baseChangeConjugates", "tail" : ": Boolean", "member" : "net.alasc.perms.Algorithms.baseChangeConjugates", "link" : "net\/alasc\/symdpoly\/defaults$.html#baseChangeConjugates:Boolean", "kind" : "val"}, {"label" : "baseChangeRecomputes", "tail" : ": Boolean", "member" : "net.alasc.perms.Algorithms.baseChangeRecomputes", "link" : "net\/alasc\/symdpoly\/defaults$.html#baseChangeRecomputes:Boolean", "kind" : "val"}, {"label" : "randomOpt", "tail" : ": Opt[Random]", "member" : "net.alasc.perms.Algorithms.randomOpt", "link" : "net\/alasc\/symdpoly\/defaults$.html#randomOpt:spire.util.Opt[scala.util.Random]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/defaults$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/defaults$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/defaults$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/defaults$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/defaults$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/defaults$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/defaults$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/defaults$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/defaults$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/defaults$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/defaults$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/defaults$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/defaults$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/defaults$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/defaults$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/defaults$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/defaults$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/defaults$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/defaults$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.Direction", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Direction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Direction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Direction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Direction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Direction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Direction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Direction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Direction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Direction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Direction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Direction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Direction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/Direction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Direction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Direction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Direction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Direction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Direction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Direction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "reverse", "tail" : "(): Direction", "member" : "net.alasc.symdpoly.Direction.reverse", "link" : "net\/alasc\/symdpoly\/Direction.html#reverse:net.alasc.symdpoly.Direction", "kind" : "abstract def"}], "shortDescription" : "Direction along which to optimize the objective: minimization or maximization.", "object" : "net\/alasc\/symdpoly\/Direction$.html", "members_object" : [{"label" : "Maximize", "tail" : "", "member" : "net.alasc.symdpoly.Direction.Maximize", "link" : "net\/alasc\/symdpoly\/Direction$.html#Maximize", "kind" : "object"}, {"label" : "Minimize", "tail" : "", "member" : "net.alasc.symdpoly.Direction.Minimize", "link" : "net\/alasc\/symdpoly\/Direction$.html#Minimize", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Direction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Direction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Direction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Direction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Direction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Direction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Direction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Direction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Direction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Direction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Direction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Direction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/Direction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Direction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Direction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Direction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Direction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Direction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Direction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/Direction.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.Failure", "shortDescription" : "", "members_case class" : [{"member" : "net.alasc.symdpoly.Failure#<init>", "error" : "unsupported entity"}, {"label" : "status", "tail" : ": String", "member" : "net.alasc.symdpoly.Failure.status", "link" : "net\/alasc\/symdpoly\/Failure.html#status:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Failure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Failure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Failure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Failure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Failure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Failure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Failure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Failure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Failure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Failure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Failure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Failure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Failure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Failure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Failure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Failure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/Failure.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.GSet", "members_trait" : [{"label" : "orbit", "tail" : "(grp: Grp[M.PermutationType])(action: Action[M.MonoType, M.PermutationType]): GSet[M]", "member" : "net.alasc.symdpoly.GSet.orbit", "link" : "net\/alasc\/symdpoly\/GSet.html#orbit(grp:net.alasc.finite.Grp[M#PermutationType])(implicitaction:spire.algebra.Action[M#MonoType,M#PermutationType]):net.alasc.symdpoly.GSet[M]", "kind" : "def"}, {"label" : "pow", "tail" : "(exp: Int): GSet[M]", "member" : "net.alasc.symdpoly.GSet.pow", "link" : "net\/alasc\/symdpoly\/GSet.html#pow(exp:Int):net.alasc.symdpoly.GSet[M]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: GSet[M]): GSet[M]", "member" : "net.alasc.symdpoly.GSet.*", "link" : "net\/alasc\/symdpoly\/GSet.html#*(rhs:net.alasc.symdpoly.GSet[M]):net.alasc.symdpoly.GSet[M]", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: GSet[M]): GSet[M]", "member" : "net.alasc.symdpoly.GSet.+", "link" : "net\/alasc\/symdpoly\/GSet.html#+(rhs:net.alasc.symdpoly.GSet[M]):net.alasc.symdpoly.GSet[M]", "kind" : "def"}, {"label" : "toOrderedSet", "tail" : "(wM: Aux[M]): OrderedSet[M.MonoType]", "member" : "net.alasc.symdpoly.GSet.toOrderedSet", "link" : "net\/alasc\/symdpoly\/GSet.html#toOrderedSet(implicitwM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.util.OrderedSet[M#MonoType]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/GSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/GSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/GSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/GSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/GSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/GSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/GSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/GSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/GSet.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/GSet.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/GSet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/GSet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/GSet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/GSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/GSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/GSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "metalSet", "tail" : "(wM: Aux[M]): HashSet[M.MonoType]", "member" : "net.alasc.symdpoly.GSet.metalSet", "link" : "net\/alasc\/symdpoly\/GSet.html#metalSet(implicitwM:shapeless.Witness.Aux[M]):metal.immutable.HashSet[M#MonoType]", "kind" : "abstract def"}], "shortDescription" : "Generating set of monomials.", "object" : "net\/alasc\/symdpoly\/GSet$.html", "members_object" : [{"label" : "monoidSetSemiring", "tail" : "(arg0: ClassTag[A], arg1: Monoid[A]): Rig[HashSet[A]]", "member" : "net.alasc.symdpoly.GSet.monoidSetSemiring", "link" : "net\/alasc\/symdpoly\/GSet$.html#monoidSetSemiring[A](implicitevidence$2:scala.reflect.ClassTag[A],implicitevidence$3:spire.algebra.Monoid[A]):spire.algebra.Rig[metal.immutable.HashSet[A]]", "kind" : "implicit def"}, {"label" : "canonicalMonoMonoid", "tail" : "(arg0: Aux[M]): Monoid[GSet.canonicalMonoMonoid.M.MonoType]", "member" : "net.alasc.symdpoly.GSet.canonicalMonoMonoid", "link" : "net\/alasc\/symdpoly\/GSet$.html#canonicalMonoMonoid[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$1:shapeless.Witness.Aux[M]):spire.algebra.Monoid[M#MonoType]", "kind" : "def"}, {"label" : "Tensor", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Tensor", "link" : "net\/alasc\/symdpoly\/GSet$.html#Tensor[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "Power", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Power", "link" : "net\/alasc\/symdpoly\/GSet$.html#Power[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "Sequence", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Sequence", "link" : "net\/alasc\/symdpoly\/GSet$.html#Sequence[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "Quotient", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Quotient", "link" : "net\/alasc\/symdpoly\/GSet$.html#Quotient[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "Word", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Word", "link" : "net\/alasc\/symdpoly\/GSet$.html#Word[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsGSet[F]withProductwithSerializable", "kind" : "case class"}, {"label" : "Ops", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Ops", "link" : "net\/alasc\/symdpoly\/GSet$.html#Ops[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton]extendsGSet[F]withProductwithSerializable", "kind" : "case class"}, {"label" : "Id", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Id", "link" : "net\/alasc\/symdpoly\/GSet$.html#Id[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Empty", "link" : "net\/alasc\/symdpoly\/GSet$.html#Empty[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "Orbit", "tail" : "", "member" : "net.alasc.symdpoly.GSet.Orbit", "link" : "net\/alasc\/symdpoly\/GSet$.html#Orbit[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]extendsGSet[M]withProductwithSerializable", "kind" : "case class"}, {"label" : "id", "tail" : "(): GSet[M]", "member" : "net.alasc.symdpoly.GSet.id", "link" : "net\/alasc\/symdpoly\/GSet$.html#id[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]:net.alasc.symdpoly.GSet[M]", "kind" : "def"}, {"label" : "empty", "tail" : "(): GSet[M]", "member" : "net.alasc.symdpoly.GSet.empty", "link" : "net\/alasc\/symdpoly\/GSet$.html#empty[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]:net.alasc.symdpoly.GSet[M]", "kind" : "def"}, {"label" : "word", "tail" : "(opEnums: GSet.word.F.OpEnum*): GSet[F]", "member" : "net.alasc.symdpoly.GSet.word", "link" : "net\/alasc\/symdpoly\/GSet$.html#word[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](opEnums:F#OpEnum*):net.alasc.symdpoly.GSet[F]", "kind" : "def"}, {"label" : "onePlus", "tail" : "(opEnums: GSet.onePlus.F.OpEnum*): GSet[F]", "member" : "net.alasc.symdpoly.GSet.onePlus", "link" : "net\/alasc\/symdpoly\/GSet$.html#onePlus[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](opEnums:F#OpEnum*):net.alasc.symdpoly.GSet[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(opEnums: GSet.apply.F.OpEnum*): GSet[F]", "member" : "net.alasc.symdpoly.GSet.apply", "link" : "net\/alasc\/symdpoly\/GSet$.html#apply[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](opEnums:F#OpEnum*):net.alasc.symdpoly.GSet[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/GSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/GSet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/GSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/GSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/GSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/GSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/GSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/GSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/GSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/GSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/GSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/GSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/GSet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/GSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/GSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/GSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/GSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/GSet.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.LocalizingMatrix", "shortDescription" : "Localizing matrix", "object" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html", "members_class" : [{"label" : "expandIn", "tail" : "(relaxation: Relaxation[E, M]): (Block, Boolean)", "member" : "net.alasc.symdpoly.LocalizingMatrix.expandIn", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#expandIn(relaxation:net.alasc.symdpoly.Relaxation[E,M]):(net.alasc.symdpoly.sdp.Block,Boolean)", "kind" : "def"}, {"label" : "allMoments", "tail" : "(): HashSet[E.SingleMomentType]", "member" : "net.alasc.symdpoly.LocalizingMatrix.allMoments", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#allMoments:scala.collection.immutable.HashSet[E#SingleMomentType]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "net.alasc.symdpoly.LocalizingMatrix.size", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#size:Int", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.LocalizingMatrix.M", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#M:M", "kind" : "def"}, {"label" : "E", "tail" : "(): E", "member" : "net.alasc.symdpoly.LocalizingMatrix.E", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#E:E", "kind" : "def"}, {"member" : "net.alasc.symdpoly.LocalizingMatrix#<init>", "error" : "unsupported entity"}, {"label" : "mat", "tail" : ": Mat[E.LinearMomentType]", "member" : "net.alasc.symdpoly.LocalizingMatrix.mat", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#mat:scalin.immutable.Mat[E#LinearMomentType]", "kind" : "val"}, {"label" : "generatingMoments", "tail" : ": OrderedSet[M.MonoType]", "member" : "net.alasc.symdpoly.LocalizingMatrix.generatingMoments", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#generatingMoments:net.alasc.symdpoly.util.OrderedSet[M#MonoType]", "kind" : "val"}, {"label" : "polynomial", "tail" : ": M.PolyType", "member" : "net.alasc.symdpoly.LocalizingMatrix.polynomial", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#polynomial:M#PolyType", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(polynomial: LocalizingMatrix.apply.M.PolyType, generatingMoments: OrderedSet[LocalizingMatrix.apply.M.MonoType])(arg0: Aux[E], arg1: Aux[M]): LocalizingMatrix[E, M]", "member" : "net.alasc.symdpoly.LocalizingMatrix.apply", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#apply[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](polynomial:M#PolyType,generatingMoments:net.alasc.symdpoly.util.OrderedSet[M#MonoType])(implicitevidence$3:shapeless.Witness.Aux[E],implicitevidence$4:shapeless.Witness.Aux[M]):net.alasc.symdpoly.LocalizingMatrix[E,M]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/LocalizingMatrix$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/LocalizingMatrix.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.MomentMatrix", "shortDescription" : "Moment matrix", "object" : "net\/alasc\/symdpoly\/MomentMatrix$.html", "members_class" : [{"label" : "expandIn", "tail" : "(relaxation: Relaxation[E, M]): (Block, Boolean)", "member" : "net.alasc.symdpoly.MomentMatrix.expandIn", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#expandIn(relaxation:net.alasc.symdpoly.Relaxation[E,M]):(net.alasc.symdpoly.sdp.Block,Boolean)", "kind" : "def"}, {"label" : "allMoments", "tail" : "(): HashSet[E.SingleMomentType]", "member" : "net.alasc.symdpoly.MomentMatrix.allMoments", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#allMoments:scala.collection.immutable.HashSet[E#SingleMomentType]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "net.alasc.symdpoly.MomentMatrix.size", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#size:Int", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.MomentMatrix.M", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#M:M", "kind" : "def"}, {"label" : "E", "tail" : "(): E", "member" : "net.alasc.symdpoly.MomentMatrix.E", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#E:E", "kind" : "def"}, {"member" : "net.alasc.symdpoly.MomentMatrix#<init>", "error" : "unsupported entity"}, {"label" : "mat", "tail" : ": Mat[E.SingleMomentType]", "member" : "net.alasc.symdpoly.MomentMatrix.mat", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#mat:scalin.immutable.Mat[E#SingleMomentType]", "kind" : "val"}, {"label" : "generatingMoments", "tail" : ": OrderedSet[M.MonoType]", "member" : "net.alasc.symdpoly.MomentMatrix.generatingMoments", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#generatingMoments:net.alasc.symdpoly.util.OrderedSet[M#MonoType]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/MomentMatrix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(generatingMoments: OrderedSet[MomentMatrix.apply.M.MonoType], symmetry: GrpMonomialRepresentation[MomentMatrix.apply.M.PermutationType])(arg0: Aux[E], arg1: Aux[M]): MomentMatrix[E, M]", "member" : "net.alasc.symdpoly.MomentMatrix.apply", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#apply[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](generatingMoments:net.alasc.symdpoly.util.OrderedSet[M#MonoType],symmetry:net.alasc.symdpoly.math.GrpMonomialRepresentation[M#PermutationType])(implicitevidence$5:shapeless.Witness.Aux[E],implicitevidence$6:shapeless.Witness.Aux[M]):net.alasc.symdpoly.MomentMatrix[E,M]", "kind" : "def"}, {"label" : "apply", "tail" : "(generatingMoments: OrderedSet[MomentMatrix.apply.M.MonoType])(arg0: Aux[E], arg1: Aux[M]): MomentMatrix[E, M]", "member" : "net.alasc.symdpoly.MomentMatrix.apply", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#apply[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](generatingMoments:net.alasc.symdpoly.util.OrderedSet[M#MonoType])(implicitevidence$3:shapeless.Witness.Aux[E],implicitevidence$4:shapeless.Witness.Aux[M]):net.alasc.symdpoly.MomentMatrix[E,M]", "kind" : "def"}, {"label" : "matIterator", "tail" : "(mat: Mat[A]): Iterator[A]", "member" : "net.alasc.symdpoly.MomentMatrix.matIterator", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#matIterator[A](mat:scalin.immutable.Mat[A]):Iterator[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/MomentMatrix$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/MomentMatrix.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.OperatorConstraint", "shortDescription" : "", "members_case class" : [{"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.OperatorConstraint.M", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#M:M", "kind" : "def"}, {"member" : "net.alasc.symdpoly.OperatorConstraint#<init>", "error" : "unsupported entity"}, {"label" : "rhs", "tail" : ": M.PolyType", "member" : "net.alasc.symdpoly.OperatorConstraint.rhs", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#rhs:M#PolyType", "kind" : "val"}, {"label" : "op", "tail" : ": ComparisonOp", "member" : "net.alasc.symdpoly.OperatorConstraint.op", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#op:net.alasc.symdpoly.ComparisonOp", "kind" : "val"}, {"label" : "lhs", "tail" : ": M.PolyType", "member" : "net.alasc.symdpoly.OperatorConstraint.lhs", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#lhs:M#PolyType", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/OperatorConstraint.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/OperatorConstraint.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.Optimization", "shortDescription" : "Polynomial optimization problem.", "members_case class" : [{"label" : "subjectTo", "tail" : "(newConstraints: Constraint[E, M]*): Optimization[E, M]", "member" : "net.alasc.symdpoly.Optimization.subjectTo", "link" : "net\/alasc\/symdpoly\/Optimization.html#subjectTo(newConstraints:net.alasc.symdpoly.Constraint[E,M]*):net.alasc.symdpoly.Optimization[E,M]", "kind" : "def"}, {"label" : "relaxation", "tail" : "(generatingSet: GSet[M]): Relaxation[E, M]", "member" : "net.alasc.symdpoly.Optimization.relaxation", "link" : "net\/alasc\/symdpoly\/Optimization.html#relaxation(generatingSet:net.alasc.symdpoly.GSet[M]):net.alasc.symdpoly.Relaxation[E,M]", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.Optimization.M", "link" : "net\/alasc\/symdpoly\/Optimization.html#M:M", "kind" : "def"}, {"label" : "E", "tail" : "(): E", "member" : "net.alasc.symdpoly.Optimization.E", "link" : "net\/alasc\/symdpoly\/Optimization.html#E:E", "kind" : "def"}, {"label" : "symmetrize", "tail" : "(quotientFeasibilityGroup: Option[Grp[M.PermutationType]], evaluationFeasibilityGroup: Option[Grp[M.PermutationType]]): (SymmetrizedOptimization, Grp[M.PermutationType])", "member" : "net.alasc.symdpoly.Optimization.symmetrize", "link" : "net\/alasc\/symdpoly\/Optimization.html#symmetrize(quotientFeasibilityGroup:Option[net.alasc.finite.Grp[M#PermutationType]],evaluationFeasibilityGroup:Option[net.alasc.finite.Grp[M#PermutationType]]):(Optimization.this.SymmetrizedOptimization,net.alasc.finite.Grp[M#PermutationType])", "kind" : "def"}, {"label" : "SymmetrizedOptimization", "tail" : "", "member" : "net.alasc.symdpoly.Optimization.SymmetrizedOptimization", "link" : "net\/alasc\/symdpoly\/Optimization.html#SymmetrizedOptimization=net.alasc.symdpoly.Optimization[_<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M]", "kind" : "type"}, {"label" : "forceSymmetrizeNC", "tail" : "(grp: Grp[M.PermutationType]): Optimization[_ <: Aux[M] with Singleton, M]", "member" : "net.alasc.symdpoly.Optimization.forceSymmetrizeNC", "link" : "net\/alasc\/symdpoly\/Optimization.html#forceSymmetrizeNC(grp:net.alasc.finite.Grp[M#PermutationType]):net.alasc.symdpoly.Optimization[_<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.Optimization#<init>", "error" : "unsupported entity"}, {"label" : "scalarConstraints", "tail" : ": Seq[ScalarConstraint[E, M]]", "member" : "net.alasc.symdpoly.Optimization.scalarConstraints", "link" : "net\/alasc\/symdpoly\/Optimization.html#scalarConstraints:Seq[net.alasc.symdpoly.ScalarConstraint[E,M]]", "kind" : "val"}, {"label" : "operatorConstraints", "tail" : ": Seq[OperatorConstraint[M]]", "member" : "net.alasc.symdpoly.Optimization.operatorConstraints", "link" : "net\/alasc\/symdpoly\/Optimization.html#operatorConstraints:Seq[net.alasc.symdpoly.OperatorConstraint[M]]", "kind" : "val"}, {"label" : "objective", "tail" : ": E.LinearMomentType", "member" : "net.alasc.symdpoly.Optimization.objective", "link" : "net\/alasc\/symdpoly\/Optimization.html#objective:E#LinearMomentType", "kind" : "val"}, {"label" : "direction", "tail" : ": Direction", "member" : "net.alasc.symdpoly.Optimization.direction", "link" : "net\/alasc\/symdpoly\/Optimization.html#direction:net.alasc.symdpoly.Direction", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Optimization.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Optimization.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Optimization.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Optimization.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Optimization.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Optimization.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Optimization.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Optimization.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Optimization.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Optimization.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Optimization.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Optimization.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Optimization.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Optimization.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Optimization.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Optimization.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/Optimization.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.OptimumFound", "shortDescription" : "", "members_case class" : [{"member" : "net.alasc.symdpoly.OptimumFound#<init>", "error" : "unsupported entity"}, {"label" : "dualObjective", "tail" : ": Double", "member" : "net.alasc.symdpoly.OptimumFound.dualObjective", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#dualObjective:Double", "kind" : "val"}, {"label" : "primalObjective", "tail" : ": Option[Double]", "member" : "net.alasc.symdpoly.OptimumFound.primalObjective", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#primalObjective:Option[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/OptimumFound.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/OptimumFound.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/OptimumFound.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.Relaxation", "shortDescription" : "Moment-based relaxation of a noncommutative polynomial optimization problem.", "object" : "net\/alasc\/symdpoly\/Relaxation$.html", "members_class" : [{"label" : "program", "tail" : ": Program", "member" : "net.alasc.symdpoly.Relaxation.program", "link" : "net\/alasc\/symdpoly\/Relaxation.html#program:net.alasc.symdpoly.sdp.Program", "kind" : "lazy val"}, {"label" : "allSelfAdjoint", "tail" : ": Boolean", "member" : "net.alasc.symdpoly.Relaxation.allSelfAdjoint", "link" : "net\/alasc\/symdpoly\/Relaxation.html#allSelfAdjoint:Boolean", "kind" : "lazy val"}, {"label" : "adjointMoment", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.Relaxation.adjointMoment", "link" : "net\/alasc\/symdpoly\/Relaxation.html#adjointMoment:Array[Int]", "kind" : "lazy val"}, {"label" : "allMoments", "tail" : ": OrderedSet[E.SingleMomentType]", "member" : "net.alasc.symdpoly.Relaxation.allMoments", "link" : "net\/alasc\/symdpoly\/Relaxation.html#allMoments:net.alasc.symdpoly.util.OrderedSet[E#SingleMomentType]", "kind" : "lazy val"}, {"label" : "E", "tail" : "(): E", "member" : "net.alasc.symdpoly.Relaxation.E", "link" : "net\/alasc\/symdpoly\/Relaxation.html#E:E", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.Relaxation.toString", "link" : "net\/alasc\/symdpoly\/Relaxation.html#toString():String", "kind" : "def"}, {"member" : "net.alasc.symdpoly.Relaxation#<init>", "error" : "unsupported entity"}, {"label" : "scalarIneq", "tail" : ": Seq[LinearMoment[E, M]]", "member" : "net.alasc.symdpoly.Relaxation.scalarIneq", "link" : "net\/alasc\/symdpoly\/Relaxation.html#scalarIneq:Seq[net.alasc.symdpoly.generic.LinearMoment[E,M]]", "kind" : "val"}, {"label" : "scalarEq", "tail" : ": Seq[LinearMoment[E, M]]", "member" : "net.alasc.symdpoly.Relaxation.scalarEq", "link" : "net\/alasc\/symdpoly\/Relaxation.html#scalarEq:Seq[net.alasc.symdpoly.generic.LinearMoment[E,M]]", "kind" : "val"}, {"label" : "localizingMatrices", "tail" : ": Seq[LocalizingMatrix[E, M]]", "member" : "net.alasc.symdpoly.Relaxation.localizingMatrices", "link" : "net\/alasc\/symdpoly\/Relaxation.html#localizingMatrices:Seq[net.alasc.symdpoly.LocalizingMatrix[E,M]]", "kind" : "val"}, {"label" : "momentMatrixSymmetry", "tail" : ": GrpMonomialRepresentation[M.PermutationType]", "member" : "net.alasc.symdpoly.Relaxation.momentMatrixSymmetry", "link" : "net\/alasc\/symdpoly\/Relaxation.html#momentMatrixSymmetry:net.alasc.symdpoly.math.GrpMonomialRepresentation[M#PermutationType]", "kind" : "val"}, {"label" : "momentMatrix", "tail" : ": MomentMatrix[E, M]", "member" : "net.alasc.symdpoly.Relaxation.momentMatrix", "link" : "net\/alasc\/symdpoly\/Relaxation.html#momentMatrix:net.alasc.symdpoly.MomentMatrix[E,M]", "kind" : "val"}, {"label" : "objective", "tail" : ": LinearMoment[E, M]", "member" : "net.alasc.symdpoly.Relaxation.objective", "link" : "net\/alasc\/symdpoly\/Relaxation.html#objective:net.alasc.symdpoly.generic.LinearMoment[E,M]", "kind" : "val"}, {"label" : "direction", "tail" : ": Direction", "member" : "net.alasc.symdpoly.Relaxation.direction", "link" : "net\/alasc\/symdpoly\/Relaxation.html#direction:net.alasc.symdpoly.Direction", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Relaxation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Relaxation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Relaxation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Relaxation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Relaxation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Relaxation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Relaxation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Relaxation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Relaxation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Relaxation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Relaxation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Relaxation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Relaxation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Relaxation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Relaxation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Relaxation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Relaxation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Relaxation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(optimization: Optimization[E, M], gSet: GSet[M])(arg0: Aux[E], arg1: Aux[M]): Relaxation[E, M]", "member" : "net.alasc.symdpoly.Relaxation.apply", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#apply[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](optimization:net.alasc.symdpoly.Optimization[E,M],gSet:net.alasc.symdpoly.GSet[M])(implicitevidence$3:shapeless.Witness.Aux[E],implicitevidence$4:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Relaxation[E,M]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Relaxation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Relaxation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/Relaxation.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.Reynolds", "shortDescription" : "Reynolds operator that averages the orbit of an element under the action of a group.", "object" : "net\/alasc\/symdpoly\/Reynolds$.html", "members_object" : [{"label" : "apply", "tail" : "(p: P, grp: Grp[G])(P: VectorSpace[P, R], G: Action[P, G]): P", "member" : "net.alasc.symdpoly.Reynolds.apply", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#apply[G,P,R](p:P,grp:net.alasc.finite.Grp[G])(implicitP:spire.algebra.VectorSpace[P,R],implicitG:spire.algebra.Action[P,G]):P", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Reynolds$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Reynolds$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.ScalarConstraint", "shortDescription" : "", "members_case class" : [{"label" : "E", "tail" : "(): E", "member" : "net.alasc.symdpoly.ScalarConstraint.E", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#E:E", "kind" : "def"}, {"member" : "net.alasc.symdpoly.ScalarConstraint#<init>", "error" : "unsupported entity"}, {"label" : "rhs", "tail" : ": LinearMoment[E, M]", "member" : "net.alasc.symdpoly.ScalarConstraint.rhs", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#rhs:net.alasc.symdpoly.generic.LinearMoment[E,M]", "kind" : "val"}, {"label" : "op", "tail" : ": ComparisonOp", "member" : "net.alasc.symdpoly.ScalarConstraint.op", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#op:net.alasc.symdpoly.ComparisonOp", "kind" : "val"}, {"label" : "lhs", "tail" : ": LinearMoment[E, M]", "member" : "net.alasc.symdpoly.ScalarConstraint.lhs", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#lhs:net.alasc.symdpoly.generic.LinearMoment[E,M]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/ScalarConstraint.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/ScalarConstraint.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.Solution", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/Solution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/Solution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/Solution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/Solution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/Solution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/Solution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/Solution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Solution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Solution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/Solution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/Solution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/Solution.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/Solution.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/Solution.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/Solution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/Solution.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/Solution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/Solution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/Solution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/Solution.html", "kind" : "trait"}], "net" : [], "net.alasc.symdpoly.free" : [{"name" : "net.alasc.symdpoly.free.MonoidDef", "shortDescription" : "Base class for a generalized free monoid.", "object" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html", "members_class" : [{"label" : "Permutation", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.Permutation", "link" : "net\/alasc\/symdpoly\/freebased\/MonoidDef.html#Permutation", "kind" : "object"}, {"label" : "quotientMonoid", "tail" : "(rules: Rules[MonoidDef.this.type]*): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.free.MonoidDef.quotientMonoid", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#quotientMonoid(rules:net.alasc.symdpoly.quotient.Rules[MonoidDef.this.type]*):net.alasc.symdpoly.quotient.MonoidDef.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "permutation", "tail" : "(f: (Op) ⇒ PhasedOp[MonoidDef.this.type]): Permutation[MonoidDef.this.type, MonoidDef.this.type]", "member" : "net.alasc.symdpoly.free.MonoidDef.permutation", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#permutation(f:MonoidDef.this.Op=>net.alasc.symdpoly.free.PhasedOp[MonoidDef.this.type]):net.alasc.symdpoly.freebased.Permutation[MonoidDef.this.type,MonoidDef.this.type]", "kind" : "def"}, {"label" : "HermitianOpFamily3", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.HermitianOpFamily3", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#HermitianOpFamily3extendsMonoidDef.this.OpFamily", "kind" : "abstract class"}, {"label" : "OpFamily3", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.OpFamily3", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#OpFamily3extendsMonoidDef.this.OpFamily", "kind" : "abstract class"}, {"label" : "HermitianOpFamily2", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.HermitianOpFamily2", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#HermitianOpFamily2extendsMonoidDef.this.OpFamily", "kind" : "abstract class"}, {"label" : "OpFamily2", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.OpFamily2", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#OpFamily2extendsMonoidDef.this.OpFamily", "kind" : "abstract class"}, {"label" : "HermitianOpFamily1", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.HermitianOpFamily1", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#HermitianOpFamily1extendsMonoidDef.this.OpFamily", "kind" : "abstract class"}, {"label" : "OpFamily1", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.OpFamily1", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#OpFamily1extendsMonoidDef.this.OpFamily", "kind" : "abstract class"}, {"label" : "HermitianSingleOp", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.HermitianSingleOp", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#HermitianSingleOpextendsMonoidDef.this.HermitianOpwithMonoidDef.this.OpFamily", "kind" : "abstract class"}, {"label" : "OpFamily", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.OpFamily", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#OpFamilyextendsMonoidDef.this.OpEnum", "kind" : "trait"}, {"label" : "OpEnum", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.OpEnum", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#OpEnum", "kind" : "object"}, {"label" : "OpEnum", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.OpEnum", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#OpEnumextendsAnyRef", "kind" : "sealed trait"}, {"label" : "HermitianOp", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.HermitianOp", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#HermitianOpextendsMonoidDef.this.Op", "kind" : "abstract class"}, {"label" : "Op", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.Op", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#Op", "kind" : "object"}, {"label" : "Op", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.Op", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#OpextendsProductwithPhasedOpLike[MonoidDef.this.Free]withMonoLike[MonoidDef.this.Free]withPolyLike[MonoidDef.this.Free]", "kind" : "abstract class"}, {"label" : "indexFromOp", "tail" : "(o: Op): Int", "member" : "net.alasc.symdpoly.free.MonoidDef.indexFromOp", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#indexFromOp(o:MonoidDef.this.Op):Int", "kind" : "def"}, {"label" : "opFromIndex", "tail" : "(i: Int): Op", "member" : "net.alasc.symdpoly.free.MonoidDef.opFromIndex", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#opFromIndex(i:Int):MonoidDef.this.Op", "kind" : "def"}, {"label" : "indexAdjoint", "tail" : "(opIndex: Int): Int", "member" : "net.alasc.symdpoly.free.MonoidDef.indexAdjoint", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#indexAdjoint(opIndex:Int):Int", "kind" : "def"}, {"label" : "nOperators", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MonoidDef.nOperators", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#nOperators:Int", "kind" : "def"}, {"label" : "opIndexMap", "tail" : ": IndexMap[Op]", "member" : "net.alasc.symdpoly.free.MonoidDef.opIndexMap", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#opIndexMap:net.alasc.symdpoly.util.IndexMap[MonoidDef.this.Op]", "kind" : "lazy val"}, {"label" : "symmetryGroup", "tail" : "(): Grp[Permutation[MonoidDef.this.type, MonoidDef.this.type]]", "member" : "net.alasc.symdpoly.free.MonoidDef.symmetryGroup", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#symmetryGroup:net.alasc.finite.Grp[net.alasc.symdpoly.freebased.Permutation[MonoidDef.this.type,MonoidDef.this.type]]", "kind" : "def"}, {"label" : "phasedOpGenPermAction", "tail" : ": Action[PhasedOp[Free], GenPerm]", "member" : "net.alasc.symdpoly.free.MonoidDef.phasedOpGenPermAction", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#phasedOpGenPermAction:spire.algebra.Action[net.alasc.symdpoly.free.PhasedOp[MonoidDef.this.Free],net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit val"}, {"label" : "phasedOpOrder", "tail" : ": Order[PhasedOp[Free]]", "member" : "net.alasc.symdpoly.free.MonoidDef.phasedOpOrder", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#phasedOpOrder:spire.algebra.Order[net.alasc.symdpoly.free.PhasedOp[MonoidDef.this.Free]]", "kind" : "implicit val"}, {"label" : "immutableMutableWordZero", "tail" : ": MutableWord[Free]", "member" : "net.alasc.symdpoly.free.MonoidDef.immutableMutableWordZero", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#immutableMutableWordZero:net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free]", "kind" : "val"}, {"label" : "immutableMutableWordMinusOne", "tail" : ": MutableWord[Free]", "member" : "net.alasc.symdpoly.free.MonoidDef.immutableMutableWordMinusOne", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#immutableMutableWordMinusOne:net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free]", "kind" : "val"}, {"label" : "immutableMutableWordOne", "tail" : ": MutableWord[Free]", "member" : "net.alasc.symdpoly.free.MonoidDef.immutableMutableWordOne", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#immutableMutableWordOne:net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free]", "kind" : "val"}, {"label" : "mutableWordOrder", "tail" : ": Order[MutableWord[Free]]", "member" : "net.alasc.symdpoly.free.MonoidDef.mutableWordOrder", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#mutableWordOrder:spire.algebra.Order[net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free]]", "kind" : "val"}, {"label" : "inPlaceNormalForm", "tail" : "(word: MutableWord[Free], start: Int): Boolean", "member" : "net.alasc.symdpoly.free.MonoidDef.inPlaceNormalForm", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#inPlaceNormalForm(word:net.alasc.symdpoly.free.MutableWord[MonoidDef.this.Free],start:Int):Boolean", "kind" : "def"}, {"label" : "quotient", "tail" : "(poly: Poly[Free, Free]): Poly[Free, Free]", "member" : "net.alasc.symdpoly.free.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#quotient(poly:net.alasc.symdpoly.freebased.Poly[MonoidDef.this.Free,MonoidDef.this.Free]):net.alasc.symdpoly.freebased.Poly[MonoidDef.this.Free,MonoidDef.this.Free]", "kind" : "def"}, {"label" : "quotient", "tail" : "(word: Mono[Free, Free]): MonoType", "member" : "net.alasc.symdpoly.free.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#quotient(word:net.alasc.symdpoly.freebased.Mono[MonoidDef.this.Free,MonoidDef.this.Free]):MonoidDef.this.MonoType", "kind" : "def"}, {"label" : "Free", "tail" : "(): Free", "member" : "net.alasc.symdpoly.free.MonoidDef.Free", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#Free:MonoidDef.this.Free", "kind" : "def"}, {"label" : "Free", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.Free", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#Free=MonoidDef.this.type", "kind" : "type"}, {"member" : "net.alasc.symdpoly.free.MonoidDef#<init>", "error" : "unsupported entity"}, {"label" : "cyclotomicOrder", "tail" : ": Int", "member" : "net.alasc.symdpoly.free.MonoidDef.cyclotomicOrder", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#cyclotomicOrder:Int", "kind" : "val"}, {"label" : "permutationClassTag", "tail" : ": ClassTag[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationClassTag", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#permutationClassTag:scala.reflect.ClassTag[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationMonoAction", "tail" : ": Action[MonoType, PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationMonoAction", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#permutationMonoAction:spire.algebra.Action[MonoidDef.this.MonoType,MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationFaithfulPermutationActionBuilder", "tail" : ": FaithfulPermutationActionBuilder[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationFaithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#permutationFaithfulPermutationActionBuilder:net.alasc.finite.FaithfulPermutationActionBuilder[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationGroup", "tail" : ": Group[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationGroup", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#permutationGroup:spire.algebra.Group[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "permutationEq", "tail" : ": Eq[PermutationType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.permutationEq", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#permutationEq:spire.algebra.Eq[MonoidDef.this.PermutationType]", "kind" : "val"}, {"label" : "PermutationType", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.PermutationType", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#PermutationType=net.alasc.symdpoly.freebased.Permutation[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "type"}, {"label" : "constant", "tail" : "(c: Cyclo): PolyType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#constant(c:cyclo.Cyclo):MonoidDef.this.PolyType", "kind" : "def"}, {"label" : "constant", "tail" : "(r: Rational): PolyType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#constant(r:spire.math.Rational):MonoidDef.this.PolyType", "kind" : "def"}, {"label" : "constant", "tail" : "(i: Int): PolyType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#constant(i:Int):MonoidDef.this.PolyType", "kind" : "def"}, {"label" : "polyClassTag", "tail" : ": ClassTag[PolyType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyClassTag", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#polyClassTag:scala.reflect.ClassTag[MonoidDef.this.PolyType]", "kind" : "val"}, {"label" : "polyGenPermAction", "tail" : ": Action[Poly[MonoidDef.this.type, Free], GenPerm]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyGenPermAction", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#polyGenPermAction:spire.algebra.Action[net.alasc.symdpoly.freebased.Poly[MonoidDef.this.type,MonoidDef.this.Free],net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "polyEq", "tail" : "(): Eq[PolyType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyEq", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#polyEq:spire.algebra.Eq[MonoidDef.this.PolyType]", "kind" : "def"}, {"label" : "polyInvolution", "tail" : "(): Involution[PolyType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyInvolution", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#polyInvolution:spire.algebra.Involution[MonoidDef.this.PolyType]", "kind" : "def"}, {"label" : "polyAssociativeAlgebra", "tail" : "(): FieldAssociativeAlgebra[PolyType, Cyclo]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.polyAssociativeAlgebra", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#polyAssociativeAlgebra:spire.algebra.FieldAssociativeAlgebra[MonoidDef.this.PolyType,cyclo.Cyclo]", "kind" : "def"}, {"label" : "monomialToPolynomial", "tail" : "(m: Mono[MonoidDef.this.type, Free]): Poly[MonoidDef.this.type, Free]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monomialToPolynomial", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monomialToPolynomial(m:net.alasc.symdpoly.freebased.Mono[MonoidDef.this.type,MonoidDef.this.Free]):net.alasc.symdpoly.freebased.Poly[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "def"}, {"label" : "PolyType", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.PolyType", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#PolyType=net.alasc.symdpoly.freebased.Poly[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "type"}, {"label" : "one", "tail" : ": MonoType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.one", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#one:MonoidDef.this.MonoType", "kind" : "val"}, {"label" : "zero", "tail" : ": MonoType", "member" : "net.alasc.symdpoly.freebased.MonoidDef.zero", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#zero:MonoidDef.this.MonoType", "kind" : "val"}, {"label" : "monoClassTag", "tail" : ": ClassTag[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoClassTag", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoClassTag:scala.reflect.ClassTag[MonoidDef.this.MonoType]", "kind" : "val"}, {"label" : "monoGenPermAction", "tail" : ": Action[MonoType, GenPerm]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoGenPermAction", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoGenPermAction:spire.algebra.Action[MonoidDef.this.MonoType,net.alasc.symdpoly.math.GenPerm]", "kind" : "val"}, {"label" : "monoPhased", "tail" : ": Phased[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoPhased", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoPhased:net.alasc.symdpoly.algebra.Phased[MonoidDef.this.MonoType]", "kind" : "val"}, {"label" : "monoOrder", "tail" : "(): Order[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoOrder", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoOrder:spire.algebra.Order[MonoidDef.this.MonoType]", "kind" : "def"}, {"label" : "monoInvolution", "tail" : "(): Involution[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoInvolution", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoInvolution:spire.algebra.Involution[MonoidDef.this.MonoType]", "kind" : "def"}, {"label" : "monoMultiplicativeBinoid", "tail" : "(): MultiplicativeBinoid[MonoType]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.monoMultiplicativeBinoid", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#monoMultiplicativeBinoid:net.alasc.symdpoly.algebra.MultiplicativeBinoid[MonoidDef.this.MonoType]", "kind" : "def"}, {"label" : "quotient", "tail" : "(gset: GSet[Free]): GSet[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.quotient", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#quotient(gset:net.alasc.symdpoly.GSet[MonoidDef.this.Free]):net.alasc.symdpoly.GSet[MonoidDef.this.type]", "kind" : "def"}, {"label" : "MonoType", "tail" : "", "member" : "net.alasc.symdpoly.freebased.MonoidDef.MonoType", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#MonoType=net.alasc.symdpoly.freebased.Mono[MonoidDef.this.type,MonoidDef.this.Free]", "kind" : "type"}, {"label" : "witnessFree", "tail" : "(): Aux[Free]", "member" : "net.alasc.symdpoly.freebased.MonoidDef.witnessFree", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#witnessFree:shapeless.Witness.Aux[MonoidDef.this.Free]", "kind" : "implicit def"}, {"label" : "symmetricEvaluator", "tail" : "(symmetryGroup0: Grp[PermutationType], equivalence0: Equivalence[MonoidDef.this.type]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.symmetricEvaluator", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#symmetricEvaluator(symmetryGroup0:net.alasc.finite.Grp[MonoidDef.this.PermutationType],equivalence0:net.alasc.symdpoly.evaluation.Equivalence[MonoidDef.this.type]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "symmetricEvaluator", "tail" : "(symmetryGroup: Grp[PermutationType]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.symmetricEvaluator", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#symmetricEvaluator(symmetryGroup:net.alasc.finite.Grp[MonoidDef.this.PermutationType]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "evaluator", "tail" : "(): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.evaluator", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#evaluator():net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "evaluator", "tail" : "(equivalence: Equivalence[MonoidDef.this.type]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.evaluator", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#evaluator(equivalence:net.alasc.symdpoly.evaluation.Equivalence[MonoidDef.this.type]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "impWitness", "tail" : "(): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.impWitness", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#impWitness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "implicit def"}, {"label" : "witness", "tail" : ": Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.witness", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#witness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "operators", "tail" : "(): Seq[OpFamily]", "member" : "net.alasc.symdpoly.free.MonoidDef.operators", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef.html#operators:Seq[MonoidDef.this.OpFamily]", "kind" : "abstract def"}], "members_object" : [{"label" : "Aux", "tail" : "", "member" : "net.alasc.symdpoly.free.MonoidDef.Aux", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#Aux[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton]=net.alasc.symdpoly.free.MonoidDef{typeFree=F}", "kind" : "type"}, {"label" : "booleans", "tail" : ": Seq[Boolean]", "member" : "net.alasc.symdpoly.free.MonoidDef.booleans", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#booleans:Seq[Boolean]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MonoidDef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/free\/MonoidDef.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.free.MutablePoly", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.free.MutablePoly.toString", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#toString():String", "kind" : "def"}, {"label" : "immutableCopy", "tail" : "(arg0: Aux[M]): Poly[M, F]", "member" : "net.alasc.symdpoly.free.MutablePoly.immutableCopy", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#immutableCopy[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton](implicitevidence$1:shapeless.Witness.Aux[M]):net.alasc.symdpoly.freebased.Poly[M,F]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MutablePoly.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#hashCode():Int", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.free.MutablePoly.isZero", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#isZero:Boolean", "kind" : "def"}, {"label" : "setToZero", "tail" : "(): MutablePoly[F]", "member" : "net.alasc.symdpoly.free.MutablePoly.setToZero", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#setToZero():net.alasc.symdpoly.free.MutablePoly[F]", "kind" : "def"}, {"label" : "add", "tail" : "(monomial: MutableWord[F], coeff: Cyclo): MutablePoly[F]", "member" : "net.alasc.symdpoly.free.MutablePoly.add", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#add(monomial:net.alasc.symdpoly.free.MutableWord[F],coeff:cyclo.Cyclo):net.alasc.symdpoly.free.MutablePoly[F]", "kind" : "def"}, {"label" : "update", "tail" : "(monomial: MutableWord[F], coeff: Cyclo): Unit", "member" : "net.alasc.symdpoly.free.MutablePoly.update", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#update(monomial:net.alasc.symdpoly.free.MutableWord[F],coeff:cyclo.Cyclo):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(monomial: MutableWord[F]): Cyclo", "member" : "net.alasc.symdpoly.free.MutablePoly.apply", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#apply(monomial:net.alasc.symdpoly.free.MutableWord[F]):cyclo.Cyclo", "kind" : "def"}, {"label" : "terms", "tail" : "(): HashMap[MutableWord[F], Cyclo]", "member" : "net.alasc.symdpoly.free.MutablePoly.terms", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#terms:metal.generic.HashMap[net.alasc.symdpoly.free.MutableWord[F],cyclo.Cyclo]", "kind" : "def"}, {"label" : "nTerms", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MutablePoly.nTerms", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#nTerms:Int", "kind" : "def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.free.MutablePoly.F", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#F:F", "kind" : "def"}, {"label" : "copy", "tail" : "(): MutablePoly[F]", "member" : "net.alasc.symdpoly.free.MutablePoly.copy", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#copy:net.alasc.symdpoly.free.MutablePoly[F]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.free.MutablePoly#<init>", "error" : "unsupported entity"}, {"label" : "wF", "tail" : ": Aux[F]", "member" : "net.alasc.symdpoly.free.MutablePoly.wF", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : "(reservedSize: Int)(arg0: Aux[F]): MutablePoly[F]", "member" : "net.alasc.symdpoly.free.MutablePoly.empty", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#empty[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](reservedSize:Int)(implicitevidence$2:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutablePoly[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutablePoly$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/free\/MutablePoly.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.free.MutableWord", "shortDescription" : "A mutable word in a free monoid.", "object" : "net\/alasc\/symdpoly\/free\/MutableWord$.html", "members_class" : [{"label" : "inPlaceGenPermAction", "tail" : "(rhs: GenPerm): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.inPlaceGenPermAction", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#inPlaceGenPermAction(rhs:net.alasc.symdpoly.math.GenPerm):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "inPlaceAdjoint", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.inPlaceAdjoint", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#inPlaceAdjoint():net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "swap", "tail" : "(i: Int, j: Int): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.swap", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#swap(i:Int,j:Int):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "*=", "tail" : "(rhs: MutableWord[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.*=", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#*=(rhs:net.alasc.symdpoly.free.MutableWord[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "*=", "tail" : "(rhs: F.Op): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.*=", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#*=(rhs:F#Op):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "*=", "tail" : "(rhs: Phase): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.*=", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#*=(rhs:net.alasc.symdpoly.math.Phase):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "multiplyBySignOf", "tail" : "(rhs: Int): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.multiplyBySignOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#multiplyBySignOf(rhs:Int):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "flipSign", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.flipSign", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#flipSign():net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "setPhase", "tail" : "(newPhase: Phase): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.setPhase", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#setPhase(newPhase:net.alasc.symdpoly.math.Phase):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "setToZero", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.setToZero", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#setToZero():net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "replaceRange", "tail" : "(from: Int, until: Int, replaceBy: MutableWord[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.replaceRange", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#replaceRange(from:Int,until:Int,replaceBy:net.alasc.symdpoly.free.MutableWord[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "insert", "tail" : "(i: Int, toInsert: MutableWord[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.insert", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#insert(i:Int,toInsert:net.alasc.symdpoly.free.MutableWord[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "removeRange", "tail" : "(from: Int, until: Int): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.removeRange", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#removeRange(from:Int,until:Int):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "remove", "tail" : "(i: Int): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.remove", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#remove(i:Int):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "update", "tail" : "(i: Int, index: Int): Unit", "member" : "net.alasc.symdpoly.free.MutableWord.update", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#update(i:Int,index:Int):Unit", "kind" : "def"}, {"label" : "update", "tail" : "(i: Int, op: F.Op): Unit", "member" : "net.alasc.symdpoly.free.MutableWord.update", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#update(i:Int,op:F#Op):Unit", "kind" : "def"}, {"label" : "checkMutable", "tail" : "(): Unit", "member" : "net.alasc.symdpoly.free.MutableWord.checkMutable", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#checkMutable():Unit", "kind" : "def"}, {"label" : "setImmutable", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.setImmutable", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#setImmutable():net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "setToContentOf", "tail" : "(rhs: MutableWord[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.setToContentOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#setToContentOf(rhs:net.alasc.symdpoly.free.MutableWord[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "ensureLength", "tail" : "(newMaxLength: Int): Unit", "member" : "net.alasc.symdpoly.free.MutableWord.ensureLength", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#ensureLength(newMaxLength:Int):Unit", "kind" : "def"}, {"label" : "reservedSize", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MutableWord.reservedSize", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#reservedSize:Int", "kind" : "def"}, {"label" : "mutableCopy", "tail" : "(newReservedLength: Int): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.mutableCopy", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#mutableCopy(newReservedLength:Int):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "mutableCopy", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.mutableCopy", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#mutableCopy():net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "immutableCopy", "tail" : "(): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.immutableCopy", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#immutableCopy:net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "compareTo", "tail" : "(rhs: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.free.MutableWord.compareTo", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#compareTo(rhs:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "def"}, {"label" : "compareToIgnoringPhase", "tail" : "(rhs: MutableWord[F]): Int", "member" : "net.alasc.symdpoly.free.MutableWord.compareToIgnoringPhase", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#compareToIgnoringPhase(rhs:net.alasc.symdpoly.free.MutableWord[F]):Int", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int): F.Op", "member" : "net.alasc.symdpoly.free.MutableWord.apply", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#apply(i:Int):F#Op", "kind" : "def"}, {"label" : "isMinusOne", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.isMinusOne", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#isMinusOne:Boolean", "kind" : "def"}, {"label" : "isOne", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.isOne", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#isOne:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.isEmpty", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.isZero", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#isZero:Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.free.MutableWord.toString", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#toString():String", "kind" : "def"}, {"label" : "wordString", "tail" : "(): String", "member" : "net.alasc.symdpoly.free.MutableWord.wordString", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#wordString:String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MutableWord.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#hashCode():Int", "kind" : "def"}, {"label" : "immutableHash", "tail" : ": Int", "member" : "net.alasc.symdpoly.free.MutableWord.immutableHash", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#immutableHash:Int", "kind" : "lazy val"}, {"label" : "computeHash", "tail" : "(): Int", "member" : "net.alasc.symdpoly.free.MutableWord.computeHash", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#computeHash:Int", "kind" : "def"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.equals", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "check", "tail" : "(): Unit", "member" : "net.alasc.symdpoly.free.MutableWord.check", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#check():Unit", "kind" : "def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.free.MutableWord.F", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#F:F", "kind" : "def"}, {"member" : "net.alasc.symdpoly.free.MutableWord#<init>", "error" : "unsupported entity"}, {"label" : "wF", "tail" : ": Aux[F]", "member" : "net.alasc.symdpoly.free.MutableWord.wF", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#wF:shapeless.Witness.Aux[F]", "kind" : "implicit val"}, {"label" : "mutable", "tail" : ": Boolean", "member" : "net.alasc.symdpoly.free.MutableWord.mutable", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#mutable:Boolean", "kind" : "var"}, {"label" : "indices", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.free.MutableWord.indices", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#indices:Array[Int]", "kind" : "var"}, {"label" : "length", "tail" : ": Int", "member" : "net.alasc.symdpoly.free.MutableWord.length", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#length:Int", "kind" : "var"}, {"label" : "phase", "tail" : ": Phase", "member" : "net.alasc.symdpoly.free.MutableWord.phase", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#phase:net.alasc.symdpoly.math.Phase", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "order", "tail" : "(wM: Aux[F]): Order[MutableWord[F]]", "member" : "net.alasc.symdpoly.free.MutableWord.order", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#order[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](implicitwM:shapeless.Witness.Aux[F]):spire.algebra.Order[net.alasc.symdpoly.free.MutableWord[F]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(phase: Phase)(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.apply", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#apply[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](phase:net.alasc.symdpoly.math.Phase)(implicitevidence$6:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, ops: Seq[MutableWord.apply.F.Op])(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.apply", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#apply[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](phase:net.alasc.symdpoly.math.Phase,ops:Seq[F#Op])(implicitevidence$5:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(ops: Seq[MutableWord.apply.F.Op])(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.apply", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#apply[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](ops:Seq[F#Op])(implicitevidence$4:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "zero", "tail" : "(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.zero", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#zero[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](implicitevidence$3:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "one", "tail" : "(reservedLength: Int)(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.one", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#one[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](reservedLength:Int)(implicitevidence$2:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "one", "tail" : "(arg0: Aux[F]): MutableWord[F]", "member" : "net.alasc.symdpoly.free.MutableWord.one", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#one[F<:net.alasc.symdpoly.free.MonoidDefwithSingleton](implicitevidence$1:shapeless.Witness.Aux[F]):net.alasc.symdpoly.free.MutableWord[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/MutableWord$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/free\/MutableWord.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.free.PhasedOp", "shortDescription" : "An operator variable in a free monoid along with a phase.", "object" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html", "members_object" : [{"label" : "fromOp", "tail" : "(op: PhasedOp.fromOp.M.Op)(arg0: Aux[M]): PhasedOp[M]", "member" : "net.alasc.symdpoly.free.PhasedOp.fromOp", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#fromOp[M<:net.alasc.symdpoly.free.MonoidDef.Aux[M]withSingleton](op:M#Op)(implicitevidence$2:shapeless.Witness.Aux[M]):net.alasc.symdpoly.free.PhasedOp[M]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "*", "tail" : "(newPhase: Phase)(d: DummyImplicit): PhasedOp[M]", "member" : "net.alasc.symdpoly.free.PhasedOp.*", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#*(newPhase:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):net.alasc.symdpoly.free.PhasedOp[M]", "kind" : "def"}, {"label" : "toMono", "tail" : "(): Mono[M, M]", "member" : "net.alasc.symdpoly.free.PhasedOp.toMono", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#toMono:net.alasc.symdpoly.freebased.Mono[M,M]", "kind" : "def"}, {"label" : "toPoly", "tail" : "(): Poly[M, M]", "member" : "net.alasc.symdpoly.free.PhasedOp.toPoly", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#toPoly:net.alasc.symdpoly.freebased.Poly[M,M]", "kind" : "def"}, {"label" : "toPhasedOp", "tail" : "(): PhasedOp[M]", "member" : "net.alasc.symdpoly.free.PhasedOp.toPhasedOp", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#toPhasedOp:net.alasc.symdpoly.free.PhasedOp[M]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.free.PhasedOp.toString", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#toString():String", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.free.PhasedOp.M", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#M:M", "kind" : "def"}, {"member" : "net.alasc.symdpoly.free.PhasedOp#<init>", "error" : "unsupported entity"}, {"label" : "op", "tail" : ": M.Op", "member" : "net.alasc.symdpoly.free.PhasedOp.op", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#op:M#Op", "kind" : "val"}, {"label" : "phase", "tail" : ": Phase", "member" : "net.alasc.symdpoly.free.PhasedOp.phase", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#phase:net.alasc.symdpoly.math.Phase", "kind" : "val"}, {"label" : "*", "tail" : "(rhs: MonoLike[M]): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.*", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#*(rhs:net.alasc.symdpoly.generic.MonoLike[M]):M#MonoType", "kind" : "def"}, {"label" : "pow", "tail" : "(rhs: Int): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.pow", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#pow(rhs:Int):M#MonoType", "kind" : "def"}, {"label" : "**", "tail" : "(rhs: Int): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.**", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#**(rhs:Int):M#MonoType", "kind" : "def"}, {"label" : "constant", "tail" : "(c: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.constant", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#constant(c:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#\/(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#\/(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#\/(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#*(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#*(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#*(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#-(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#-(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#-(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#-(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#+(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#+(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#+(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#+(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#-(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#+(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: M.PolyType): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#*(rhs:M#PolyType):M#PolyType", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.generic.PolyLike.isZero", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#isZero:Boolean", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): PhasedOp[M]", "member" : "net.alasc.symdpoly.free.PhasedOpLike.unary_-", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#unary_-:net.alasc.symdpoly.free.PhasedOp[M]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/PhasedOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/free\/PhasedOp.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.free.PhasedOpLike", "members_trait" : [{"label" : "unary_-", "tail" : "(): PhasedOp[M]", "member" : "net.alasc.symdpoly.free.PhasedOpLike.unary_-", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#unary_-:net.alasc.symdpoly.free.PhasedOp[M]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Phase)(d: DummyImplicit): PhasedOp[M]", "member" : "net.alasc.symdpoly.free.PhasedOpLike.*", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#*(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):net.alasc.symdpoly.free.PhasedOp[M]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toPhasedOp", "tail" : "(): PhasedOp[M]", "member" : "net.alasc.symdpoly.free.PhasedOpLike.toPhasedOp", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html#toPhasedOp:net.alasc.symdpoly.free.PhasedOp[M]", "kind" : "abstract def"}], "shortDescription" : "A trait for objects that can be converted to a PhasedOp instance.", "object" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html", "members_object" : [{"label" : "toPhasedOp", "tail" : "(x: PhasedOpLike[M]): PhasedOp[M]", "member" : "net.alasc.symdpoly.free.PhasedOpLike.toPhasedOp", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#toPhasedOp[M<:net.alasc.symdpoly.free.MonoidDef.Aux[M]withSingleton](x:net.alasc.symdpoly.free.PhasedOpLike[M]):net.alasc.symdpoly.free.PhasedOp[M]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/PhasedOpLike$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/free\/PhasedOpLike.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.free.Slice", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/Slice.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(i: Int): Boolean", "member" : "net.alasc.symdpoly.free.Slice.contains", "link" : "net\/alasc\/symdpoly\/free\/Slice.html#contains(i:Int):Boolean", "kind" : "abstract def"}], "shortDescription" : "Describes a slice of an index of an object with indices, such as a family of operator variables.", "object" : "net\/alasc\/symdpoly\/free\/Slice$.html", "members_object" : [{"label" : "Explicit", "tail" : "", "member" : "net.alasc.symdpoly.free.Slice.Explicit", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#ExplicitextendsSlicewithProductwithSerializable", "kind" : "case class"}, {"label" : "Single", "tail" : "", "member" : "net.alasc.symdpoly.free.Slice.Single", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#SingleextendsSlicewithProductwithSerializable", "kind" : "case class"}, {"label" : "All", "tail" : "", "member" : "net.alasc.symdpoly.free.Slice.All", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#All", "kind" : "object"}, {"label" : "iterable", "tail" : "(iterable: Iterable[Int]): Slice", "member" : "net.alasc.symdpoly.free.Slice.iterable", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#iterable(iterable:Iterable[Int]):net.alasc.symdpoly.free.Slice", "kind" : "implicit def"}, {"label" : "single", "tail" : "(i: Int): Slice", "member" : "net.alasc.symdpoly.free.Slice.single", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#single(i:Int):net.alasc.symdpoly.free.Slice", "kind" : "implicit def"}, {"label" : "all", "tail" : "(arg: ::.type): Slice", "member" : "net.alasc.symdpoly.free.Slice.all", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#all(arg:::.type):net.alasc.symdpoly.free.Slice", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/free\/Slice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/free\/Slice.html", "kind" : "trait"}], "net.alasc.symdpoly.pretty" : [{"name" : "net.alasc.symdpoly.pretty.Format", "members_trait" : [{"label" : "apply", "tail" : "(key: Key): V", "member" : "net.alasc.symdpoly.pretty.Format.apply", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#apply(key:net.alasc.symdpoly.pretty.Key):key.V", "kind" : "def"}, {"label" : "settings", "tail" : "(): HMap[Relation]", "member" : "net.alasc.symdpoly.pretty.Format.settings", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#settings:shapeless.HMap[net.alasc.symdpoly.pretty.Key.Relation]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Format.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "net.alasc.symdpoly.pretty.Format.Output", "error" : "unsupported entity"}], "shortDescription" : "An output format for pretty printing.", "object" : "net\/alasc\/symdpoly\/pretty\/Format$.html", "members_object" : [{"label" : "Aux", "tail" : "", "member" : "net.alasc.symdpoly.pretty.Format.Aux", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#Aux[O]=net.alasc.symdpoly.pretty.Format{typeOutput=O}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Format$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/pretty\/Format.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.pretty.Key", "members_trait" : [{"label" : ":=", "tail" : "(value: V): Aux[Key.this.type]", "member" : "net.alasc.symdpoly.pretty.Key.:=", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#:=(value:Key.this.V):net.alasc.symdpoly.pretty.Setting.Aux[Key.this.type]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "defaultValue", "tail" : "(): V", "member" : "net.alasc.symdpoly.pretty.Key.defaultValue", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#defaultValue:Key.this.V", "kind" : "abstract def"}, {"label" : "name", "tail" : "(): String", "member" : "net.alasc.symdpoly.pretty.Key.name", "link" : "net\/alasc\/symdpoly\/pretty\/Key.html#name:String", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.pretty.Key.V", "error" : "unsupported entity"}], "shortDescription" : "Key for a pretty printing setting", "object" : "net\/alasc\/symdpoly\/pretty\/Key$.html", "members_object" : [{"label" : "Relation", "tail" : "", "member" : "net.alasc.symdpoly.pretty.Key.Relation", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#Relation", "kind" : "object"}, {"label" : "Relation", "tail" : "", "member" : "net.alasc.symdpoly.pretty.Key.Relation", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#Relation[K,V]extendsAnyRef", "kind" : "class"}, {"label" : "apply", "tail" : "(defaultValue0: V0)(name0: Name): Aux[V0]", "member" : "net.alasc.symdpoly.pretty.Key.apply", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#apply[V0](defaultValue0:V0)(implicitname0:sourcecode.Name):net.alasc.symdpoly.pretty.Key.Aux[V0]", "kind" : "def"}, {"label" : "Aux", "tail" : "", "member" : "net.alasc.symdpoly.pretty.Key.Aux", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#Aux[V0]=net.alasc.symdpoly.pretty.Key{typeV=V0}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Key$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/pretty\/Key.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.pretty.MatlabSource", "shortDescription" : "Matlab source code format.", "object" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html", "members_object" : [{"label" : "mat", "tail" : "(ev: Pretty[A, MatlabSource.type]): Pretty[Mat[A], MatlabSource.type]", "member" : "net.alasc.symdpoly.pretty.MatlabSource.mat", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#mat[A](implicitev:net.alasc.symdpoly.pretty.Pretty[A,net.alasc.symdpoly.pretty.MatlabSource.type]):net.alasc.symdpoly.pretty.Pretty[scalin.immutable.Mat[A],net.alasc.symdpoly.pretty.MatlabSource.type]", "kind" : "implicit def"}, {"label" : "int", "tail" : ": Pretty[Int, MatlabSource.type]", "member" : "net.alasc.symdpoly.pretty.MatlabSource.int", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#int:net.alasc.symdpoly.pretty.Pretty[Int,net.alasc.symdpoly.pretty.MatlabSource.type]", "kind" : "implicit val"}, {"label" : "Output", "tail" : "", "member" : "net.alasc.symdpoly.pretty.MatlabSource.Output", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#Output=String", "kind" : "type"}, {"label" : "apply", "tail" : "(key: Key): V", "member" : "net.alasc.symdpoly.pretty.Format.apply", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#apply(key:net.alasc.symdpoly.pretty.Key):key.V", "kind" : "def"}, {"label" : "settings", "tail" : "(): HMap[Relation]", "member" : "net.alasc.symdpoly.pretty.Format.settings", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#settings:shapeless.HMap[net.alasc.symdpoly.pretty.Key.Relation]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/MatlabSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.pretty.Pretty", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A)(settings: HMap[Relation]): F.Output", "member" : "net.alasc.symdpoly.pretty.Pretty.apply", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty.html#apply(a:A)(implicitsettings:shapeless.HMap[net.alasc.symdpoly.pretty.Key.Relation]):F#Output", "kind" : "abstract def"}], "shortDescription" : "Describes the ability to pretty print instances of A in the format F.", "object" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html", "members_object" : [{"label" : "noSettings", "tail" : "(f: (A) ⇒ Pretty.noSettings.F.Output): Pretty[A, F]", "member" : "net.alasc.symdpoly.pretty.Pretty.noSettings", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#noSettings[A,F<:net.alasc.symdpoly.pretty.FormatwithSingleton](f:A=>F#Output):net.alasc.symdpoly.pretty.Pretty[A,F]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Pretty[A, F]): Pretty[A, F]", "member" : "net.alasc.symdpoly.pretty.Pretty.apply", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#apply[A,F<:net.alasc.symdpoly.pretty.FormatwithSingleton](implicitev:net.alasc.symdpoly.pretty.Pretty[A,F]):net.alasc.symdpoly.pretty.Pretty[A,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Pretty$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/pretty\/Pretty.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.pretty.PrettySyntax", "members_trait" : [{"label" : "settingsOps", "tail" : "(settings: Settings): SettingsOps", "member" : "net.alasc.symdpoly.pretty.PrettySyntax.settingsOps", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#settingsOps(settings:net.alasc.symdpoly.pretty.Settings):net.alasc.symdpoly.pretty.PrettySyntax.SettingsOps", "kind" : "implicit def"}, {"label" : "prettyOps", "tail" : "(a: A): PrettyOps[A]", "member" : "net.alasc.symdpoly.pretty.PrettySyntax.prettyOps", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#prettyOps[A](a:A):net.alasc.symdpoly.pretty.PrettySyntax.PrettyOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Syntax for pretty printing objects", "object" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html", "members_object" : [{"label" : "PrettyOps", "tail" : "", "member" : "net.alasc.symdpoly.pretty.PrettySyntax.PrettyOps", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#PrettyOps[A]extendsAnyRef", "kind" : "class"}, {"label" : "SettingsOps", "tail" : "", "member" : "net.alasc.symdpoly.pretty.PrettySyntax.SettingsOps", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#SettingsOpsextendsAnyVal", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/pretty\/PrettySyntax.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.pretty.Setting", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(): K.V", "member" : "net.alasc.symdpoly.pretty.Setting.value", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#value:Setting.this.K#V", "kind" : "abstract def"}, {"label" : "key", "tail" : "(): K", "member" : "net.alasc.symdpoly.pretty.Setting.key", "link" : "net\/alasc\/symdpoly\/pretty\/Setting.html#key:Setting.this.K", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.pretty.Setting.K", "error" : "unsupported entity"}], "shortDescription" : "Pretty printing setting associating a key with a value", "object" : "net\/alasc\/symdpoly\/pretty\/Setting$.html", "members_object" : [{"label" : "apply", "tail" : "(key0: K0, value0: Setting.apply.K0.V): Aux[K0]", "member" : "net.alasc.symdpoly.pretty.Setting.apply", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#apply[K0<:net.alasc.symdpoly.pretty.KeywithSingleton](key0:K0,value0:K0#V):net.alasc.symdpoly.pretty.Setting.Aux[K0]", "kind" : "def"}, {"label" : "Aux", "tail" : "", "member" : "net.alasc.symdpoly.pretty.Setting.Aux", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#Aux[K0<:net.alasc.symdpoly.pretty.KeywithSingleton]=net.alasc.symdpoly.pretty.Setting{typeK=K0}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Setting$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/pretty\/Setting.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.pretty.syntax", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html", "members_object" : [{"label" : "settingsOps", "tail" : "(settings: Settings): SettingsOps", "member" : "net.alasc.symdpoly.pretty.PrettySyntax.settingsOps", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#settingsOps(settings:net.alasc.symdpoly.pretty.Settings):net.alasc.symdpoly.pretty.PrettySyntax.SettingsOps", "kind" : "implicit def"}, {"label" : "prettyOps", "tail" : "(a: A): PrettyOps[A]", "member" : "net.alasc.symdpoly.pretty.PrettySyntax.prettyOps", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#prettyOps[A](a:A):net.alasc.symdpoly.pretty.PrettySyntax.PrettyOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/package$$syntax$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.pretty.Text", "shortDescription" : "Text format, for example to output on the console, or to write into text files.", "object" : "net\/alasc\/symdpoly\/pretty\/Text$.html", "members_object" : [{"label" : "mat", "tail" : "(ev: Pretty[A, Text.type]): Pretty[Mat[A], Text.type]", "member" : "net.alasc.symdpoly.pretty.Text.mat", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#mat[A](implicitev:net.alasc.symdpoly.pretty.Pretty[A,net.alasc.symdpoly.pretty.Text.type]):net.alasc.symdpoly.pretty.Pretty[scalin.immutable.Mat[A],net.alasc.symdpoly.pretty.Text.type]", "kind" : "implicit def"}, {"label" : "int", "tail" : ": Pretty[Int, Text.type]", "member" : "net.alasc.symdpoly.pretty.Text.int", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#int:net.alasc.symdpoly.pretty.Pretty[Int,net.alasc.symdpoly.pretty.Text.type]", "kind" : "implicit val"}, {"label" : "cyclo", "tail" : ": Pretty[Cyclo, Text.type]", "member" : "net.alasc.symdpoly.pretty.Text.cyclo", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#cyclo:net.alasc.symdpoly.pretty.Pretty[cyclo.Cyclo,net.alasc.symdpoly.pretty.Text.type]", "kind" : "implicit val"}, {"label" : "Output", "tail" : "", "member" : "net.alasc.symdpoly.pretty.Text.Output", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#Output=String", "kind" : "type"}, {"label" : "apply", "tail" : "(key: Key): V", "member" : "net.alasc.symdpoly.pretty.Format.apply", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#apply(key:net.alasc.symdpoly.pretty.Key):key.V", "kind" : "def"}, {"label" : "settings", "tail" : "(): HMap[Relation]", "member" : "net.alasc.symdpoly.pretty.Format.settings", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#settings:shapeless.HMap[net.alasc.symdpoly.pretty.Key.Relation]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/pretty\/Text$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "scala" : [], "net.alasc.symdpoly.evaluation" : [{"name" : "net.alasc.symdpoly.evaluation.AdjointEquivalence", "shortDescription" : "Equivalence under the adjoint operation.", "members_case class" : [{"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.AdjointEquivalence.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#isSelfAdjoint:Boolean", "kind" : "def"}, {"label" : "compatibleSubgroup", "tail" : "(grp: Grp[M.PermutationType]): Grp[M.PermutationType]", "member" : "net.alasc.symdpoly.evaluation.AdjointEquivalence.compatibleSubgroup", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#compatibleSubgroup(grp:net.alasc.finite.Grp[M#PermutationType]):net.alasc.finite.Grp[M#PermutationType]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: M.MonoType): Set[M.MonoType]", "member" : "net.alasc.symdpoly.evaluation.AdjointEquivalence.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#apply(mono:M#MonoType):Set[M#MonoType]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.AdjointEquivalence#<init>", "error" : "unsupported entity"}, {"label" : "witnessM", "tail" : ": Aux[M]", "member" : "net.alasc.symdpoly.evaluation.AdjointEquivalence.witnessM", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#witnessM:shapeless.Witness.Aux[M]", "kind" : "implicit val"}, {"label" : "isCompatibleGroup", "tail" : "(grp: Grp[M.PermutationType]): Boolean", "member" : "net.alasc.symdpoly.evaluation.Equivalence.isCompatibleGroup", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#isCompatibleGroup(grp:net.alasc.finite.Grp[M#PermutationType]):Boolean", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Component.M", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#M:M", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/evaluation\/AdjointEquivalence.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.evaluation.Component", "members_trait" : [{"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Component.M", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#M:M", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.Component.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#isSelfAdjoint:Boolean", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(mono: M.MonoType): Set[M.MonoType]", "member" : "net.alasc.symdpoly.evaluation.Component.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#apply(mono:M#MonoType):Set[M#MonoType]", "kind" : "abstract def"}, {"label" : "witnessM", "tail" : "(): Aux[M]", "member" : "net.alasc.symdpoly.evaluation.Component.witnessM", "link" : "net\/alasc\/symdpoly\/evaluation\/Component.html#witnessM:shapeless.Witness.Aux[M]", "kind" : "implicit abstract def"}], "shortDescription" : "A component of an equivalence relation on monomials.", "object" : "net\/alasc\/symdpoly\/evaluation\/Component$.html", "members_object" : [{"label" : "transpose", "tail" : "(predicate: OpPredicate[F])(arg0: Aux[M]): FreeBasedComponent[M, F]", "member" : "net.alasc.symdpoly.evaluation.Component.transpose", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#transpose[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](predicate:net.alasc.symdpoly.evaluation.OpPredicate[F])(implicitevidence$2:shapeless.Witness.Aux[M]):net.alasc.symdpoly.evaluation.FreeBasedComponent[M,F]", "kind" : "def"}, {"label" : "cyclic", "tail" : "(predicate: OpPredicate[F])(arg0: Aux[M]): FreeBasedComponent[M, F]", "member" : "net.alasc.symdpoly.evaluation.Component.cyclic", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#cyclic[M<:net.alasc.symdpoly.freebased.MonoidDef.Aux[F]withSingleton,F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](predicate:net.alasc.symdpoly.evaluation.OpPredicate[F])(implicitevidence$1:shapeless.Witness.Aux[M]):net.alasc.symdpoly.evaluation.FreeBasedComponent[M,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Component$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/evaluation\/Component.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.evaluation.ComponentEquivalence", "shortDescription" : "An equivalence relation composed of components.", "members_class" : [{"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.ComponentEquivalence.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#isSelfAdjoint:Boolean", "kind" : "def"}, {"label" : "compatibleSubgroup", "tail" : "(grp: Grp[M.PermutationType]): Grp[M.PermutationType]", "member" : "net.alasc.symdpoly.evaluation.ComponentEquivalence.compatibleSubgroup", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#compatibleSubgroup(grp:net.alasc.finite.Grp[M#PermutationType]):net.alasc.finite.Grp[M#PermutationType]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: M.MonoType): Set[M.MonoType]", "member" : "net.alasc.symdpoly.evaluation.ComponentEquivalence.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#apply(mono:M#MonoType):Set[M#MonoType]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.ComponentEquivalence#<init>", "error" : "unsupported entity"}, {"label" : "witnessM", "tail" : ": Aux[M]", "member" : "net.alasc.symdpoly.evaluation.ComponentEquivalence.witnessM", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#witnessM:shapeless.Witness.Aux[M]", "kind" : "implicit val"}, {"label" : "witnessF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.witnessF", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#witnessF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.F", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#F:F", "kind" : "def"}, {"label" : "isCompatibleGroup", "tail" : "(grp: Grp[M.PermutationType]): Boolean", "member" : "net.alasc.symdpoly.evaluation.Equivalence.isCompatibleGroup", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#isCompatibleGroup(grp:net.alasc.finite.Grp[M#PermutationType]):Boolean", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Component.M", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#M:M", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/ComponentEquivalence.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.Equivalence", "members_trait" : [{"label" : "isCompatibleGroup", "tail" : "(grp: Grp[M.PermutationType]): Boolean", "member" : "net.alasc.symdpoly.evaluation.Equivalence.isCompatibleGroup", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#isCompatibleGroup(grp:net.alasc.finite.Grp[M#PermutationType]):Boolean", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Component.M", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#M:M", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compatibleSubgroup", "tail" : "(grp: Grp[M.PermutationType]): Grp[M.PermutationType]", "member" : "net.alasc.symdpoly.evaluation.Equivalence.compatibleSubgroup", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#compatibleSubgroup(grp:net.alasc.finite.Grp[M#PermutationType]):net.alasc.finite.Grp[M#PermutationType]", "kind" : "abstract def"}, {"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.Component.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#isSelfAdjoint:Boolean", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(mono: M.MonoType): Set[M.MonoType]", "member" : "net.alasc.symdpoly.evaluation.Component.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#apply(mono:M#MonoType):Set[M#MonoType]", "kind" : "abstract def"}, {"label" : "witnessM", "tail" : "(): Aux[M]", "member" : "net.alasc.symdpoly.evaluation.Component.witnessM", "link" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html#witnessM:shapeless.Witness.Aux[M]", "kind" : "implicit abstract def"}], "shortDescription" : "An equivalence relation on monomials.", "trait" : "net\/alasc\/symdpoly\/evaluation\/Equivalence.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.evaluation.Evaluator", "shortDescription" : "Describes a quotient vector space defined on a polynomial ring.", "object" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html", "members_class" : [{"label" : "evaluatedMonoPermutationAction", "tail" : ": Action[SingleMomentType, Mono.PermutationType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedMonoPermutationAction", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#evaluatedMonoPermutationAction:spire.algebra.Action[Evaluator.this.SingleMomentType,Evaluator.this.Mono#PermutationType]", "kind" : "lazy val"}, {"label" : "evaluatedPolyClassTag", "tail" : ": ClassTag[LinearMomentType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedPolyClassTag", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#evaluatedPolyClassTag:spire.ClassTag[Evaluator.this.LinearMomentType]", "kind" : "lazy val"}, {"label" : "evaluatedPolyVectorSpace", "tail" : ": VectorSpace[LinearMomentType, Cyclo]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedPolyVectorSpace", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#evaluatedPolyVectorSpace:spire.algebra.VectorSpace[Evaluator.this.LinearMomentType,cyclo.Cyclo]", "kind" : "lazy val"}, {"label" : "evaluatedPolyEq", "tail" : ": Eq[LinearMomentType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedPolyEq", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#evaluatedPolyEq:spire.algebra.Eq[Evaluator.this.LinearMomentType]", "kind" : "lazy val"}, {"label" : "evaluatedPolyInvolution", "tail" : ": Involution[LinearMomentType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedPolyInvolution", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#evaluatedPolyInvolution:spire.algebra.Involution[Evaluator.this.LinearMomentType]", "kind" : "lazy val"}, {"label" : "evaluatedMonoClassTag", "tail" : ": ClassTag[SingleMomentType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedMonoClassTag", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#evaluatedMonoClassTag:spire.ClassTag[Evaluator.this.SingleMomentType]", "kind" : "lazy val"}, {"label" : "evaluatedMonoPhased", "tail" : ": Phased[SingleMomentType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedMonoPhased", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#evaluatedMonoPhased:net.alasc.symdpoly.algebra.Phased[Evaluator.this.SingleMomentType]", "kind" : "lazy val"}, {"label" : "evaluatedMonoInvolution", "tail" : ": Involution[SingleMomentType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedMonoInvolution", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#evaluatedMonoInvolution:spire.algebra.Involution[Evaluator.this.SingleMomentType]", "kind" : "lazy val"}, {"label" : "evaluatedMonoOrder", "tail" : ": Order[SingleMomentType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedMonoOrder", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#evaluatedMonoOrder:spire.algebra.Order[Evaluator.this.SingleMomentType]", "kind" : "lazy val"}, {"label" : "evaluatedMonoZero", "tail" : ": SingleMomentType", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedMonoZero", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#evaluatedMonoZero:Evaluator.this.SingleMomentType", "kind" : "lazy val"}, {"label" : "constant", "tail" : "(c: Cyclo): LinearMomentType", "member" : "net.alasc.symdpoly.evaluation.Evaluator.constant", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#constant(c:cyclo.Cyclo):Evaluator.this.LinearMomentType", "kind" : "def"}, {"label" : "constant", "tail" : "(r: Rational): LinearMomentType", "member" : "net.alasc.symdpoly.evaluation.Evaluator.constant", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#constant(r:spire.math.Rational):Evaluator.this.LinearMomentType", "kind" : "def"}, {"label" : "constant", "tail" : "(i: Int): LinearMomentType", "member" : "net.alasc.symdpoly.evaluation.Evaluator.constant", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#constant(i:Int):Evaluator.this.LinearMomentType", "kind" : "def"}, {"label" : "apply", "tail" : "(poly: Mono.PolyType)(d: DummyImplicit): LinearMoment[Evaluator.this.type, Mono]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#apply(poly:Evaluator.this.Mono#PolyType)(implicitd:DummyImplicit):net.alasc.symdpoly.generic.LinearMoment[Evaluator.this.type,Evaluator.this.Mono]", "kind" : "def"}, {"label" : "LinearMomentType", "tail" : "", "member" : "net.alasc.symdpoly.evaluation.Evaluator.LinearMomentType", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#LinearMomentType=net.alasc.symdpoly.generic.LinearMoment[Evaluator.this.type,Evaluator.this.Mono]", "kind" : "type"}, {"label" : "apply", "tail" : "(mono: Mono.MonoType): SingleMoment[Evaluator.this.type, Mono]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#apply(mono:Evaluator.this.Mono#MonoType):net.alasc.symdpoly.generic.SingleMoment[Evaluator.this.type,Evaluator.this.Mono]", "kind" : "def"}, {"label" : "fromNormalForm", "tail" : "(normalForm: Mono.MonoType): SingleMoment[Evaluator.this.type, Mono]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.fromNormalForm", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#fromNormalForm(normalForm:Evaluator.this.Mono#MonoType):net.alasc.symdpoly.generic.SingleMoment[Evaluator.this.type,Evaluator.this.Mono]", "kind" : "def"}, {"label" : "one", "tail" : ": SingleMomentType", "member" : "net.alasc.symdpoly.evaluation.Evaluator.one", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#one:Evaluator.this.SingleMomentType", "kind" : "lazy val"}, {"label" : "zero", "tail" : ": SingleMomentType", "member" : "net.alasc.symdpoly.evaluation.Evaluator.zero", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#zero:Evaluator.this.SingleMomentType", "kind" : "lazy val"}, {"label" : "SingleMomentType", "tail" : "", "member" : "net.alasc.symdpoly.evaluation.Evaluator.SingleMomentType", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#SingleMomentType=net.alasc.symdpoly.generic.SingleMoment[Evaluator.this.type,Evaluator.this.Mono]", "kind" : "type"}, {"label" : "compatibleSubgroup", "tail" : "(grp: Grp[Mono.PermutationType]): Grp[Mono.PermutationType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.compatibleSubgroup", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#compatibleSubgroup(grp:net.alasc.finite.Grp[Evaluator.this.Mono#PermutationType]):net.alasc.finite.Grp[Evaluator.this.Mono#PermutationType]", "kind" : "def"}, {"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.Evaluator.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#isSelfAdjoint:Boolean", "kind" : "def"}, {"label" : "M", "tail" : "(): Mono", "member" : "net.alasc.symdpoly.evaluation.Evaluator.M", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#M:Evaluator.this.Mono", "kind" : "def"}, {"label" : "witness", "tail" : ": Aux[Evaluator.this.type]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.witness", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#witness:shapeless.Witness.Aux[Evaluator.this.type]", "kind" : "implicit val"}, {"label" : "symmetryGroupDecomposition", "tail" : ": GrpDecomposition[Mono.PermutationType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.symmetryGroupDecomposition", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#symmetryGroupDecomposition:net.alasc.symdpoly.math.GrpDecomposition[Evaluator.this.Mono#PermutationType]", "kind" : "lazy val"}, {"member" : "net.alasc.symdpoly.evaluation.Evaluator#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "witnessMono", "tail" : "(): Aux[Mono]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.witnessMono", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#witnessMono:shapeless.Witness.Aux[Evaluator.this.Mono]", "kind" : "implicit abstract def"}, {"member" : "net.alasc.symdpoly.evaluation.Evaluator.Mono", "error" : "unsupported entity"}, {"label" : "symmetryGroup", "tail" : "(): Grp[Mono.PermutationType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.symmetryGroup", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#symmetryGroup:net.alasc.finite.Grp[Evaluator.this.Mono#PermutationType]", "kind" : "abstract def"}, {"label" : "equivalence", "tail" : "(): Equivalence[Mono]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.equivalence", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html#equivalence:net.alasc.symdpoly.evaluation.Equivalence[Evaluator.this.Mono]", "kind" : "abstract def"}], "members_object" : [{"label" : "evaluatedPolyClassTag", "tail" : "(arg0: shapeless.Witness.Aux[E]): ClassTag[Evaluator.evaluatedPolyClassTag.E.LinearMomentType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedPolyClassTag", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#evaluatedPolyClassTag[E<:net.alasc.symdpoly.evaluation.EvaluatorwithSingleton](implicitevidence$4:shapeless.Witness.Aux[E]):spire.ClassTag[E#LinearMomentType]", "kind" : "implicit def"}, {"label" : "evaluatedPolyEq", "tail" : "(arg0: shapeless.Witness.Aux[E]): Eq[Evaluator.evaluatedPolyEq.E.LinearMomentType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedPolyEq", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#evaluatedPolyEq[E<:net.alasc.symdpoly.evaluation.EvaluatorwithSingleton](implicitevidence$3:shapeless.Witness.Aux[E]):spire.algebra.Eq[E#LinearMomentType]", "kind" : "implicit def"}, {"label" : "evaluatedPolyInvolution", "tail" : "(arg0: shapeless.Witness.Aux[E]): Involution[Evaluator.evaluatedPolyInvolution.E.LinearMomentType]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedPolyInvolution", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#evaluatedPolyInvolution[E<:net.alasc.symdpoly.evaluation.EvaluatorwithSingleton](implicitevidence$2:shapeless.Witness.Aux[E]):spire.algebra.Involution[E#LinearMomentType]", "kind" : "implicit def"}, {"label" : "evaluatedPolyVectorSpace", "tail" : "(arg0: shapeless.Witness.Aux[E]): VectorSpace[Evaluator.evaluatedPolyVectorSpace.E.LinearMomentType, Cyclo]", "member" : "net.alasc.symdpoly.evaluation.Evaluator.evaluatedPolyVectorSpace", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#evaluatedPolyVectorSpace[E<:net.alasc.symdpoly.evaluation.EvaluatorwithSingleton](implicitevidence$1:shapeless.Witness.Aux[E]):spire.algebra.VectorSpace[E#LinearMomentType,cyclo.Cyclo]", "kind" : "implicit def"}, {"label" : "Aux", "tail" : "", "member" : "net.alasc.symdpoly.evaluation.Evaluator.Aux", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#Aux[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton]=net.alasc.symdpoly.evaluation.Evaluator{typeMono=M}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/Evaluator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/Evaluator.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.FreeBasedComponent", "members_trait" : [{"label" : "witnessF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.witnessF", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#witnessF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.F", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#F:F", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Component.M", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#M:M", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.Component.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#isSelfAdjoint:Boolean", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(mono: M.MonoType): Set[M.MonoType]", "member" : "net.alasc.symdpoly.evaluation.Component.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#apply(mono:M#MonoType):Set[M#MonoType]", "kind" : "abstract def"}, {"label" : "witnessM", "tail" : "(): Aux[M]", "member" : "net.alasc.symdpoly.evaluation.Component.witnessM", "link" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html#witnessM:shapeless.Witness.Aux[M]", "kind" : "implicit abstract def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/evaluation\/FreeBasedComponent.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.evaluation.OpPredicate", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(op: F.Op): Boolean", "member" : "net.alasc.symdpoly.evaluation.OpPredicate.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html#apply(op:F#Op):Boolean", "kind" : "abstract def"}], "shortDescription" : "Boolean function on operator variables.", "trait" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.evaluation.OpPredicate2", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(op1: F.Op, op2: F.Op): Boolean", "member" : "net.alasc.symdpoly.evaluation.OpPredicate2.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html#apply(op1:F#Op,op2:F#Op):Boolean", "kind" : "abstract def"}], "shortDescription" : "Boolean function on pairs of operator variables.", "trait" : "net\/alasc\/symdpoly\/evaluation\/OpPredicate2.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.evaluation.TransposesEquivalence", "shortDescription" : "Equivalence under transposition of the groups of operators.", "members_class" : [{"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.TransposesEquivalence.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#isSelfAdjoint:Boolean", "kind" : "def"}, {"label" : "compatibleSubgroup", "tail" : "(grp: Grp[M.PermutationType]): Grp[M.PermutationType]", "member" : "net.alasc.symdpoly.evaluation.TransposesEquivalence.compatibleSubgroup", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#compatibleSubgroup(grp:net.alasc.finite.Grp[M#PermutationType]):net.alasc.finite.Grp[M#PermutationType]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: M.MonoType): Set[M.MonoType]", "member" : "net.alasc.symdpoly.evaluation.TransposesEquivalence.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#apply(mono:M#MonoType):Set[M#MonoType]", "kind" : "def"}, {"label" : "partition", "tail" : ": Partition", "member" : "net.alasc.symdpoly.evaluation.TransposesEquivalence.partition", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#partition:net.alasc.partitions.Partition", "kind" : "val"}, {"label" : "untransposed", "tail" : ": Set[Int]", "member" : "net.alasc.symdpoly.evaluation.TransposesEquivalence.untransposed", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#untransposed:Set[Int]", "kind" : "val"}, {"label" : "components", "tail" : ": Seq[FreeBasedComponent[(witnessM)#T, F]]", "member" : "net.alasc.symdpoly.evaluation.TransposesEquivalence.components", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#components:Seq[net.alasc.symdpoly.evaluation.FreeBasedComponent[TransposesEquivalence.this.witnessM.T,F]]", "kind" : "val"}, {"member" : "net.alasc.symdpoly.evaluation.TransposesEquivalence#<init>", "error" : "unsupported entity"}, {"label" : "witnessM", "tail" : ": Aux[M]", "member" : "net.alasc.symdpoly.evaluation.TransposesEquivalence.witnessM", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#witnessM:shapeless.Witness.Aux[M]", "kind" : "implicit val"}, {"label" : "witnessF", "tail" : "(): Aux[F]", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.witnessF", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#witnessF:shapeless.Witness.Aux[F]", "kind" : "implicit def"}, {"label" : "F", "tail" : "(): F", "member" : "net.alasc.symdpoly.evaluation.FreeBasedComponent.F", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#F:F", "kind" : "def"}, {"label" : "isCompatibleGroup", "tail" : "(grp: Grp[M.PermutationType]): Boolean", "member" : "net.alasc.symdpoly.evaluation.Equivalence.isCompatibleGroup", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#isCompatibleGroup(grp:net.alasc.finite.Grp[M#PermutationType]):Boolean", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Component.M", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#M:M", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/evaluation\/TransposesEquivalence.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.evaluation.TrivialEquivalence", "shortDescription" : "Equivalence under the adjoint operation.", "members_case class" : [{"label" : "isSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.evaluation.TrivialEquivalence.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#isSelfAdjoint:Boolean", "kind" : "def"}, {"label" : "compatibleSubgroup", "tail" : "(grp: Grp[M.PermutationType]): Grp[M.PermutationType]", "member" : "net.alasc.symdpoly.evaluation.TrivialEquivalence.compatibleSubgroup", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#compatibleSubgroup(grp:net.alasc.finite.Grp[M#PermutationType]):net.alasc.finite.Grp[M#PermutationType]", "kind" : "def"}, {"label" : "apply", "tail" : "(mono: M.MonoType): Set[M.MonoType]", "member" : "net.alasc.symdpoly.evaluation.TrivialEquivalence.apply", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#apply(mono:M#MonoType):Set[M#MonoType]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.evaluation.TrivialEquivalence#<init>", "error" : "unsupported entity"}, {"label" : "witnessM", "tail" : ": Aux[M]", "member" : "net.alasc.symdpoly.evaluation.TrivialEquivalence.witnessM", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#witnessM:shapeless.Witness.Aux[M]", "kind" : "implicit val"}, {"label" : "isCompatibleGroup", "tail" : "(grp: Grp[M.PermutationType]): Boolean", "member" : "net.alasc.symdpoly.evaluation.Equivalence.isCompatibleGroup", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#isCompatibleGroup(grp:net.alasc.finite.Grp[M#PermutationType]):Boolean", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.evaluation.Component.M", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#M:M", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/evaluation\/TrivialEquivalence.html", "kind" : "case class"}], "net.alasc.symdpoly.syntax" : [{"name" : "net.alasc.symdpoly.syntax.all", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html", "members_object" : [{"label" : "phasedOps", "tail" : "(a: A)(arg0: Phased[A]): PhasedOps[A]", "member" : "net.alasc.symdpoly.syntax.PhasedSyntax.phasedOps", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#phasedOps[A](a:A)(implicitevidence$1:net.alasc.symdpoly.algebra.Phased[A]):net.alasc.symdpoly.syntax.PhasedOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/syntax\/package$$all$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.syntax.AllSyntax", "members_trait" : [{"label" : "phasedOps", "tail" : "(a: A)(arg0: Phased[A]): PhasedOps[A]", "member" : "net.alasc.symdpoly.syntax.PhasedSyntax.phasedOps", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#phasedOps[A](a:A)(implicitevidence$1:net.alasc.symdpoly.algebra.Phased[A]):net.alasc.symdpoly.syntax.PhasedOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/syntax\/AllSyntax.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.syntax.phased", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html", "members_object" : [{"label" : "phasedOps", "tail" : "(a: A)(arg0: Phased[A]): PhasedOps[A]", "member" : "net.alasc.symdpoly.syntax.PhasedSyntax.phasedOps", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#phasedOps[A](a:A)(implicitevidence$1:net.alasc.symdpoly.algebra.Phased[A]):net.alasc.symdpoly.syntax.PhasedOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/syntax\/package$$phased$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.syntax.PhasedOps", "shortDescription" : "Syntax enrichment for phased.", "members_class" : [{"label" : "phaseCanonical", "tail" : "(): A", "member" : "net.alasc.symdpoly.syntax.PhasedOps.phaseCanonical", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#phaseCanonical():A", "kind" : "macro def"}, {"label" : "phaseOffset", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.syntax.PhasedOps.phaseOffset", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#phaseOffset():net.alasc.symdpoly.math.Phase", "kind" : "macro def"}, {"member" : "net.alasc.symdpoly.syntax.PhasedOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/syntax\/PhasedOps.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.syntax.PhasedSyntax", "members_trait" : [{"label" : "phasedOps", "tail" : "(a: A)(arg0: Phased[A]): PhasedOps[A]", "member" : "net.alasc.symdpoly.syntax.PhasedSyntax.phasedOps", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#phasedOps[A](a:A)(implicitevidence$1:net.alasc.symdpoly.algebra.Phased[A]):net.alasc.symdpoly.syntax.PhasedOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/syntax\/PhasedSyntax.html", "kind" : "trait"}], "scala.collection.compat" : [], "net.alasc.symdpoly.util" : [{"name" : "net.alasc.symdpoly.util.IndexMap", "shortDescription" : "A bidirectional map of elements to indices and vice versa.", "object" : "net\/alasc\/symdpoly\/util\/IndexMap$.html", "members_class" : [{"label" : "size", "tail" : "(): Int", "member" : "net.alasc.symdpoly.util.IndexMap.size", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#size:Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.util.IndexMap#<init>", "error" : "unsupported entity"}, {"label" : "elements", "tail" : ": Seq[A]", "member" : "net.alasc.symdpoly.util.IndexMap.elements", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#elements:Seq[A]", "kind" : "val"}, {"label" : "indexMap", "tail" : ": Map[A, Int]", "member" : "net.alasc.symdpoly.util.IndexMap.indexMap", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#indexMap:Map[A,Int]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/IndexMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(elements: Seq[A]): IndexMap[A]", "member" : "net.alasc.symdpoly.util.IndexMap.apply", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#apply[A](elements:Seq[A]):net.alasc.symdpoly.util.IndexMap[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/IndexMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/util\/IndexMap.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.util.MemoMap", "shortDescription" : "Map that caches evaluations of the function \"f\".", "object" : "net\/alasc\/symdpoly\/util\/MemoMap$.html", "members_class" : [{"label" : "apply", "tail" : "(key: K): V", "member" : "net.alasc.symdpoly.util.MemoMap.apply", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#apply(key:K):V", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.util.MemoMap.toString", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#toString():String", "kind" : "def"}, {"member" : "net.alasc.symdpoly.util.MemoMap#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/MemoMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(f: (K) ⇒ V): MemoMap[K, V]", "member" : "net.alasc.symdpoly.util.MemoMap.apply", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#apply[K,V](f:K=>V):net.alasc.symdpoly.util.MemoMap[K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/MemoMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/util\/MemoMap.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.util.OrderedSet", "shortDescription" : "Like SortedSet, but using binary search on a sorted array to retrieve elements, the ordering given by Spire's Order typeclass.", "object" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html", "members_class" : [{"label" : "toIndexedSeq", "tail" : "(): IndexedSeq[A]", "member" : "net.alasc.symdpoly.util.OrderedSet.toIndexedSeq", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#toIndexedSeq:IndexedSeq[A]", "kind" : "def"}, {"label" : "union", "tail" : "(rhs: OrderedSet[A])(ord: Order[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.util.OrderedSet.union", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#union(rhs:net.alasc.symdpoly.util.OrderedSet[A])(implicitord:spire.algebra.Order[A]):net.alasc.symdpoly.util.OrderedSet[A]", "kind" : "def"}, {"label" : "diff", "tail" : "(rhs: OrderedSet[A])(ord: Order[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.util.OrderedSet.diff", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#diff(rhs:net.alasc.symdpoly.util.OrderedSet[A])(implicitord:spire.algebra.Order[A]):net.alasc.symdpoly.util.OrderedSet[A]", "kind" : "def"}, {"label" : "toSortedSet", "tail" : "(ord: Order[A]): SortedSet[A]", "member" : "net.alasc.symdpoly.util.OrderedSet.toSortedSet", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#toSortedSet(implicitord:spire.algebra.Order[A]):scala.collection.immutable.SortedSet[A]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[A]", "member" : "net.alasc.symdpoly.util.OrderedSet.iterator", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#iterator:Iterator[A]", "kind" : "def"}, {"label" : "contains", "tail" : "(a: A)(ord: Order[A]): Boolean", "member" : "net.alasc.symdpoly.util.OrderedSet.contains", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#contains(a:A)(implicitord:spire.algebra.Order[A]):Boolean", "kind" : "def"}, {"label" : "indexOf", "tail" : "(a: A)(ord: Order[A]): Int", "member" : "net.alasc.symdpoly.util.OrderedSet.indexOf", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#indexOf(a:A)(implicitord:spire.algebra.Order[A]):Int", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "net.alasc.symdpoly.util.OrderedSet.length", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#length:Int", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int): A", "member" : "net.alasc.symdpoly.util.OrderedSet.apply", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#apply(i:Int):A", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.util.OrderedSet.toString", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.util.OrderedSet.hashCode", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "net.alasc.symdpoly.util.OrderedSet.equals", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#equals(o:Any):Boolean", "kind" : "def"}, {"member" : "net.alasc.symdpoly.util.OrderedSet#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromSortedSet", "tail" : "(set: SortedSet[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.util.OrderedSet.fromSortedSet", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#fromSortedSet[A](set:scala.collection.immutable.SortedSet[A]):net.alasc.symdpoly.util.OrderedSet[A]", "kind" : "def"}, {"label" : "fromUnique", "tail" : "(iterable: Iterable[A])(ord: Order[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.util.OrderedSet.fromUnique", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#fromUnique[A](iterable:Iterable[A])(implicitord:spire.algebra.Order[A]):net.alasc.symdpoly.util.OrderedSet[A]", "kind" : "def"}, {"label" : "fromOrdered", "tail" : "(seq: Seq[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.util.OrderedSet.fromOrdered", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#fromOrdered[A](seq:Seq[A]):net.alasc.symdpoly.util.OrderedSet[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(elements: A*)(arg0: Order[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.util.OrderedSet.apply", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#apply[A](elements:A*)(implicitevidence$2:spire.algebra.Order[A]):net.alasc.symdpoly.util.OrderedSet[A]", "kind" : "def"}, {"label" : "fromIterator", "tail" : "(iterator: Iterator[A])(arg0: Order[A]): OrderedSet[A]", "member" : "net.alasc.symdpoly.util.OrderedSet.fromIterator", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#fromIterator[A](iterator:Iterator[A])(implicitevidence$1:spire.algebra.Order[A]):net.alasc.symdpoly.util.OrderedSet[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(): OrderedSet[A]", "member" : "net.alasc.symdpoly.util.OrderedSet.empty", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#empty[A]:net.alasc.symdpoly.util.OrderedSet[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/OrderedSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/util\/OrderedSet.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.util.SparseTrie", "shortDescription" : "A space efficient implementation of a trie, where only terminal nodes have a value.", "object" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html", "members_class" : [{"label" : "entries", "tail" : "(K: Key[K]): Seq[(K, V)]", "member" : "net.alasc.symdpoly.util.SparseTrie.entries", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#entries(implicitK:net.alasc.symdpoly.util.SparseTrie.Key[K]):Seq[(K,V)]", "kind" : "def"}, {"label" : "apply", "tail" : "(key: K)(K: Key[K]): Opt[V]", "member" : "net.alasc.symdpoly.util.SparseTrie.apply", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#apply(key:K)(implicitK:net.alasc.symdpoly.util.SparseTrie.Key[K]):spire.util.Opt[V]", "kind" : "def"}, {"label" : "child", "tail" : "(index: Int): Result[K, V]", "member" : "net.alasc.symdpoly.util.SparseTrie.child", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#child(index:Int):net.alasc.symdpoly.util.SparseTrie.Result[K,V]", "kind" : "def"}, {"label" : "nChildren", "tail" : "(): Int", "member" : "net.alasc.symdpoly.util.SparseTrie.nChildren", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#nChildren:Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.util.SparseTrie#<init>", "error" : "unsupported entity"}, {"label" : "children", "tail" : ": Array[AnyRef]", "member" : "net.alasc.symdpoly.util.SparseTrie.children", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#children:Array[AnyRef]", "kind" : "val"}, {"label" : "indices", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.util.SparseTrie.indices", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#indices:Array[Int]", "kind" : "val"}, {"label" : "bitset", "tail" : ": Array[Long]", "member" : "net.alasc.symdpoly.util.SparseTrie.bitset", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#bitset:Array[Long]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "MutableWordKey", "tail" : "(arg0: Aux[F]): Key[MutableWord[F]]", "member" : "net.alasc.symdpoly.util.SparseTrie.MutableWordKey", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#MutableWordKey[F<:net.alasc.symdpoly.free.MonoidDef.Aux[F]withSingleton](implicitevidence$3:shapeless.Witness.Aux[F]):net.alasc.symdpoly.util.SparseTrie.Key[net.alasc.symdpoly.free.MutableWord[F]]", "kind" : "implicit def"}, {"label" : "StringKey", "tail" : "", "member" : "net.alasc.symdpoly.util.SparseTrie.StringKey", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#StringKey", "kind" : "implicit object"}, {"label" : "Key", "tail" : "", "member" : "net.alasc.symdpoly.util.SparseTrie.Key", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#Key", "kind" : "object"}, {"label" : "Key", "tail" : "", "member" : "net.alasc.symdpoly.util.SparseTrie.Key", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#Key[K]extendsAnyRef", "kind" : "trait"}, {"label" : "IsLeaf", "tail" : "", "member" : "net.alasc.symdpoly.util.SparseTrie.IsLeaf", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#IsLeaf", "kind" : "object"}, {"label" : "IsBranch", "tail" : "", "member" : "net.alasc.symdpoly.util.SparseTrie.IsBranch", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#IsBranch", "kind" : "object"}, {"label" : "LeafResult", "tail" : "", "member" : "net.alasc.symdpoly.util.SparseTrie.LeafResult", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#LeafResult[V]extendsAnyVal", "kind" : "final class"}, {"label" : "BranchResult", "tail" : "", "member" : "net.alasc.symdpoly.util.SparseTrie.BranchResult", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#BranchResult[K,V]extendsAnyVal", "kind" : "final class"}, {"label" : "Result", "tail" : "", "member" : "net.alasc.symdpoly.util.SparseTrie.Result", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#Result", "kind" : "object"}, {"label" : "Result", "tail" : "", "member" : "net.alasc.symdpoly.util.SparseTrie.Result", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#Result[K,V]extendsAnyVal", "kind" : "final class"}, {"label" : "Wrap", "tail" : "", "member" : "net.alasc.symdpoly.util.SparseTrie.Wrap", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#Wrap[V]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "net.alasc.symdpoly.util.SparseTrie.Empty", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#Empty", "kind" : "object"}, {"label" : "apply", "tail" : "(entries: (K, V)*)(arg0: Key[K]): SparseTrie[K, V]", "member" : "net.alasc.symdpoly.util.SparseTrie.apply", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#apply[K,V](entries:(K,V)*)(implicitevidence$2:net.alasc.symdpoly.util.SparseTrie.Key[K]):net.alasc.symdpoly.util.SparseTrie[K,V]", "kind" : "def"}, {"label" : "construct", "tail" : "(entries: Seq[(K, V)], pos: Int)(arg0: Key[K]): SparseTrie[K, V]", "member" : "net.alasc.symdpoly.util.SparseTrie.construct", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#construct[K,V](entries:Seq[(K,V)],pos:Int)(implicitevidence$1:net.alasc.symdpoly.util.SparseTrie.Key[K]):net.alasc.symdpoly.util.SparseTrie[K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/util\/SparseTrie$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/util\/SparseTrie.html", "kind" : "class"}], "net.alasc.symdpoly.instances" : [{"name" : "net.alasc.symdpoly.instances.all", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/instances\/package$$all$.html", "members_object" : [{"label" : "symdpolyContravariantForFaithfulPermutationActionBuilder", "tail" : ": Contravariant[FaithfulPermutationActionBuilder]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForFaithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#symdpolyContravariantForFaithfulPermutationActionBuilder:cats.Contravariant[net.alasc.finite.FaithfulPermutationActionBuilder]", "kind" : "implicit val"}, {"label" : "symdpolyInvariantForVectorSpace", "tail" : "(): Invariant[[V]VectorSpace[V, F]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForVectorSpace", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#symdpolyInvariantForVectorSpace[F]:cats.Invariant[[V]spire.algebra.VectorSpace[V,F]]", "kind" : "implicit def"}, {"label" : "symdpolyInvariantForAction", "tail" : "(): Invariant[[P]Action[P, G]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForAction", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#symdpolyInvariantForAction[G]:cats.Invariant[[P]spire.algebra.Action[P,G]]", "kind" : "implicit def"}, {"label" : "symdpolyContravariantForAction", "tail" : "(): Contravariant[[G]Action[P, G]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForAction", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#symdpolyContravariantForAction[P]:cats.Contravariant[[G]spire.algebra.Action[P,G]]", "kind" : "implicit def"}, {"label" : "symdpolyContravariantForPermutationAction", "tail" : ": Contravariant[PermutationAction]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForPermutationAction", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#symdpolyContravariantForPermutationAction:cats.Contravariant[net.alasc.algebra.PermutationAction]", "kind" : "implicit val"}, {"label" : "ContravariantForFaithfulPermutationAction", "tail" : ": Contravariant[PermutationAction]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.ContravariantForFaithfulPermutationAction", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#ContravariantForFaithfulPermutationAction:cats.Contravariant[net.alasc.algebra.PermutationAction]", "kind" : "val"}, {"label" : "symdpolyInvariantForInvolution", "tail" : ": Invariant[Involution]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForInvolution", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#symdpolyInvariantForInvolution:cats.Invariant[spire.algebra.Involution]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/instances\/package$$all$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.instances.AllInstances", "members_trait" : [{"label" : "symdpolyContravariantForFaithfulPermutationActionBuilder", "tail" : ": Contravariant[FaithfulPermutationActionBuilder]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForFaithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#symdpolyContravariantForFaithfulPermutationActionBuilder:cats.Contravariant[net.alasc.finite.FaithfulPermutationActionBuilder]", "kind" : "implicit val"}, {"label" : "symdpolyInvariantForVectorSpace", "tail" : "(): Invariant[[V]VectorSpace[V, F]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForVectorSpace", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#symdpolyInvariantForVectorSpace[F]:cats.Invariant[[V]spire.algebra.VectorSpace[V,F]]", "kind" : "implicit def"}, {"label" : "symdpolyInvariantForAction", "tail" : "(): Invariant[[P]Action[P, G]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForAction", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#symdpolyInvariantForAction[G]:cats.Invariant[[P]spire.algebra.Action[P,G]]", "kind" : "implicit def"}, {"label" : "symdpolyContravariantForAction", "tail" : "(): Contravariant[[G]Action[P, G]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForAction", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#symdpolyContravariantForAction[P]:cats.Contravariant[[G]spire.algebra.Action[P,G]]", "kind" : "implicit def"}, {"label" : "symdpolyContravariantForPermutationAction", "tail" : ": Contravariant[PermutationAction]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForPermutationAction", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#symdpolyContravariantForPermutationAction:cats.Contravariant[net.alasc.algebra.PermutationAction]", "kind" : "implicit val"}, {"label" : "ContravariantForFaithfulPermutationAction", "tail" : ": Contravariant[PermutationAction]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.ContravariantForFaithfulPermutationAction", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#ContravariantForFaithfulPermutationAction:cats.Contravariant[net.alasc.algebra.PermutationAction]", "kind" : "val"}, {"label" : "symdpolyInvariantForInvolution", "tail" : ": Invariant[Involution]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForInvolution", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#symdpolyInvariantForInvolution:cats.Invariant[spire.algebra.Involution]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/instances\/AllInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/instances\/AllInstances.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.instances.invariant", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html", "members_object" : [{"label" : "symdpolyContravariantForFaithfulPermutationActionBuilder", "tail" : ": Contravariant[FaithfulPermutationActionBuilder]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForFaithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#symdpolyContravariantForFaithfulPermutationActionBuilder:cats.Contravariant[net.alasc.finite.FaithfulPermutationActionBuilder]", "kind" : "implicit val"}, {"label" : "symdpolyInvariantForVectorSpace", "tail" : "(): Invariant[[V]VectorSpace[V, F]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForVectorSpace", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#symdpolyInvariantForVectorSpace[F]:cats.Invariant[[V]spire.algebra.VectorSpace[V,F]]", "kind" : "implicit def"}, {"label" : "symdpolyInvariantForAction", "tail" : "(): Invariant[[P]Action[P, G]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForAction", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#symdpolyInvariantForAction[G]:cats.Invariant[[P]spire.algebra.Action[P,G]]", "kind" : "implicit def"}, {"label" : "symdpolyContravariantForAction", "tail" : "(): Contravariant[[G]Action[P, G]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForAction", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#symdpolyContravariantForAction[P]:cats.Contravariant[[G]spire.algebra.Action[P,G]]", "kind" : "implicit def"}, {"label" : "symdpolyContravariantForPermutationAction", "tail" : ": Contravariant[PermutationAction]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForPermutationAction", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#symdpolyContravariantForPermutationAction:cats.Contravariant[net.alasc.algebra.PermutationAction]", "kind" : "implicit val"}, {"label" : "ContravariantForFaithfulPermutationAction", "tail" : ": Contravariant[PermutationAction]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.ContravariantForFaithfulPermutationAction", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#ContravariantForFaithfulPermutationAction:cats.Contravariant[net.alasc.algebra.PermutationAction]", "kind" : "val"}, {"label" : "symdpolyInvariantForInvolution", "tail" : ": Invariant[Involution]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForInvolution", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#symdpolyInvariantForInvolution:cats.Invariant[spire.algebra.Involution]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/instances\/package$$invariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "net.alasc.symdpoly.instances.InvariantInstances", "members_trait" : [{"label" : "symdpolyContravariantForFaithfulPermutationActionBuilder", "tail" : ": Contravariant[FaithfulPermutationActionBuilder]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForFaithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#symdpolyContravariantForFaithfulPermutationActionBuilder:cats.Contravariant[net.alasc.finite.FaithfulPermutationActionBuilder]", "kind" : "implicit val"}, {"label" : "symdpolyInvariantForVectorSpace", "tail" : "(): Invariant[[V]VectorSpace[V, F]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForVectorSpace", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#symdpolyInvariantForVectorSpace[F]:cats.Invariant[[V]spire.algebra.VectorSpace[V,F]]", "kind" : "implicit def"}, {"label" : "symdpolyInvariantForAction", "tail" : "(): Invariant[[P]Action[P, G]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForAction", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#symdpolyInvariantForAction[G]:cats.Invariant[[P]spire.algebra.Action[P,G]]", "kind" : "implicit def"}, {"label" : "symdpolyContravariantForAction", "tail" : "(): Contravariant[[G]Action[P, G]]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForAction", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#symdpolyContravariantForAction[P]:cats.Contravariant[[G]spire.algebra.Action[P,G]]", "kind" : "implicit def"}, {"label" : "symdpolyContravariantForPermutationAction", "tail" : ": Contravariant[PermutationAction]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyContravariantForPermutationAction", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#symdpolyContravariantForPermutationAction:cats.Contravariant[net.alasc.algebra.PermutationAction]", "kind" : "implicit val"}, {"label" : "ContravariantForFaithfulPermutationAction", "tail" : ": Contravariant[PermutationAction]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.ContravariantForFaithfulPermutationAction", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#ContravariantForFaithfulPermutationAction:cats.Contravariant[net.alasc.algebra.PermutationAction]", "kind" : "val"}, {"label" : "symdpolyInvariantForInvolution", "tail" : ": Invariant[Involution]", "member" : "net.alasc.symdpoly.instances.InvariantInstances.symdpolyInvariantForInvolution", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#symdpolyInvariantForInvolution:cats.Invariant[spire.algebra.Involution]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/instances\/InvariantInstances.html", "kind" : "trait"}], "net.alasc.symdpoly.sdp" : [{"name" : "net.alasc.symdpoly.sdp.BasisTerm", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html", "members_object" : [{"label" : "SeqBasisTerm", "tail" : "", "member" : "net.alasc.symdpoly.sdp.BasisTerm.SeqBasisTerm", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#SeqBasisTermextendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "net.alasc.symdpoly.sdp.BasisTerm#<init>", "error" : "unsupported entity"}, {"label" : "imagPart", "tail" : ": Double", "member" : "net.alasc.symdpoly.sdp.BasisTerm.imagPart", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#imagPart:Double", "kind" : "val"}, {"label" : "realPart", "tail" : ": Double", "member" : "net.alasc.symdpoly.sdp.BasisTerm.realPart", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#realPart:Double", "kind" : "val"}, {"label" : "basisIndex", "tail" : ": Int", "member" : "net.alasc.symdpoly.sdp.BasisTerm.basisIndex", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#basisIndex:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/sdp\/BasisTerm.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.sdp.Block", "shortDescription" : "Describes a SDP constraint block expressed as a linear combination of basis elements on real scalar variables.", "object" : "net\/alasc\/symdpoly\/sdp\/Block$.html", "members_object" : [{"label" : "apply", "tail" : "(size: Int, basisSize: Int, elements: Seq[BlockElement]): Block", "member" : "net.alasc.symdpoly.sdp.Block.apply", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#apply(size:Int,basisSize:Int,elements:Seq[net.alasc.symdpoly.sdp.BlockElement]):net.alasc.symdpoly.sdp.Block", "kind" : "def"}, {"label" : "complexBlock", "tail" : "(size: Int, basisSize: Int, elements: Seq[BlockElement]): Block", "member" : "net.alasc.symdpoly.sdp.Block.complexBlock", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#complexBlock(size:Int,basisSize:Int,elements:Seq[net.alasc.symdpoly.sdp.BlockElement]):net.alasc.symdpoly.sdp.Block", "kind" : "def"}, {"label" : "realBlock", "tail" : "(size: Int, basisSize: Int, elements: Seq[BlockElement]): Block", "member" : "net.alasc.symdpoly.sdp.Block.realBlock", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#realBlock(size:Int,basisSize:Int,elements:Seq[net.alasc.symdpoly.sdp.BlockElement]):net.alasc.symdpoly.sdp.Block", "kind" : "def"}, {"label" : "directSum", "tail" : "(basisSize: Int): Monoid[Block]", "member" : "net.alasc.symdpoly.sdp.Block.directSum", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#directSum(basisSize:Int):spire.algebra.Monoid[net.alasc.symdpoly.sdp.Block]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/Block$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "nEntries", "tail" : "(): Int", "member" : "net.alasc.symdpoly.sdp.Block.nEntries", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#nEntries:Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.sdp.Block#<init>", "error" : "unsupported entity"}, {"label" : "coefficients", "tail" : ": Array[Double]", "member" : "net.alasc.symdpoly.sdp.Block.coefficients", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#coefficients:Array[Double]", "kind" : "val"}, {"label" : "colIndices", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.sdp.Block.colIndices", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#colIndices:Array[Int]", "kind" : "val"}, {"label" : "rowIndices", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.sdp.Block.rowIndices", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#rowIndices:Array[Int]", "kind" : "val"}, {"label" : "basisIndices", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.sdp.Block.basisIndices", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#basisIndices:Array[Int]", "kind" : "val"}, {"label" : "basisSize", "tail" : ": Int", "member" : "net.alasc.symdpoly.sdp.Block.basisSize", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#basisSize:Int", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "net.alasc.symdpoly.sdp.Block.size", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#size:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/Block.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/sdp\/Block.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.sdp.BlockElement", "shortDescription" : "", "members_case class" : [{"member" : "net.alasc.symdpoly.sdp.BlockElement#<init>", "error" : "unsupported entity"}, {"label" : "complexPart", "tail" : ": Double", "member" : "net.alasc.symdpoly.sdp.BlockElement.complexPart", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#complexPart:Double", "kind" : "val"}, {"label" : "realPart", "tail" : ": Double", "member" : "net.alasc.symdpoly.sdp.BlockElement.realPart", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#realPart:Double", "kind" : "val"}, {"label" : "c", "tail" : ": Int", "member" : "net.alasc.symdpoly.sdp.BlockElement.c", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#c:Int", "kind" : "val"}, {"label" : "r", "tail" : ": Int", "member" : "net.alasc.symdpoly.sdp.BlockElement.r", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#r:Int", "kind" : "val"}, {"label" : "basisIndex", "tail" : ": Int", "member" : "net.alasc.symdpoly.sdp.BlockElement.basisIndex", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#basisIndex:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/sdp\/BlockElement.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.sdp.GenPermMat", "members_trait" : [{"label" : "toMat", "tail" : "(): Mat[Double]", "member" : "net.alasc.symdpoly.sdp.GenPermMat.toMat", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#toMat:scalin.immutable.Mat[Double]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "elements", "tail" : "(): Seq[MatElement]", "member" : "net.alasc.symdpoly.sdp.GenPermMat.elements", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#elements:Seq[net.alasc.symdpoly.sdp.MatElement]", "kind" : "abstract def"}, {"label" : "n", "tail" : "(): Int", "member" : "net.alasc.symdpoly.sdp.GenPermMat.n", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html#n:Int", "kind" : "abstract def"}], "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html", "members_object" : [{"label" : "ComplexMat", "tail" : "", "member" : "net.alasc.symdpoly.sdp.GenPermMat.ComplexMat", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#ComplexMatextendsGenPermMatwithProductwithSerializable", "kind" : "case class"}, {"label" : "encoding", "tail" : "(f: Complex[Double], r0: Int, c0: Int): Double", "member" : "net.alasc.symdpoly.sdp.GenPermMat.encoding", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#encoding(f:spire.math.Complex[Double],r0:Int,c0:Int):Double", "kind" : "def"}, {"label" : "RealMat", "tail" : "", "member" : "net.alasc.symdpoly.sdp.GenPermMat.RealMat", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#RealMatextendsGenPermMatwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/GenPermMat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/sdp\/GenPermMat.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.sdp.MatElement", "shortDescription" : "", "members_case class" : [{"member" : "net.alasc.symdpoly.sdp.MatElement#<init>", "error" : "unsupported entity"}, {"label" : "real", "tail" : ": Double", "member" : "net.alasc.symdpoly.sdp.MatElement.real", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#real:Double", "kind" : "val"}, {"label" : "c", "tail" : ": Int", "member" : "net.alasc.symdpoly.sdp.MatElement.c", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#c:Int", "kind" : "val"}, {"label" : "r", "tail" : ": Int", "member" : "net.alasc.symdpoly.sdp.MatElement.r", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#r:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/MatElement.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/sdp\/MatElement.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.sdp.Program", "shortDescription" : "Description of an semidefinite program extended dual.", "members_case class" : [{"label" : "jOptimizer", "tail" : "(): JOptimizerInstance", "member" : "net.alasc.symdpoly.sdp.Program.jOptimizer", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#jOptimizer:net.alasc.symdpoly.solvers.JOptimizerInstance", "kind" : "def"}, {"label" : "sdpt3", "tail" : "(): SDPT3MatlabFormat", "member" : "net.alasc.symdpoly.sdp.Program.sdpt3", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#sdpt3:net.alasc.symdpoly.solvers.SDPT3MatlabFormat", "kind" : "def"}, {"label" : "sedumi", "tail" : "(): SedumiMatlabFormat", "member" : "net.alasc.symdpoly.sdp.Program.sedumi", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#sedumi:net.alasc.symdpoly.solvers.SedumiMatlabFormat", "kind" : "def"}, {"label" : "scs", "tail" : "(): SCSMatlabFormat", "member" : "net.alasc.symdpoly.sdp.Program.scs", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#scs:net.alasc.symdpoly.solvers.SCSMatlabFormat", "kind" : "def"}, {"label" : "mosek", "tail" : "(): MosekFormat", "member" : "net.alasc.symdpoly.sdp.Program.mosek", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#mosek:net.alasc.symdpoly.solvers.MosekFormat", "kind" : "def"}, {"label" : "sdpa", "tail" : "(): SDPAFormat", "member" : "net.alasc.symdpoly.sdp.Program.sdpa", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#sdpa:net.alasc.symdpoly.solvers.SDPAFormat", "kind" : "def"}, {"label" : "mergeBlocks", "tail" : "(): Program", "member" : "net.alasc.symdpoly.sdp.Program.mergeBlocks", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#mergeBlocks:net.alasc.symdpoly.sdp.Program", "kind" : "def"}, {"label" : "convertInequalitiesToBlock", "tail" : "(): Program", "member" : "net.alasc.symdpoly.sdp.Program.convertInequalitiesToBlock", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#convertInequalitiesToBlock:net.alasc.symdpoly.sdp.Program", "kind" : "def"}, {"label" : "convertEqualitiesToInequalities", "tail" : "(): Program", "member" : "net.alasc.symdpoly.sdp.Program.convertEqualitiesToInequalities", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#convertEqualitiesToInequalities:net.alasc.symdpoly.sdp.Program", "kind" : "def"}, {"label" : "asMinimization", "tail" : "(): Program", "member" : "net.alasc.symdpoly.sdp.Program.asMinimization", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#asMinimization:net.alasc.symdpoly.sdp.Program", "kind" : "def"}, {"label" : "nY", "tail" : "(): Int", "member" : "net.alasc.symdpoly.sdp.Program.nY", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#nY:Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.sdp.Program#<init>", "error" : "unsupported entity"}, {"label" : "ineqA", "tail" : ": Mat[Double]", "member" : "net.alasc.symdpoly.sdp.Program.ineqA", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#ineqA:scalin.immutable.Mat[Double]", "kind" : "val"}, {"label" : "eqA", "tail" : ": Mat[Double]", "member" : "net.alasc.symdpoly.sdp.Program.eqA", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#eqA:scalin.immutable.Mat[Double]", "kind" : "val"}, {"label" : "sdpCon", "tail" : ": SDPConstraint", "member" : "net.alasc.symdpoly.sdp.Program.sdpCon", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#sdpCon:net.alasc.symdpoly.sdp.SDPConstraint", "kind" : "val"}, {"label" : "obj", "tail" : ": Vec[Double]", "member" : "net.alasc.symdpoly.sdp.Program.obj", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#obj:scalin.immutable.Vec[Double]", "kind" : "val"}, {"label" : "direction", "tail" : ": Direction", "member" : "net.alasc.symdpoly.sdp.Program.direction", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#direction:net.alasc.symdpoly.Direction", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/Program.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/sdp\/Program.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.sdp.RepMat", "shortDescription" : "", "object" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html", "members_object" : [{"label" : "groupInstance", "tail" : "(identity: RepMat): Group[RepMat]", "member" : "net.alasc.symdpoly.sdp.RepMat.groupInstance", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#groupInstance(identity:net.alasc.symdpoly.sdp.RepMat):spire.algebra.Group[net.alasc.symdpoly.sdp.RepMat]", "kind" : "def"}, {"label" : "realTrivialMorphism", "tail" : "(n: Int)(arg0: Group[G]): Morphism[G, RepMat, Group]", "member" : "net.alasc.symdpoly.sdp.RepMat.realTrivialMorphism", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#realTrivialMorphism[G](n:Int)(implicitevidence$1:spire.algebra.Group[G]):net.alasc.symdpoly.algebra.Morphism[G,net.alasc.symdpoly.sdp.RepMat,spire.algebra.Group]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toMat", "tail" : "(): Mat[Double]", "member" : "net.alasc.symdpoly.sdp.RepMat.toMat", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#toMat:scalin.immutable.Mat[Double]", "kind" : "def"}, {"label" : "elements", "tail" : ": Seq[MatElement]", "member" : "net.alasc.symdpoly.sdp.RepMat.elements", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#elements:Seq[net.alasc.symdpoly.sdp.MatElement]", "kind" : "lazy val"}, {"label" : "n", "tail" : "(): Int", "member" : "net.alasc.symdpoly.sdp.RepMat.n", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#n:Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.sdp.RepMat#<init>", "error" : "unsupported entity"}, {"label" : "blocks", "tail" : ": Seq[GenPermMat]", "member" : "net.alasc.symdpoly.sdp.RepMat.blocks", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#blocks:Seq[net.alasc.symdpoly.sdp.GenPermMat]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/RepMat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/sdp\/RepMat.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.sdp.SDPConstraint", "shortDescription" : "", "members_case class" : [{"label" : "mergeBlocks", "tail" : "(): SDPConstraint", "member" : "net.alasc.symdpoly.sdp.SDPConstraint.mergeBlocks", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#mergeBlocks:net.alasc.symdpoly.sdp.SDPConstraint", "kind" : "def"}, {"label" : "adding", "tail" : "(blocks1: Seq[Block], representation1: Morphism[Perm, RepMat, Group]): SDPConstraint", "member" : "net.alasc.symdpoly.sdp.SDPConstraint.adding", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#adding(blocks1:Seq[net.alasc.symdpoly.sdp.Block],representation1:net.alasc.symdpoly.algebra.Morphism[net.alasc.perms.Perm,net.alasc.symdpoly.sdp.RepMat,spire.algebra.Group]):net.alasc.symdpoly.sdp.SDPConstraint", "kind" : "def"}, {"member" : "net.alasc.symdpoly.sdp.SDPConstraint#<init>", "error" : "unsupported entity"}, {"label" : "representation", "tail" : ": Morphism[Perm, RepMat, Group]", "member" : "net.alasc.symdpoly.sdp.SDPConstraint.representation", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#representation:net.alasc.symdpoly.algebra.Morphism[net.alasc.perms.Perm,net.alasc.symdpoly.sdp.RepMat,spire.algebra.Group]", "kind" : "val"}, {"label" : "symmetryGroup", "tail" : ": Grp[Perm]", "member" : "net.alasc.symdpoly.sdp.SDPConstraint.symmetryGroup", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#symmetryGroup:net.alasc.finite.Grp[net.alasc.perms.Perm]", "kind" : "val"}, {"label" : "blocks", "tail" : ": Seq[Block]", "member" : "net.alasc.symdpoly.sdp.SDPConstraint.blocks", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#blocks:Seq[net.alasc.symdpoly.sdp.Block]", "kind" : "val"}, {"label" : "basisSize", "tail" : ": Int", "member" : "net.alasc.symdpoly.sdp.SDPConstraint.basisSize", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#basisSize:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/sdp\/SDPConstraint.html", "kind" : "case class"}], "net.alasc.symdpoly.generic" : [{"name" : "net.alasc.symdpoly.generic.LinearMoment", "shortDescription" : "Evaluated noncommutative polynomial.", "object" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html", "members_class" : [{"label" : "vectorRealImagPartsIn", "tail" : "(relaxation: Relaxation[E, E.Mono]): Seq[Vec[Double]]", "member" : "net.alasc.symdpoly.generic.LinearMoment.vectorRealImagPartsIn", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#vectorRealImagPartsIn(relaxation:net.alasc.symdpoly.Relaxation[E,M]):Seq[scalin.immutable.Vec[Double]]", "kind" : "def"}, {"label" : "expandIn", "tail" : "(relaxation: Relaxation[E, E.Mono]): Seq[BasisTerm]", "member" : "net.alasc.symdpoly.generic.LinearMoment.expandIn", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#expandIn(relaxation:net.alasc.symdpoly.Relaxation[E,M]):Seq[net.alasc.symdpoly.sdp.BasisTerm]", "kind" : "def"}, {"label" : "vectorSelfAdjointIn", "tail" : "(relaxation: Relaxation[E, E.Mono]): Vec[Double]", "member" : "net.alasc.symdpoly.generic.LinearMoment.vectorSelfAdjointIn", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#vectorSelfAdjointIn(relaxation:net.alasc.symdpoly.Relaxation[E,M]):scalin.immutable.Vec[Double]", "kind" : "def"}, {"label" : "invariantSubgroupOf", "tail" : "(grp: Grp[M.PermutationType]): Grp[M.PermutationType]", "member" : "net.alasc.symdpoly.generic.LinearMoment.invariantSubgroupOf", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#invariantSubgroupOf(grp:net.alasc.finite.Grp[M#PermutationType]):net.alasc.finite.Grp[M#PermutationType]", "kind" : "def"}, {"label" : "vectorOverOrderedSet", "tail" : "(orderedSet: OrderedSet[SingleMoment[E, E.Mono]])(V: VecEngine[Cyclo]): Vec[Cyclo]", "member" : "net.alasc.symdpoly.generic.LinearMoment.vectorOverOrderedSet", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#vectorOverOrderedSet(orderedSet:net.alasc.symdpoly.util.OrderedSet[net.alasc.symdpoly.generic.SingleMoment[E,M]])(implicitV:scalin.immutable.VecEngine[cyclo.Cyclo]):scalin.immutable.Vec[cyclo.Cyclo]", "kind" : "def"}, {"label" : "coeff", "tail" : "(mono: SingleMoment[E, E.Mono]): Cyclo", "member" : "net.alasc.symdpoly.generic.LinearMoment.coeff", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#coeff(mono:net.alasc.symdpoly.generic.SingleMoment[E,M]):cyclo.Cyclo", "kind" : "def"}, {"label" : "coeff", "tail" : "(i: Int): Cyclo", "member" : "net.alasc.symdpoly.generic.LinearMoment.coeff", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#coeff(i:Int):cyclo.Cyclo", "kind" : "def"}, {"label" : "monomial", "tail" : "(i: Int): SingleMoment[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMoment.monomial", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#monomial(i:Int):net.alasc.symdpoly.generic.SingleMoment[E,M]", "kind" : "def"}, {"label" : "nTerms", "tail" : "(): Int", "member" : "net.alasc.symdpoly.generic.LinearMoment.nTerms", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#nTerms:Int", "kind" : "def"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.generic.LinearMoment.equals", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.generic.LinearMoment.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#hashCode():Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.generic.LinearMoment.toString", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#toString():String", "kind" : "def"}, {"label" : "toPoly", "tail" : "(): LinearMoment[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMoment.toPoly", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#toPoly:net.alasc.symdpoly.generic.LinearMoment[E,M]", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.generic.LinearMoment.isZero", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#isZero:Boolean", "kind" : "def"}, {"label" : "E", "tail" : "(): E", "member" : "net.alasc.symdpoly.generic.LinearMoment.E", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#E:E", "kind" : "def"}, {"label" : "M", "tail" : "(): E.Mono", "member" : "net.alasc.symdpoly.generic.LinearMoment.M", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#M:M", "kind" : "def"}, {"member" : "net.alasc.symdpoly.generic.LinearMoment#<init>", "error" : "unsupported entity"}, {"label" : "normalForm", "tail" : ": M.PolyType", "member" : "net.alasc.symdpoly.generic.LinearMoment.normalForm", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#normalForm:M#PolyType", "kind" : "val"}, {"label" : "minimize", "tail" : "(E: Aux[E], M: Aux[E.Mono]): Optimization[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.minimize", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#minimize(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Optimization[E,M]", "kind" : "def"}, {"label" : "maximize", "tail" : "(E: Aux[E], M: Aux[E.Mono]): Optimization[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.maximize", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#maximize(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Optimization[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: Cyclo)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#=!(rhs:cyclo.Cyclo)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: Rational)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#=!(rhs:spire.math.Rational)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: Int)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#=!(rhs:Int)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: LinearMomentLike[E, E.Mono])(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#=!(rhs:net.alasc.symdpoly.generic.LinearMomentLike[E,M])(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: Cyclo)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#>=!(rhs:cyclo.Cyclo)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: Rational)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#>=!(rhs:spire.math.Rational)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: Int)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#>=!(rhs:Int)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: LinearMomentLike[E, E.Mono])(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#>=!(rhs:net.alasc.symdpoly.generic.LinearMomentLike[E,M])(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: Cyclo)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#<=!(rhs:cyclo.Cyclo)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: Rational)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#<=!(rhs:spire.math.Rational)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: Int)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#<=!(rhs:Int)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: LinearMomentLike[E, E.Mono])(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#<=!(rhs:net.alasc.symdpoly.generic.LinearMomentLike[E,M])(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "vectorSpace", "tail" : "(arg0: Aux[E]): VectorSpace[LinearMoment[E, M], Cyclo]", "member" : "net.alasc.symdpoly.generic.LinearMoment.vectorSpace", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#vectorSpace[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$10:shapeless.Witness.Aux[E]):spire.algebra.VectorSpace[net.alasc.symdpoly.generic.LinearMoment[E,M],cyclo.Cyclo]", "kind" : "implicit def"}, {"label" : "equ", "tail" : "(arg0: Aux[E]): Eq[LinearMoment[E, M]]", "member" : "net.alasc.symdpoly.generic.LinearMoment.equ", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#equ[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$9:shapeless.Witness.Aux[E]):spire.algebra.Eq[net.alasc.symdpoly.generic.LinearMoment[E,M]]", "kind" : "implicit def"}, {"label" : "polyFromCyclo", "tail" : "(c: Cyclo)(arg0: Aux[E], arg1: Aux[M]): LinearMoment[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMoment.polyFromCyclo", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#polyFromCyclo[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](c:cyclo.Cyclo)(implicitevidence$7:shapeless.Witness.Aux[E],implicitevidence$8:shapeless.Witness.Aux[M]):net.alasc.symdpoly.generic.LinearMoment[E,M]", "kind" : "implicit def"}, {"label" : "polyFromRational", "tail" : "(r: Rational)(arg0: Aux[E], arg1: Aux[M]): LinearMoment[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMoment.polyFromRational", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#polyFromRational[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](r:spire.math.Rational)(implicitevidence$5:shapeless.Witness.Aux[E],implicitevidence$6:shapeless.Witness.Aux[M]):net.alasc.symdpoly.generic.LinearMoment[E,M]", "kind" : "implicit def"}, {"label" : "polyFromInt", "tail" : "(i: Int)(arg0: Aux[E], arg1: Aux[M]): LinearMoment[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMoment.polyFromInt", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#polyFromInt[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](i:Int)(implicitevidence$3:shapeless.Witness.Aux[E],implicitevidence$4:shapeless.Witness.Aux[M]):net.alasc.symdpoly.generic.LinearMoment[E,M]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/LinearMoment$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/generic\/LinearMoment.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.generic.LinearMomentLike", "members_trait" : [{"label" : "minimize", "tail" : "(E: Aux[E], M: Aux[M]): Optimization[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.minimize", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#minimize(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Optimization[E,M]", "kind" : "def"}, {"label" : "maximize", "tail" : "(E: Aux[E], M: Aux[M]): Optimization[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.maximize", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#maximize(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Optimization[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: Cyclo)(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#=!(rhs:cyclo.Cyclo)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: Rational)(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#=!(rhs:spire.math.Rational)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: Int)(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#=!(rhs:Int)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: LinearMomentLike[E, M])(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#=!(rhs:net.alasc.symdpoly.generic.LinearMomentLike[E,M])(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: Cyclo)(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#>=!(rhs:cyclo.Cyclo)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: Rational)(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#>=!(rhs:spire.math.Rational)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: Int)(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#>=!(rhs:Int)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: LinearMomentLike[E, M])(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#>=!(rhs:net.alasc.symdpoly.generic.LinearMomentLike[E,M])(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: Cyclo)(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#<=!(rhs:cyclo.Cyclo)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: Rational)(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#<=!(rhs:spire.math.Rational)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: Int)(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#<=!(rhs:Int)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: LinearMomentLike[E, M])(E: Aux[E], M: Aux[M]): ScalarConstraint[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#<=!(rhs:net.alasc.symdpoly.generic.LinearMomentLike[E,M])(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toPoly", "tail" : "(): LinearMoment[E, M]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.toPoly", "link" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html#toPoly:net.alasc.symdpoly.generic.LinearMoment[E,M]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "net\/alasc\/symdpoly\/generic\/LinearMomentLike.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.generic.MomentSet", "shortDescription" : "Describes an ordered set of equivalence classes of monomials under evaluation.", "members_class" : [{"label" : "allSelfAdjoint", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.generic.MomentSet.allSelfAdjoint", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#allSelfAdjoint:Boolean", "kind" : "def"}, {"label" : "indexOf", "tail" : "(element: SingleMoment[E, M]): Int", "member" : "net.alasc.symdpoly.generic.MomentSet.indexOf", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#indexOf(element:net.alasc.symdpoly.generic.SingleMoment[E,M]):Int", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int): SingleMoment[E, M]", "member" : "net.alasc.symdpoly.generic.MomentSet.apply", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#apply(i:Int):net.alasc.symdpoly.generic.SingleMoment[E,M]", "kind" : "def"}, {"label" : "isSelfAdjoint", "tail" : "(i: Int): Boolean", "member" : "net.alasc.symdpoly.generic.MomentSet.isSelfAdjoint", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#isSelfAdjoint(i:Int):Boolean", "kind" : "def"}, {"label" : "conjugateIndex", "tail" : "(i: Int): Int", "member" : "net.alasc.symdpoly.generic.MomentSet.conjugateIndex", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#conjugateIndex(i:Int):Int", "kind" : "def"}, {"label" : "nElements", "tail" : "(): Int", "member" : "net.alasc.symdpoly.generic.MomentSet.nElements", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#nElements:Int", "kind" : "def"}, {"member" : "net.alasc.symdpoly.generic.MomentSet#<init>", "error" : "unsupported entity"}, {"label" : "elements", "tail" : ": OrderedSet[SingleMoment[E, M]]", "member" : "net.alasc.symdpoly.generic.MomentSet.elements", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#elements:net.alasc.symdpoly.util.OrderedSet[net.alasc.symdpoly.generic.SingleMoment[E,M]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MomentSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/generic\/MomentSet.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.generic.MomentSetBuilder", "shortDescription" : "Builds a MomentSet incrementally.", "object" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html", "members_class" : [{"label" : "getElement", "tail" : "(monoSelfAdjoint: SingleMoment[E, M]): Int", "member" : "net.alasc.symdpoly.generic.MomentSetBuilder.getElement", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#getElement(monoSelfAdjoint:net.alasc.symdpoly.generic.SingleMoment[E,M]):Int", "kind" : "def"}, {"label" : "getElement", "tail" : "(mono: SingleMoment[E, M], monoAdjoint: SingleMoment[E, M]): Tuple2Int", "member" : "net.alasc.symdpoly.generic.MomentSetBuilder.getElement", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#getElement(mono:net.alasc.symdpoly.generic.SingleMoment[E,M],monoAdjoint:net.alasc.symdpoly.generic.SingleMoment[E,M]):net.alasc.util.Tuple2Int", "kind" : "def"}, {"label" : "result", "tail" : "(): (MomentSet[E, M], Perm)", "member" : "net.alasc.symdpoly.generic.MomentSetBuilder.result", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#result():(net.alasc.symdpoly.generic.MomentSet[E,M],net.alasc.perms.Perm)", "kind" : "def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.generic.MomentSetBuilder.M", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#M:M", "kind" : "def"}, {"label" : "E", "tail" : "(): E", "member" : "net.alasc.symdpoly.generic.MomentSetBuilder.E", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#E:E", "kind" : "def"}, {"member" : "net.alasc.symdpoly.generic.MomentSetBuilder#<init>", "error" : "unsupported entity"}, {"label" : "n", "tail" : ": Int", "member" : "net.alasc.symdpoly.generic.MomentSetBuilder.n", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#n:Int", "kind" : "var"}, {"label" : "momentMap", "tail" : ": HashMap[SingleMoment[E, M], Int]", "member" : "net.alasc.symdpoly.generic.MomentSetBuilder.momentMap", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#momentMap:metal.mutable.HashMap[net.alasc.symdpoly.generic.SingleMoment[E,M],Int]", "kind" : "val"}, {"label" : "conjugate", "tail" : ": Buffer[Int]", "member" : "net.alasc.symdpoly.generic.MomentSetBuilder.conjugate", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#conjugate:metal.mutable.Buffer[Int]", "kind" : "val"}, {"label" : "sequence", "tail" : ": Buffer[SingleMoment[E, M]]", "member" : "net.alasc.symdpoly.generic.MomentSetBuilder.sequence", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#sequence:metal.mutable.Buffer[net.alasc.symdpoly.generic.SingleMoment[E,M]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "make", "tail" : "(arg0: Aux[E], arg1: Aux[M]): MomentSetBuilder[E, M]", "member" : "net.alasc.symdpoly.generic.MomentSetBuilder.make", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#make[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$5:shapeless.Witness.Aux[E],implicitevidence$6:shapeless.Witness.Aux[M]):net.alasc.symdpoly.generic.MomentSetBuilder[E,M]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/generic\/MomentSetBuilder.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.generic.Mono", "shortDescription" : "", "members_class" : [{"label" : "\/", "tail" : "(rhs: Phase)(d: DummyImplicit): Mono[M]", "member" : "net.alasc.symdpoly.generic.Mono.\/", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#\/(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):net.alasc.symdpoly.generic.Mono[M]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Phase)(d: DummyImplicit): Mono[M]", "member" : "net.alasc.symdpoly.generic.Mono.*", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#*(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):net.alasc.symdpoly.generic.Mono[M]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.generic.Mono#<init>", "error" : "unsupported entity"}, {"label" : "*", "tail" : "(rhs: MonoLike[M]): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.*", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#*(rhs:net.alasc.symdpoly.generic.MonoLike[M]):M#MonoType", "kind" : "def"}, {"label" : "pow", "tail" : "(rhs: Int): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.pow", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#pow(rhs:Int):M#MonoType", "kind" : "def"}, {"label" : "**", "tail" : "(rhs: Int): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.**", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#**(rhs:Int):M#MonoType", "kind" : "def"}, {"label" : "constant", "tail" : "(c: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.constant", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#constant(c:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#\/(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#\/(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#\/(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#*(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#*(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#*(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#-(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#-(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#-(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#-(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#+(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#+(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#+(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#+(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#-(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#+(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: M.PolyType): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#*(rhs:M#PolyType):M#PolyType", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.generic.PolyLike.isZero", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#isZero:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "degree", "tail" : "(): Int", "member" : "net.alasc.symdpoly.generic.Mono.degree", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#degree:Int", "kind" : "abstract def"}, {"label" : "toMono", "tail" : "(): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.toMono", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#toMono:M#MonoType", "kind" : "abstract def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.generic.MonoLike.M", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#M:M", "kind" : "abstract def"}, {"label" : "toPoly", "tail" : "(): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.toPoly", "link" : "net\/alasc\/symdpoly\/generic\/Mono.html#toPoly:M#PolyType", "kind" : "abstract def"}], "class" : "net\/alasc\/symdpoly\/generic\/Mono.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.generic.MonoidDef", "shortDescription" : "Describes a generic monomial monoid.", "object" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html", "members_class" : [{"label" : "symmetricEvaluator", "tail" : "(symmetryGroup0: Grp[PermutationType], equivalence0: Equivalence[MonoidDef.this.type]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.symmetricEvaluator", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#symmetricEvaluator(symmetryGroup0:net.alasc.finite.Grp[MonoidDef.this.PermutationType],equivalence0:net.alasc.symdpoly.evaluation.Equivalence[MonoidDef.this.type]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "symmetricEvaluator", "tail" : "(symmetryGroup: Grp[PermutationType]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.symmetricEvaluator", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#symmetricEvaluator(symmetryGroup:net.alasc.finite.Grp[MonoidDef.this.PermutationType]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "evaluator", "tail" : "(): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.evaluator", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#evaluator():net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "evaluator", "tail" : "(equivalence: Equivalence[MonoidDef.this.type]): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.evaluator", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#evaluator(equivalence:net.alasc.symdpoly.evaluation.Equivalence[MonoidDef.this.type]):net.alasc.symdpoly.evaluation.Evaluator.Aux[MonoidDef.this.type]", "kind" : "def"}, {"label" : "impWitness", "tail" : "(): Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.impWitness", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#impWitness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "implicit def"}, {"label" : "witness", "tail" : ": Aux[MonoidDef.this.type]", "member" : "net.alasc.symdpoly.generic.MonoidDef.witness", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#witness:shapeless.Witness.Aux[MonoidDef.this.type]", "kind" : "val"}, {"member" : "net.alasc.symdpoly.generic.MonoidDef#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "permutationClassTag", "tail" : "(): ClassTag[PermutationType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.permutationClassTag", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#permutationClassTag:scala.reflect.ClassTag[MonoidDef.this.PermutationType]", "kind" : "abstract def"}, {"label" : "permutationMonoAction", "tail" : "(): Action[MonoType, PermutationType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.permutationMonoAction", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#permutationMonoAction:spire.algebra.Action[MonoidDef.this.MonoType,MonoidDef.this.PermutationType]", "kind" : "abstract def"}, {"label" : "permutationFaithfulPermutationActionBuilder", "tail" : "(): FaithfulPermutationActionBuilder[PermutationType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.permutationFaithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#permutationFaithfulPermutationActionBuilder:net.alasc.finite.FaithfulPermutationActionBuilder[MonoidDef.this.PermutationType]", "kind" : "abstract def"}, {"label" : "permutationEq", "tail" : "(): Eq[PermutationType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.permutationEq", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#permutationEq:spire.algebra.Eq[MonoidDef.this.PermutationType]", "kind" : "abstract def"}, {"label" : "permutationGroup", "tail" : "(): Group[PermutationType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.permutationGroup", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#permutationGroup:spire.algebra.Group[MonoidDef.this.PermutationType]", "kind" : "abstract def"}, {"label" : "symmetryGroup", "tail" : "(): Grp[PermutationType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.symmetryGroup", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#symmetryGroup:net.alasc.finite.Grp[MonoidDef.this.PermutationType]", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.generic.MonoidDef.PermutationType", "error" : "unsupported entity"}, {"label" : "monomialToPolynomial", "tail" : "(m: MonoType): PolyType", "member" : "net.alasc.symdpoly.generic.MonoidDef.monomialToPolynomial", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#monomialToPolynomial(m:MonoidDef.this.MonoType):MonoidDef.this.PolyType", "kind" : "abstract def"}, {"label" : "constant", "tail" : "(c: Cyclo): PolyType", "member" : "net.alasc.symdpoly.generic.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#constant(c:cyclo.Cyclo):MonoidDef.this.PolyType", "kind" : "abstract def"}, {"label" : "constant", "tail" : "(r: Rational): PolyType", "member" : "net.alasc.symdpoly.generic.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#constant(r:spire.math.Rational):MonoidDef.this.PolyType", "kind" : "abstract def"}, {"label" : "constant", "tail" : "(i: Int): PolyType", "member" : "net.alasc.symdpoly.generic.MonoidDef.constant", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#constant(i:Int):MonoidDef.this.PolyType", "kind" : "abstract def"}, {"label" : "polyClassTag", "tail" : "(): ClassTag[PolyType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.polyClassTag", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#polyClassTag:scala.reflect.ClassTag[MonoidDef.this.PolyType]", "kind" : "abstract def"}, {"label" : "polyEq", "tail" : "(): Eq[PolyType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.polyEq", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#polyEq:spire.algebra.Eq[MonoidDef.this.PolyType]", "kind" : "abstract def"}, {"label" : "polyInvolution", "tail" : "(): Involution[PolyType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.polyInvolution", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#polyInvolution:spire.algebra.Involution[MonoidDef.this.PolyType]", "kind" : "abstract def"}, {"label" : "polyAssociativeAlgebra", "tail" : "(): FieldAssociativeAlgebra[PolyType, Cyclo]", "member" : "net.alasc.symdpoly.generic.MonoidDef.polyAssociativeAlgebra", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#polyAssociativeAlgebra:spire.algebra.FieldAssociativeAlgebra[MonoidDef.this.PolyType,cyclo.Cyclo]", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.generic.MonoidDef.PolyType", "error" : "unsupported entity"}, {"label" : "monoClassTag", "tail" : "(): ClassTag[MonoType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoClassTag", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#monoClassTag:scala.reflect.ClassTag[MonoidDef.this.MonoType]", "kind" : "abstract def"}, {"label" : "monoPhased", "tail" : "(): Phased[MonoType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoPhased", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#monoPhased:net.alasc.symdpoly.algebra.Phased[MonoidDef.this.MonoType]", "kind" : "abstract def"}, {"label" : "monoOrder", "tail" : "(): Order[MonoType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoOrder", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#monoOrder:spire.algebra.Order[MonoidDef.this.MonoType]", "kind" : "abstract def"}, {"label" : "monoInvolution", "tail" : "(): Involution[MonoType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoInvolution", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#monoInvolution:spire.algebra.Involution[MonoidDef.this.MonoType]", "kind" : "abstract def"}, {"label" : "monoMultiplicativeBinoid", "tail" : "(): MultiplicativeBinoid[MonoType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoMultiplicativeBinoid", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#monoMultiplicativeBinoid:net.alasc.symdpoly.algebra.MultiplicativeBinoid[MonoidDef.this.MonoType]", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): MonoType", "member" : "net.alasc.symdpoly.generic.MonoidDef.one", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#one:MonoidDef.this.MonoType", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): MonoType", "member" : "net.alasc.symdpoly.generic.MonoidDef.zero", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#zero:MonoidDef.this.MonoType", "kind" : "abstract def"}, {"member" : "net.alasc.symdpoly.generic.MonoidDef.MonoType", "error" : "unsupported entity"}, {"label" : "cyclotomicOrder", "tail" : "(): Int", "member" : "net.alasc.symdpoly.generic.MonoidDef.cyclotomicOrder", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html#cyclotomicOrder:Int", "kind" : "abstract def"}], "members_object" : [{"label" : "permutationClassTag", "tail" : "(arg0: Aux[M]): ClassTag[MonoidDef.permutationClassTag.M.PermutationType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.permutationClassTag", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#permutationClassTag[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$14:shapeless.Witness.Aux[M]):scala.reflect.ClassTag[M#PermutationType]", "kind" : "implicit def"}, {"label" : "permutationMonoAction", "tail" : "(arg0: Aux[M]): Action[MonoidDef.permutationMonoAction.M.MonoType, MonoidDef.permutationMonoAction.M.PermutationType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.permutationMonoAction", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#permutationMonoAction[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$13:shapeless.Witness.Aux[M]):spire.algebra.Action[M#MonoType,M#PermutationType]", "kind" : "implicit def"}, {"label" : "permutationFaithfulPermutationActionBuilder", "tail" : "(arg0: Aux[M]): FaithfulPermutationActionBuilder[MonoidDef.permutationFaithfulPermutationActionBuilder.M.PermutationType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.permutationFaithfulPermutationActionBuilder", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#permutationFaithfulPermutationActionBuilder[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$12:shapeless.Witness.Aux[M]):net.alasc.finite.FaithfulPermutationActionBuilder[M#PermutationType]", "kind" : "implicit def"}, {"label" : "permutationEq", "tail" : "(arg0: Aux[M]): Eq[MonoidDef.permutationEq.M.PermutationType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.permutationEq", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#permutationEq[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$11:shapeless.Witness.Aux[M]):spire.algebra.Eq[M#PermutationType]", "kind" : "implicit def"}, {"label" : "permutationGroup", "tail" : "(arg0: Aux[M]): Group[MonoidDef.permutationGroup.M.PermutationType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.permutationGroup", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#permutationGroup[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$10:shapeless.Witness.Aux[M]):spire.algebra.Group[M#PermutationType]", "kind" : "implicit def"}, {"label" : "polyClassTag", "tail" : "(arg0: Aux[M]): ClassTag[MonoidDef.polyClassTag.M.PolyType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.polyClassTag", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#polyClassTag[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$9:shapeless.Witness.Aux[M]):scala.reflect.ClassTag[M#PolyType]", "kind" : "implicit def"}, {"label" : "polyEq", "tail" : "(arg0: Aux[M]): Eq[MonoidDef.polyEq.M.PolyType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.polyEq", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#polyEq[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$8:shapeless.Witness.Aux[M]):spire.algebra.Eq[M#PolyType]", "kind" : "implicit def"}, {"label" : "polyInvolution", "tail" : "(arg0: Aux[M]): Involution[MonoidDef.polyInvolution.M.PolyType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.polyInvolution", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#polyInvolution[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$7:shapeless.Witness.Aux[M]):spire.algebra.Involution[M#PolyType]", "kind" : "implicit def"}, {"label" : "polyAssociativeAlgebra", "tail" : "(arg0: Aux[M]): FieldAssociativeAlgebra[MonoidDef.polyAssociativeAlgebra.M.PolyType, Cyclo]", "member" : "net.alasc.symdpoly.generic.MonoidDef.polyAssociativeAlgebra", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#polyAssociativeAlgebra[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$6:shapeless.Witness.Aux[M]):spire.algebra.FieldAssociativeAlgebra[M#PolyType,cyclo.Cyclo]", "kind" : "implicit def"}, {"label" : "monoClassTag", "tail" : "(arg0: Aux[M]): ClassTag[MonoidDef.monoClassTag.M.MonoType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoClassTag", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#monoClassTag[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$5:shapeless.Witness.Aux[M]):scala.reflect.ClassTag[M#MonoType]", "kind" : "implicit def"}, {"label" : "monoPhased", "tail" : "(arg0: Aux[M]): Phased[MonoidDef.monoPhased.M.MonoType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoPhased", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#monoPhased[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$4:shapeless.Witness.Aux[M]):net.alasc.symdpoly.algebra.Phased[M#MonoType]", "kind" : "implicit def"}, {"label" : "monoOrder", "tail" : "(arg0: Aux[M]): Order[MonoidDef.monoOrder.M.MonoType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoOrder", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#monoOrder[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$3:shapeless.Witness.Aux[M]):spire.algebra.Order[M#MonoType]", "kind" : "implicit def"}, {"label" : "monoInvolution", "tail" : "(arg0: Aux[M]): Involution[MonoidDef.monoInvolution.M.MonoType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoInvolution", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#monoInvolution[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$2:shapeless.Witness.Aux[M]):spire.algebra.Involution[M#MonoType]", "kind" : "implicit def"}, {"label" : "monoMultiplicativeBinoid", "tail" : "(arg0: Aux[M]): MultiplicativeBinoid[MonoidDef.monoMultiplicativeBinoid.M.MonoType]", "member" : "net.alasc.symdpoly.generic.MonoidDef.monoMultiplicativeBinoid", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#monoMultiplicativeBinoid[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$1:shapeless.Witness.Aux[M]):net.alasc.symdpoly.algebra.MultiplicativeBinoid[M#MonoType]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MonoidDef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/generic\/MonoidDef.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.generic.MonoLike", "members_trait" : [{"label" : "*", "tail" : "(rhs: MonoLike[M]): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.*", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#*(rhs:net.alasc.symdpoly.generic.MonoLike[M]):M#MonoType", "kind" : "def"}, {"label" : "pow", "tail" : "(rhs: Int): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.pow", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#pow(rhs:Int):M#MonoType", "kind" : "def"}, {"label" : "**", "tail" : "(rhs: Int): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.**", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#**(rhs:Int):M#MonoType", "kind" : "def"}, {"label" : "constant", "tail" : "(c: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.constant", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#constant(c:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#\/(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#\/(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#\/(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#*(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#*(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#*(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#-(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#-(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#-(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#-(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#+(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#+(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#+(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#+(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#-(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#+(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: M.PolyType): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#*(rhs:M#PolyType):M#PolyType", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.generic.PolyLike.isZero", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#isZero:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toMono", "tail" : "(): M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.toMono", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#toMono:M#MonoType", "kind" : "abstract def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.generic.MonoLike.M", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#M:M", "kind" : "abstract def"}, {"label" : "toPoly", "tail" : "(): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.toPoly", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike.html#toPoly:M#PolyType", "kind" : "abstract def"}], "shortDescription" : "Mixin trait for types that can be converted to a M#MonoType for a monoid M.", "object" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html", "members_object" : [{"label" : "toMono", "tail" : "(monoLike: MonoLike[M]): MonoLike.toMono.M.MonoType", "member" : "net.alasc.symdpoly.generic.MonoLike.toMono", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#toMono[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](monoLike:net.alasc.symdpoly.generic.MonoLike[M]):M#MonoType", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/MonoLike$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/generic\/MonoLike.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.generic.Permutation", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/Permutation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "A Permutation relabels the operator variables of monomials, possibly with a phase.", "object" : "net\/alasc\/symdpoly\/generic\/Permutation$.html", "members_object" : [{"label" : "evaluatedMonoAction", "tail" : "(arg0: Aux[E], action: Action[Permutation.evaluatedMonoAction.M.MonoType, Permutation[M]]): Action[SingleMoment[E, M], Permutation[M]]", "member" : "net.alasc.symdpoly.generic.Permutation.evaluatedMonoAction", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#evaluatedMonoAction[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$2:shapeless.Witness.Aux[E],implicitaction:spire.algebra.Action[M#MonoType,net.alasc.symdpoly.generic.Permutation[M]]):spire.algebra.Action[net.alasc.symdpoly.generic.SingleMoment[E,M],net.alasc.symdpoly.generic.Permutation[M]]", "kind" : "implicit def"}, {"label" : "phasedIntAction", "tail" : "(set: OrderedSet[Permutation.phasedIntAction.M.MonoType])(arg0: Aux[M], group: Group[Permutation[M]], action: Action[Permutation.phasedIntAction.M.MonoType, Permutation[M]]): Action[PhasedInt, Permutation[M]]", "member" : "net.alasc.symdpoly.generic.Permutation.phasedIntAction", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#phasedIntAction[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](set:net.alasc.symdpoly.util.OrderedSet[M#MonoType])(implicitevidence$1:shapeless.Witness.Aux[M],implicitgroup:spire.algebra.Group[net.alasc.symdpoly.generic.Permutation[M]],implicitaction:spire.algebra.Action[M#MonoType,net.alasc.symdpoly.generic.Permutation[M]]):spire.algebra.Action[net.alasc.symdpoly.math.PhasedInt,net.alasc.symdpoly.generic.Permutation[M]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/Permutation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/generic\/Permutation.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.generic.Poly", "shortDescription" : "Polynomial written as a linear combination of monomials described by the monoid M.", "members_class" : [{"label" : "\/", "tail" : "(rhs: Phase)(d: DummyImplicit): Poly[M]", "member" : "net.alasc.symdpoly.generic.Poly.\/", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#\/(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):net.alasc.symdpoly.generic.Poly[M]", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Phase)(d: DummyImplicit): Poly[M]", "member" : "net.alasc.symdpoly.generic.Poly.*", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#*(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):net.alasc.symdpoly.generic.Poly[M]", "kind" : "def"}, {"label" : "invariantSubgroupOf", "tail" : "(grp: Grp[M.PermutationType]): Grp[M.PermutationType]", "member" : "net.alasc.symdpoly.generic.Poly.invariantSubgroupOf", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#invariantSubgroupOf(grp:net.alasc.finite.Grp[M#PermutationType]):net.alasc.finite.Grp[M#PermutationType]", "kind" : "def"}, {"label" : "toPoly", "tail" : "(): M.PolyType", "member" : "net.alasc.symdpoly.generic.Poly.toPoly", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#toPoly:M#PolyType", "kind" : "def"}, {"member" : "net.alasc.symdpoly.generic.Poly#<init>", "error" : "unsupported entity"}, {"label" : "constant", "tail" : "(c: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.constant", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#constant(c:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#\/(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#\/(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#\/(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#*(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#*(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#*(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#-(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#-(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#-(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#-(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#+(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#+(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#+(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#+(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#-(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#+(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: M.PolyType): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#*(rhs:M#PolyType):M#PolyType", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.generic.PolyLike.isZero", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#isZero:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "string", "tail" : "(leftBracket: String, rightBracket: String): String", "member" : "net.alasc.symdpoly.generic.Poly.string", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#string(leftBracket:String,rightBracket:String):String", "kind" : "abstract def"}, {"label" : "degree", "tail" : "(): Int", "member" : "net.alasc.symdpoly.generic.Poly.degree", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#degree:Int", "kind" : "abstract def"}, {"label" : "coeff", "tail" : "(mono: M.MonoType): Cyclo", "member" : "net.alasc.symdpoly.generic.Poly.coeff", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#coeff(mono:M#MonoType):cyclo.Cyclo", "kind" : "abstract def"}, {"label" : "coeff", "tail" : "(i: Int): Cyclo", "member" : "net.alasc.symdpoly.generic.Poly.coeff", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#coeff(i:Int):cyclo.Cyclo", "kind" : "abstract def"}, {"label" : "monomial", "tail" : "(i: Int): M.MonoType", "member" : "net.alasc.symdpoly.generic.Poly.monomial", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#monomial(i:Int):M#MonoType", "kind" : "abstract def"}, {"label" : "nTerms", "tail" : "(): Int", "member" : "net.alasc.symdpoly.generic.Poly.nTerms", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#nTerms:Int", "kind" : "abstract def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.generic.PolyLike.M", "link" : "net\/alasc\/symdpoly\/generic\/Poly.html#M:M", "kind" : "abstract def"}], "class" : "net\/alasc\/symdpoly\/generic\/Poly.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.generic.PolyLike", "members_trait" : [{"label" : "constant", "tail" : "(c: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.constant", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#constant(c:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#\/(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#\/(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.\/", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#\/(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#*(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#*(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#*(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#-(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#-(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#-(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#-(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Cyclo): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#+(rhs:cyclo.Cyclo):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Phase)(d: DummyImplicit): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#+(rhs:net.alasc.symdpoly.math.Phase)(implicitd:DummyImplicit):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Rational): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#+(rhs:spire.math.Rational):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: Int): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#+(rhs:Int):M#PolyType", "kind" : "def"}, {"label" : "-", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.-", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#-(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "+", "tail" : "(rhs: PolyLike[M]): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.+", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#+(rhs:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: M.PolyType): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.*", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#*(rhs:M#PolyType):M#PolyType", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.generic.PolyLike.isZero", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#isZero:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toPoly", "tail" : "(): M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.toPoly", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#toPoly:M#PolyType", "kind" : "abstract def"}, {"label" : "M", "tail" : "(): M", "member" : "net.alasc.symdpoly.generic.PolyLike.M", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike.html#M:M", "kind" : "abstract def"}], "shortDescription" : "Mixin trait for types that can be converted to a M#PolyType in the monoid M.", "object" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html", "members_object" : [{"label" : "toPoly", "tail" : "(polyLike: PolyLike[M]): PolyLike.toPoly.M.PolyType", "member" : "net.alasc.symdpoly.generic.PolyLike.toPoly", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#toPoly[M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](polyLike:net.alasc.symdpoly.generic.PolyLike[M]):M#PolyType", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/PolyLike$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "net\/alasc\/symdpoly\/generic\/PolyLike.html", "kind" : "trait"}, {"name" : "net.alasc.symdpoly.generic.SingleMoment", "shortDescription" : "Evaluated monomial, which represents an equivalence class under an evaluator.", "object" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html", "members_class" : [{"label" : "expandIn", "tail" : "(relaxation: Relaxation[E, E.Mono], factor: Cyclo): Seq[BasisTerm]", "member" : "net.alasc.symdpoly.generic.SingleMoment.expandIn", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#expandIn(relaxation:net.alasc.symdpoly.Relaxation[E,M],factor:cyclo.Cyclo):Seq[net.alasc.symdpoly.sdp.BasisTerm]", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.generic.SingleMoment.isZero", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#isZero:Boolean", "kind" : "def"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.generic.SingleMoment.equals", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#equals(any:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.generic.SingleMoment.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#hashCode():Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.generic.SingleMoment.toString", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#toString():String", "kind" : "def"}, {"label" : "toPoly", "tail" : "(): LinearMoment[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.SingleMoment.toPoly", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#toPoly:net.alasc.symdpoly.generic.LinearMoment[E,M]", "kind" : "def"}, {"label" : "M", "tail" : "(): E.Mono", "member" : "net.alasc.symdpoly.generic.SingleMoment.M", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#M:M", "kind" : "def"}, {"label" : "E", "tail" : "(): E", "member" : "net.alasc.symdpoly.generic.SingleMoment.E", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#E:E", "kind" : "def"}, {"member" : "net.alasc.symdpoly.generic.SingleMoment#<init>", "error" : "unsupported entity"}, {"label" : "normalForm", "tail" : ": M.MonoType", "member" : "net.alasc.symdpoly.generic.SingleMoment.normalForm", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#normalForm:M#MonoType", "kind" : "val"}, {"label" : "minimize", "tail" : "(E: Aux[E], M: Aux[E.Mono]): Optimization[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.minimize", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#minimize(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Optimization[E,M]", "kind" : "def"}, {"label" : "maximize", "tail" : "(E: Aux[E], M: Aux[E.Mono]): Optimization[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.maximize", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#maximize(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.Optimization[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: Cyclo)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#=!(rhs:cyclo.Cyclo)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: Rational)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#=!(rhs:spire.math.Rational)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: Int)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#=!(rhs:Int)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "=!", "tail" : "(rhs: LinearMomentLike[E, E.Mono])(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#=!(rhs:net.alasc.symdpoly.generic.LinearMomentLike[E,M])(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: Cyclo)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#>=!(rhs:cyclo.Cyclo)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: Rational)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#>=!(rhs:spire.math.Rational)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: Int)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#>=!(rhs:Int)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : ">=!", "tail" : "(rhs: LinearMomentLike[E, E.Mono])(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.>=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#>=!(rhs:net.alasc.symdpoly.generic.LinearMomentLike[E,M])(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: Cyclo)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#<=!(rhs:cyclo.Cyclo)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: Rational)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#<=!(rhs:spire.math.Rational)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: Int)(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#<=!(rhs:Int)(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "<=!", "tail" : "(rhs: LinearMomentLike[E, E.Mono])(E: Aux[E], M: Aux[E.Mono]): ScalarConstraint[E, E.Mono]", "member" : "net.alasc.symdpoly.generic.LinearMomentLike.<=!", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#<=!(rhs:net.alasc.symdpoly.generic.LinearMomentLike[E,M])(implicitE:shapeless.Witness.Aux[E],implicitM:shapeless.Witness.Aux[M]):net.alasc.symdpoly.ScalarConstraint[E,M]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "evaluatedMonoAction", "tail" : "(arg0: Aux[E]): Action[SingleMoment[E, M], SingleMoment.evaluatedMonoAction.M.PermutationType]", "member" : "net.alasc.symdpoly.generic.SingleMoment.evaluatedMonoAction", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#evaluatedMonoAction[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$5:shapeless.Witness.Aux[E]):spire.algebra.Action[net.alasc.symdpoly.generic.SingleMoment[E,M],M#PermutationType]", "kind" : "implicit def"}, {"label" : "phased", "tail" : "(arg0: Aux[E]): Phased[SingleMoment[E, M]]", "member" : "net.alasc.symdpoly.generic.SingleMoment.phased", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#phased[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$4:shapeless.Witness.Aux[E]):net.alasc.symdpoly.algebra.Phased[net.alasc.symdpoly.generic.SingleMoment[E,M]]", "kind" : "implicit def"}, {"label" : "order", "tail" : "(arg0: Aux[E]): Order[SingleMoment[E, M]]", "member" : "net.alasc.symdpoly.generic.SingleMoment.order", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#order[E<:net.alasc.symdpoly.evaluation.Evaluator.Aux[M]withSingleton,M<:net.alasc.symdpoly.generic.MonoidDefwithSingleton](implicitevidence$3:shapeless.Witness.Aux[E]):spire.algebra.Order[net.alasc.symdpoly.generic.SingleMoment[E,M]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/generic\/SingleMoment$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/generic\/SingleMoment.html", "kind" : "class"}], "net.alasc.symdpoly.math" : [{"name" : "net.alasc.symdpoly.math.GenPerm", "shortDescription" : "A generalized permutation is an element of the generalized symmetric group, and combinesa permutation and a multiplication by a diagonal matrix whose entries are rational rootsof unity.", "object" : "net\/alasc\/symdpoly\/math\/GenPerm$.html", "members_object" : [{"label" : "commonRootOrder", "tail" : "(perms: Iterable[GenPerm]): Int", "member" : "net.alasc.symdpoly.math.GenPerm.commonRootOrder", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#commonRootOrder(perms:Iterable[net.alasc.symdpoly.math.GenPerm]):Int", "kind" : "def"}, {"label" : "generalizedSymmetricGroup", "tail" : "(cyclotomicOrder: Int, n: Int)(gg: GrpGroup[GenPerm]): Grp[GenPerm]", "member" : "net.alasc.symdpoly.math.GenPerm.generalizedSymmetricGroup", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#generalizedSymmetricGroup(cyclotomicOrder:Int,n:Int)(implicitgg:net.alasc.finite.GrpGroup[net.alasc.symdpoly.math.GenPerm]):net.alasc.finite.Grp[net.alasc.symdpoly.math.GenPerm]", "kind" : "def"}, {"label" : "phasedIntAction", "tail" : ": Action[PhasedInt, GenPerm]", "member" : "net.alasc.symdpoly.math.GenPerm.phasedIntAction", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#phasedIntAction:spire.algebra.Action[net.alasc.symdpoly.math.PhasedInt,net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit val"}, {"label" : "equ", "tail" : "(): Eq[GenPerm]", "member" : "net.alasc.symdpoly.math.GenPerm.equ", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#equ:spire.algebra.Eq[net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit def"}, {"label" : "group", "tail" : "(): Group[GenPerm]", "member" : "net.alasc.symdpoly.math.GenPerm.group", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#group:spire.algebra.Group[net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit def"}, {"label" : "fpab", "tail" : ": FaithfulPermutationActionBuilder[GenPerm]", "member" : "net.alasc.symdpoly.math.GenPerm.fpab", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#fpab:net.alasc.finite.FaithfulPermutationActionBuilder[net.alasc.symdpoly.math.GenPerm]", "kind" : "implicit val"}, {"label" : "id", "tail" : ": GenPerm", "member" : "net.alasc.symdpoly.math.GenPerm.id", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#id:net.alasc.symdpoly.math.GenPerm", "kind" : "val"}, {"label" : "realNaturalRepresentation", "tail" : "(n: Int): Morphism[GenPerm, Mat[Double], Group]", "member" : "net.alasc.symdpoly.math.GenPerm.realNaturalRepresentation", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#realNaturalRepresentation(n:Int):net.alasc.symdpoly.algebra.Morphism[net.alasc.symdpoly.math.GenPerm,scalin.immutable.Mat[Double],spire.algebra.Group]", "kind" : "def"}, {"label" : "restrictedRealNaturalRepresentation", "tail" : "(n: Int): Morphism[GenPerm, Mat[Double], Group]", "member" : "net.alasc.symdpoly.math.GenPerm.restrictedRealNaturalRepresentation", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#restrictedRealNaturalRepresentation(n:Int):net.alasc.symdpoly.algebra.Morphism[net.alasc.symdpoly.math.GenPerm,scalin.immutable.Mat[Double],spire.algebra.Group]", "kind" : "def"}, {"label" : "naturalRepresentation", "tail" : "(n: Int): Morphism[GenPerm, Mat[Cyclo], Group]", "member" : "net.alasc.symdpoly.math.GenPerm.naturalRepresentation", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#naturalRepresentation(n:Int):net.alasc.symdpoly.algebra.Morphism[net.alasc.symdpoly.math.GenPerm,scalin.immutable.Mat[cyclo.Cyclo],spire.algebra.Group]", "kind" : "def"}, {"label" : "fromActionOnOrderedSet", "tail" : "(set: OrderedSet[A], g: G)(arg0: Order[A], arg1: Phased[A], action: Action[A, G]): GenPerm", "member" : "net.alasc.symdpoly.math.GenPerm.fromActionOnOrderedSet", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#fromActionOnOrderedSet[A,G](set:net.alasc.symdpoly.util.OrderedSet[A],g:G)(implicitevidence$1:spire.algebra.Order[A],implicitevidence$2:net.alasc.symdpoly.algebra.Phased[A],implicitaction:spire.algebra.Action[A,G]):net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPerm$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "truncate", "tail" : "(n: Int): GenPerm", "member" : "net.alasc.symdpoly.math.GenPerm.truncate", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#truncate(n:Int):net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "inverse", "tail" : "(): GenPerm", "member" : "net.alasc.symdpoly.math.GenPerm.inverse", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#inverse:net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "|+|", "tail" : "(rhs: GenPerm): GenPerm", "member" : "net.alasc.symdpoly.math.GenPerm.|+|", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#|+|(rhs:net.alasc.symdpoly.math.GenPerm):net.alasc.symdpoly.math.GenPerm", "kind" : "def"}, {"label" : "largestMovedPoint", "tail" : "(): NNOption", "member" : "net.alasc.symdpoly.math.GenPerm.largestMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#largestMovedPoint:net.alasc.util.NNOption", "kind" : "def"}, {"label" : "invImage", "tail" : "(pi: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.GenPerm.invImage", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#invImage(pi:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "image", "tail" : "(pi: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.GenPerm.image", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#image(pi:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.GenPerm.hashCode", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(any: Any): Boolean", "member" : "net.alasc.symdpoly.math.GenPerm.equals", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#equals(any:Any):Boolean", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.GenPerm#<init>", "error" : "unsupported entity"}, {"label" : "phases", "tail" : ": Phases", "member" : "net.alasc.symdpoly.math.GenPerm.phases", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#phases:net.alasc.symdpoly.math.Phases", "kind" : "val"}, {"label" : "perm", "tail" : ": Perm", "member" : "net.alasc.symdpoly.math.GenPerm.perm", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#perm:net.alasc.perms.Perm", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPerm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/math\/GenPerm.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction", "shortDescription" : "Permutation action valid for generalized permutation acting on the given domainSize, for the specified cyclotomicorder rootOrder.", "members_case class" : [{"label" : "actl", "tail" : "(g: GenPerm, p: Int): Int", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.actl", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#actl(g:net.alasc.symdpoly.math.GenPerm,p:Int):Int", "kind" : "def"}, {"label" : "actr", "tail" : "(p: Int, g: GenPerm): Int", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.actr", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#actr(p:Int,g:net.alasc.symdpoly.math.GenPerm):Int", "kind" : "def"}, {"label" : "movedPointsUpperBound", "tail" : "(g: GenPerm): NNOption", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.movedPointsUpperBound", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#movedPointsUpperBound(g:net.alasc.symdpoly.math.GenPerm):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "findMovedPoint", "tail" : "(g: GenPerm): NNOption", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.findMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#findMovedPoint(g:net.alasc.symdpoly.math.GenPerm):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "isFaithful", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.isFaithful", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#isFaithful:Boolean", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction#<init>", "error" : "unsupported entity"}, {"label" : "rootOrder", "tail" : ": Int", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.rootOrder", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#rootOrder:Int", "kind" : "val"}, {"label" : "domainSize", "tail" : ": Int", "member" : "net.alasc.symdpoly.math.GenPermFaithfulPermutationAction.domainSize", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#domainSize:Int", "kind" : "val"}, {"label" : "largestMovedPoint", "tail" : "(generators: Iterable[GenPerm]): NNOption", "member" : "net.alasc.algebra.PermutationAction.largestMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#largestMovedPoint(generators:Iterable[G]):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "smallestMovedPoint", "tail" : "(generators: Iterable[GenPerm]): NNOption", "member" : "net.alasc.algebra.PermutationAction.smallestMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#smallestMovedPoint(generators:Iterable[G]):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "hasSameAction", "tail" : "(g: GenPerm, q: Q)(Q: PermutationAction[Q]): Boolean", "member" : "net.alasc.algebra.PermutationAction.hasSameAction", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#hasSameAction[Q](g:G,q:Q)(implicitQ:net.alasc.algebra.PermutationAction[Q]):Boolean", "kind" : "def"}, {"label" : "toPerm", "tail" : "(g: GenPerm): Perm", "member" : "net.alasc.algebra.PermutationAction.toPerm", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#toPerm(g:G):net.alasc.perms.Perm", "kind" : "def"}, {"label" : "images", "tail" : "(g: GenPerm, n: Int): Seq[Int]", "member" : "net.alasc.algebra.PermutationAction.images", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#images(g:G,n:Int):Seq[Int]", "kind" : "def"}, {"label" : "orbit", "tail" : "(g: GenPerm, i: Int): Set[Int]", "member" : "net.alasc.algebra.PermutationAction.orbit", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#orbit(g:G,i:Int):Set[Int]", "kind" : "def"}, {"label" : "permutationOrder", "tail" : "(g: GenPerm): SafeLong", "member" : "net.alasc.algebra.PermutationAction.permutationOrder", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#permutationOrder(g:G):spire.math.SafeLong", "kind" : "def"}, {"label" : "cycleStructure", "tail" : "(g: GenPerm): Map[Int, Int]", "member" : "net.alasc.algebra.PermutationAction.cycleStructure", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#cycleStructure(g:G):Map[Int,Int]", "kind" : "def"}, {"label" : "signPerm", "tail" : "(g: GenPerm): Int", "member" : "net.alasc.algebra.PermutationAction.signPerm", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#signPerm(g:G):Int", "kind" : "def"}, {"label" : "smallestMovedPoint", "tail" : "(g: GenPerm): NNOption", "member" : "net.alasc.algebra.PermutationAction.smallestMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#smallestMovedPoint(g:G):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "largestMovedPoint", "tail" : "(g: GenPerm): NNOption", "member" : "net.alasc.algebra.PermutationAction.largestMovedPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#largestMovedPoint(g:G):net.alasc.util.NNOption", "kind" : "def"}, {"label" : "movedPoints", "tail" : "(g: GenPerm): Set[Int]", "member" : "net.alasc.algebra.PermutationAction.movedPoints", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#movedPoints(g:G):Set[Int]", "kind" : "def"}, {"label" : "nMovedPoints", "tail" : "(g: GenPerm): Int", "member" : "net.alasc.algebra.PermutationAction.nMovedPoints", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#nMovedPoints(g:G):Int", "kind" : "def"}, {"label" : "movesPoint", "tail" : "(g: GenPerm, i: Int): Boolean", "member" : "net.alasc.algebra.PermutationAction.movesPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#movesPoint(g:G,i:Int):Boolean", "kind" : "def"}, {"label" : "movesAnyPoint", "tail" : "(g: GenPerm): Boolean", "member" : "net.alasc.algebra.PermutationAction.movesAnyPoint", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#movesAnyPoint(g:G):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/math\/GenPermFaithfulPermutationAction.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.math.GrpDecomposition", "shortDescription" : "Decomposition of a group as the cartesian product of a sequence of sets, such that every group element can be writtenas d(1)(i1) |+| d(2)(i2) |+| d(3)(i3) ...", "object" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html", "members_class" : [{"member" : "net.alasc.symdpoly.math.GrpDecomposition#<init>", "error" : "unsupported entity"}, {"label" : "transversals", "tail" : ": List[Vector[G]]", "member" : "net.alasc.symdpoly.math.GrpDecomposition.transversals", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#transversals:List[Vector[G]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : "(): GrpDecomposition[G]", "member" : "net.alasc.symdpoly.math.GrpDecomposition.empty", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#empty[G]:net.alasc.symdpoly.math.GrpDecomposition[G]", "kind" : "def"}, {"label" : "apply", "tail" : "(grp: Grp[G])(G: GrpChainPermutationAction[G]): GrpDecomposition[G]", "member" : "net.alasc.symdpoly.math.GrpDecomposition.apply", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#apply[G](grp:net.alasc.finite.Grp[G])(implicitG:net.alasc.bsgs.GrpChainPermutationAction[G]):net.alasc.symdpoly.math.GrpDecomposition[G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GrpDecomposition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/GrpDecomposition.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.math.GrpMonomialRepresentation", "shortDescription" : "Describes a finite group and one of its monomial unitary representations.", "object" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html", "members_object" : [{"label" : "fromActionOnOrderedSet", "tail" : "(set: OrderedSet[A], grp: Grp[G])(arg0: ClassTag[A], arg1: Order[A], arg2: Phased[A], arg3: GrpPermutationAction[G], action: Action[A, G], mfgi: MorphismFromGeneratorImages[G, GenPerm]): GrpMonomialRepresentation[G]", "member" : "net.alasc.symdpoly.math.GrpMonomialRepresentation.fromActionOnOrderedSet", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#fromActionOnOrderedSet[A,G](set:net.alasc.symdpoly.util.OrderedSet[A],grp:net.alasc.finite.Grp[G])(implicitevidence$3:scala.reflect.ClassTag[A],implicitevidence$4:spire.algebra.Order[A],implicitevidence$5:net.alasc.symdpoly.algebra.Phased[A],implicitevidence$6:net.alasc.finite.GrpPermutationAction[G],implicitaction:spire.algebra.Action[A,G],implicitmfgi:net.alasc.symdpoly.algebra.MorphismFromGeneratorImages[G,net.alasc.symdpoly.math.GenPerm]):net.alasc.symdpoly.math.GrpMonomialRepresentation[G]", "kind" : "def"}, {"label" : "trivial", "tail" : "(n: Int)(arg0: Eq[G], arg1: Group[G]): GrpMonomialRepresentation[G]", "member" : "net.alasc.symdpoly.math.GrpMonomialRepresentation.trivial", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#trivial[G](n:Int)(implicitevidence$1:spire.algebra.Eq[G],implicitevidence$2:spire.algebra.Group[G]):net.alasc.symdpoly.math.GrpMonomialRepresentation[G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "onPermutationGroup", "tail" : ": GrpMonomialRepresentation[Perm]", "member" : "net.alasc.symdpoly.math.GrpMonomialRepresentation.onPermutationGroup", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#onPermutationGroup:net.alasc.symdpoly.math.GrpMonomialRepresentation[net.alasc.perms.Perm]", "kind" : "lazy val"}, {"label" : "niceMorphism", "tail" : ": InjectiveMorphism[G, Perm, Group]", "member" : "net.alasc.symdpoly.math.GrpMonomialRepresentation.niceMorphism", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#niceMorphism:net.alasc.symdpoly.algebra.InjectiveMorphism[G,net.alasc.perms.Perm,spire.algebra.Group]", "kind" : "lazy val"}, {"label" : "generatorImages", "tail" : "(): Seq[GenPerm]", "member" : "net.alasc.symdpoly.math.GrpMonomialRepresentation.generatorImages", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#generatorImages:Seq[net.alasc.symdpoly.math.GenPerm]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.GrpMonomialRepresentation#<init>", "error" : "unsupported entity"}, {"label" : "representation", "tail" : ": Morphism[G, GenPerm, Group]", "member" : "net.alasc.symdpoly.math.GrpMonomialRepresentation.representation", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#representation:net.alasc.symdpoly.algebra.Morphism[G,net.alasc.symdpoly.math.GenPerm,spire.algebra.Group]", "kind" : "val"}, {"label" : "n", "tail" : ": Int", "member" : "net.alasc.symdpoly.math.GrpMonomialRepresentation.n", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#n:Int", "kind" : "val"}, {"label" : "grp", "tail" : ": Grp[G]", "member" : "net.alasc.symdpoly.math.GrpMonomialRepresentation.grp", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#grp:net.alasc.finite.Grp[G]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "net\/alasc\/symdpoly\/math\/GrpMonomialRepresentation.html", "kind" : "case class"}, {"name" : "net.alasc.symdpoly.math.Phase", "shortDescription" : "Represents a root of unity exp(2*pi*k\/n), where k = 0, ..., n - 1.", "object" : "net\/alasc\/symdpoly\/math\/Phase$.html", "members_class" : [{"label" : "toDouble", "tail" : "(): Double", "member" : "net.alasc.symdpoly.math.Phase.toDouble", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#toDouble:Double", "kind" : "def"}, {"label" : "toCyclo", "tail" : "(): Cyclo", "member" : "net.alasc.symdpoly.math.Phase.toCyclo", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#toCyclo:cyclo.Cyclo", "kind" : "def"}, {"label" : "compareTo", "tail" : "(rhs: Phase): Int", "member" : "net.alasc.symdpoly.math.Phase.compareTo", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#compareTo(rhs:net.alasc.symdpoly.math.Phase):Int", "kind" : "def"}, {"label" : "unary_-", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.math.Phase.unary_-", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#unary_-:net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "adjoint", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.math.Phase.adjoint", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#adjoint:net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "\/", "tail" : "(rhs: Phase): Phase", "member" : "net.alasc.symdpoly.math.Phase.\/", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#\/(rhs:net.alasc.symdpoly.math.Phase):net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "reciprocal", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.math.Phase.reciprocal", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#reciprocal:net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "*", "tail" : "(rhs: Phase): Phase", "member" : "net.alasc.symdpoly.math.Phase.*", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#*(rhs:net.alasc.symdpoly.math.Phase):net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "numeratorIn", "tail" : "(den: Int): Int", "member" : "net.alasc.symdpoly.math.Phase.numeratorIn", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#numeratorIn(den:Int):Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.math.Phase.toString", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#toString():String", "kind" : "def"}, {"label" : "toInt", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.Phase.toInt", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#toInt:Int", "kind" : "def"}, {"label" : "isReal", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.Phase.isReal", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#isReal:Boolean", "kind" : "def"}, {"label" : "isMinusI", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.Phase.isMinusI", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#isMinusI:Boolean", "kind" : "def"}, {"label" : "isI", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.Phase.isI", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#isI:Boolean", "kind" : "def"}, {"label" : "isMinusOne", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.Phase.isMinusOne", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#isMinusOne:Boolean", "kind" : "def"}, {"label" : "isOne", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.Phase.isOne", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#isOne:Boolean", "kind" : "def"}, {"label" : "n", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.Phase.n", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#n:Int", "kind" : "def"}, {"label" : "k", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.Phase.k", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#k:Int", "kind" : "def"}, {"label" : "_2", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.Phase._2", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#_2:Int", "kind" : "def"}, {"label" : "_1", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.Phase._1", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#_1:Int", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.Phase.isEmpty", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#isEmpty:Boolean", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.Phase#<init>", "error" : "unsupported entity"}, {"label" : "encoding", "tail" : ": Int", "member" : "net.alasc.symdpoly.math.Phase.encoding", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#encoding:Int", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "net\/alasc\/symdpoly\/math\/Phase.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "net\/alasc\/symdpoly\/math\/Phase.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "arb", "tail" : ": Arbitrary[Phase]", "member" : "net.alasc.symdpoly.math.Phase.arb", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#arb:org.scalacheck.Arbitrary[net.alasc.symdpoly.math.Phase]", "kind" : "implicit val"}, {"label" : "nonZero", "tail" : "(): Predicate[Phase]", "member" : "net.alasc.symdpoly.math.Phase.nonZero", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#nonZero:org.typelevel.discipline.Predicate[net.alasc.symdpoly.math.Phase]", "kind" : "implicit def"}, {"label" : "genForDenominator", "tail" : "(denominator: Int): Gen[Phase]", "member" : "net.alasc.symdpoly.math.Phase.genForDenominator", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#genForDenominator(denominator:Int):org.scalacheck.Gen[net.alasc.symdpoly.math.Phase]", "kind" : "def"}, {"label" : "gen", "tail" : "(): Gen[Phase]", "member" : "net.alasc.symdpoly.math.Phase.gen", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#gen:org.scalacheck.Gen[net.alasc.symdpoly.math.Phase]", "kind" : "def"}, {"label" : "involution", "tail" : "(): Involution[Phase]", "member" : "net.alasc.symdpoly.math.Phase.involution", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#involution:spire.algebra.Involution[net.alasc.symdpoly.math.Phase]", "kind" : "implicit def"}, {"label" : "multiplicativeAbGroup", "tail" : "(): MultiplicativeAbGroup[Phase]", "member" : "net.alasc.symdpoly.math.Phase.multiplicativeAbGroup", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#multiplicativeAbGroup:spire.algebra.MultiplicativeAbGroup[net.alasc.symdpoly.math.Phase]", "kind" : "implicit def"}, {"label" : "order", "tail" : "(): Order[Phase]", "member" : "net.alasc.symdpoly.math.Phase.order", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#order:spire.algebra.Order[net.alasc.symdpoly.math.Phase]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(k: Int, n: Int): Phase", "member" : "net.alasc.symdpoly.math.Phase.apply", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#apply(k:Int,n:Int):net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "fromEncoding", "tail" : "(encoding: Int): Phase", "member" : "net.alasc.symdpoly.math.Phase.fromEncoding", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#fromEncoding(encoding:Int):net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "encode", "tail" : "(k: Int, n: Int): Int", "member" : "net.alasc.symdpoly.math.Phase.encode", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#encode(k:Int,n:Int):Int", "kind" : "def"}, {"label" : "apply", "tail" : "(n: Int): Phase", "member" : "net.alasc.symdpoly.math.Phase.apply", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#apply(n:Int):net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "minusI", "tail" : ": Phase", "member" : "net.alasc.symdpoly.math.Phase.minusI", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#minusI:net.alasc.symdpoly.math.Phase", "kind" : "val"}, {"label" : "minusOne", "tail" : ": Phase", "member" : "net.alasc.symdpoly.math.Phase.minusOne", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#minusOne:net.alasc.symdpoly.math.Phase", "kind" : "val"}, {"label" : "i", "tail" : ": Phase", "member" : "net.alasc.symdpoly.math.Phase.i", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#i:net.alasc.symdpoly.math.Phase", "kind" : "val"}, {"label" : "one", "tail" : ": Phase", "member" : "net.alasc.symdpoly.math.Phase.one", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#one:net.alasc.symdpoly.math.Phase", "kind" : "val"}, {"label" : "unapply", "tail" : "(e: Phase): Phase", "member" : "net.alasc.symdpoly.math.Phase.unapply", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#unapply(e:net.alasc.symdpoly.math.Phase):net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "toCyclo", "tail" : "(p: Phase): Cyclo", "member" : "net.alasc.symdpoly.math.Phase.toCyclo", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#toCyclo(p:net.alasc.symdpoly.math.Phase):cyclo.Cyclo", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phase$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/Phase.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.math.PhasedInt", "shortDescription" : "Described a domain element (integer >= 0) along with a phase.", "object" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html", "members_class" : [{"label" : "_2", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.PhasedInt._2", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#_2:Int", "kind" : "def"}, {"label" : "_1", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.math.PhasedInt._1", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#_1:net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "get", "tail" : "(): PhasedInt", "member" : "net.alasc.symdpoly.math.PhasedInt.get", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#get:net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.PhasedInt.isEmpty", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "phase", "tail" : "(): Phase", "member" : "net.alasc.symdpoly.math.PhasedInt.phase", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#phase:net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "index", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.PhasedInt.index", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#index:Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.math.PhasedInt.toString", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#toString():String", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.PhasedInt#<init>", "error" : "unsupported entity"}, {"label" : "encoding", "tail" : ": Long", "member" : "net.alasc.symdpoly.math.PhasedInt.encoding", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#encoding:Long", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "equ", "tail" : ": Eq[PhasedInt]", "member" : "net.alasc.symdpoly.math.PhasedInt.equ", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#equ:spire.algebra.Eq[net.alasc.symdpoly.math.PhasedInt]", "kind" : "implicit val"}, {"label" : "arb", "tail" : ": Arbitrary[PhasedInt]", "member" : "net.alasc.symdpoly.math.PhasedInt.arb", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#arb:org.scalacheck.Arbitrary[net.alasc.symdpoly.math.PhasedInt]", "kind" : "implicit val"}, {"label" : "gen", "tail" : "(): Gen[PhasedInt]", "member" : "net.alasc.symdpoly.math.PhasedInt.gen", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#gen:org.scalacheck.Gen[net.alasc.symdpoly.math.PhasedInt]", "kind" : "def"}, {"label" : "apply", "tail" : "(phase: Phase, index: Int): PhasedInt", "member" : "net.alasc.symdpoly.math.PhasedInt.apply", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#apply(phase:net.alasc.symdpoly.math.Phase,index:Int):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "unapply", "tail" : "(pi: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.PhasedInt.unapply", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#unapply(pi:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/PhasedInt$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/PhasedInt.html", "kind" : "class"}, {"name" : "net.alasc.symdpoly.math.Phases", "shortDescription" : "Phase vector, representing a diagonal matrix of size N x N with \"root of unity\" entries.", "object" : "net\/alasc\/symdpoly\/math\/Phases$.html", "members_class" : [{"label" : "invImage", "tail" : "(pi: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.Phases.invImage", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#invImage(pi:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "image", "tail" : "(pi: PhasedInt): PhasedInt", "member" : "net.alasc.symdpoly.math.Phases.image", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#image(pi:net.alasc.symdpoly.math.PhasedInt):net.alasc.symdpoly.math.PhasedInt", "kind" : "def"}, {"label" : "truncate", "tail" : "(n: Int): Phases", "member" : "net.alasc.symdpoly.math.Phases.truncate", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#truncate(n:Int):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "phaseFor", "tail" : "(searchedElement: Int): Phase", "member" : "net.alasc.symdpoly.math.Phases.phaseFor", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#phaseFor(searchedElement:Int):net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "adjoint", "tail" : "(): Phases", "member" : "net.alasc.symdpoly.math.Phases.adjoint", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#adjoint:net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "|-|", "tail" : "(rhs: Phases): Phases", "member" : "net.alasc.symdpoly.math.Phases.|-|", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#|-|(rhs:net.alasc.symdpoly.math.Phases):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "|+|", "tail" : "(rhs: Phases): Phases", "member" : "net.alasc.symdpoly.math.Phases.|+|", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#|+|(rhs:net.alasc.symdpoly.math.Phases):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "inverse", "tail" : "(): Phases", "member" : "net.alasc.symdpoly.math.Phases.inverse", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#inverse:net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "combineRemove", "tail" : "(rhs: Phases, remove: Boolean): Phases", "member" : "net.alasc.symdpoly.math.Phases.combineRemove", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#combineRemove(rhs:net.alasc.symdpoly.math.Phases,remove:Boolean):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "mapKeys", "tail" : "(f: Perm): Phases", "member" : "net.alasc.symdpoly.math.Phases.mapKeys", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#mapKeys(f:net.alasc.perms.Perm):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "internal_===", "tail" : "(rhs: Phases): Boolean", "member" : "net.alasc.symdpoly.math.Phases.internal_===", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#internal_===(rhs:net.alasc.symdpoly.math.Phases):Boolean", "kind" : "def"}, {"label" : "valueEncoding", "tail" : "(i: Int): Int", "member" : "net.alasc.symdpoly.math.Phases.valueEncoding", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#valueEncoding(i:Int):Int", "kind" : "def"}, {"label" : "value", "tail" : "(i: Int): Phase", "member" : "net.alasc.symdpoly.math.Phases.value", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#value(i:Int):net.alasc.symdpoly.math.Phase", "kind" : "def"}, {"label" : "key", "tail" : "(i: Int): Int", "member" : "net.alasc.symdpoly.math.Phases.key", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#key(i:Int):Int", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "net.alasc.symdpoly.math.Phases.isEmpty", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.Phases.size", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#size:Int", "kind" : "def"}, {"label" : "hash", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.Phases.hash", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#hash:Int", "kind" : "def"}, {"label" : "string", "tail" : "(): String", "member" : "net.alasc.symdpoly.math.Phases.string", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#string:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "net.alasc.symdpoly.math.Phases.toString", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#toString():String", "kind" : "def"}, {"label" : "commonRootOrder", "tail" : "(): Int", "member" : "net.alasc.symdpoly.math.Phases.commonRootOrder", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#commonRootOrder:Int", "kind" : "def"}, {"label" : "elements", "tail" : "(): Map[Int, Phase]", "member" : "net.alasc.symdpoly.math.Phases.elements", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#elements:Map[Int,net.alasc.symdpoly.math.Phase]", "kind" : "def"}, {"member" : "net.alasc.symdpoly.math.Phases#<init>", "error" : "unsupported entity"}, {"label" : "encoding", "tail" : ": Array[Int]", "member" : "net.alasc.symdpoly.math.Phases.encoding", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#encoding:Array[Int]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "net\/alasc\/symdpoly\/math\/Phases.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "net\/alasc\/symdpoly\/math\/Phases.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "involution", "tail" : "(): Involution[Phases]", "member" : "net.alasc.symdpoly.math.Phases.involution", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#involution:spire.algebra.Involution[net.alasc.symdpoly.math.Phases]", "kind" : "implicit def"}, {"label" : "abGroup", "tail" : "(): AbGroup[Phases]", "member" : "net.alasc.symdpoly.math.Phases.abGroup", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#abGroup:spire.algebra.AbGroup[net.alasc.symdpoly.math.Phases]", "kind" : "implicit def"}, {"label" : "equ", "tail" : "(): Eq[Phases]", "member" : "net.alasc.symdpoly.math.Phases.equ", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#equ:spire.algebra.Eq[net.alasc.symdpoly.math.Phases]", "kind" : "implicit def"}, {"label" : "action", "tail" : ": Action[PhasedInt, Phases]", "member" : "net.alasc.symdpoly.math.Phases.action", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#action:spire.algebra.Action[net.alasc.symdpoly.math.PhasedInt,net.alasc.symdpoly.math.Phases]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(pairs: (Int, Phase)*): Phases", "member" : "net.alasc.symdpoly.math.Phases.apply", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#apply(pairs:(Int,net.alasc.symdpoly.math.Phase)*):net.alasc.symdpoly.math.Phases", "kind" : "def"}, {"label" : "empty", "tail" : ": Phases", "member" : "net.alasc.symdpoly.math.Phases.empty", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#empty:net.alasc.symdpoly.math.Phases", "kind" : "val"}, {"label" : "permAction", "tail" : ": Action[Phases, Perm]", "member" : "net.alasc.symdpoly.math.Phases.permAction", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#permAction:spire.algebra.Action[net.alasc.symdpoly.math.Phases,net.alasc.perms.Perm]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "net\/alasc\/symdpoly\/math\/Phases$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "net\/alasc\/symdpoly\/math\/Phases.html", "kind" : "class"}]};